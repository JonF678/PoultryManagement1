{"file_contents":{"README.md":{"content":"# Poultry Management System - Complete User Guide\n\n## Overview\n\nThis is a comprehensive Progressive Web Application (PWA) for managing poultry farms in Ghana. The system works completely offline and helps you track production cycles, manage cages, record daily production data, and analyze your farm's performance. All data is stored locally on your device, so you can use it anywhere without internet connection.\n\n## Table of Contents\n\n1. [Getting Started](#getting-started)\n2. [Main Features](#main-features)\n3. [Understanding Production Cycles](#understanding-production-cycles)\n4. [Cage Management](#cage-management)\n5. [Daily Production Tracking](#daily-production-tracking)\n6. [Sales Management](#sales-management)\n7. [Expense Tracking](#expense-tracking)\n8. [Vaccination Records](#vaccination-records)\n9. [Analytics Dashboard](#analytics-dashboard)\n10. [All Calculations Explained](#all-calculations-explained)\n11. [Performance Metrics](#performance-metrics)\n12. [Troubleshooting](#troubleshooting)\n\n---\n\n## Getting Started\n\n### What is a Progressive Web App (PWA)?\nA PWA is a website that works like a mobile app. You can:\n- Install it on your phone's home screen\n- Use it without internet connection\n- Access all your data anytime, anywhere\n\n### First Time Setup\n1. Open the app in your web browser\n2. Click \"Install App\" if prompted (optional)\n3. The app will automatically create sample data for you to explore\n4. Start by creating your first production cycle\n\n---\n\n## Main Features\n\n### 1. **Cycle Overview Dashboard**\nYour main control center showing:\n- All your production cycles (batches of birds)\n- Quick statistics for each cycle\n- Total eggs produced, birds, and financial summary\n\n### 2. **Cage Management**\n- Add and organize individual cages\n- Track bird count and status for each cage\n- Monitor cage-specific performance\n\n### 3. **Daily Production Tracking**\n- Record daily egg collection\n- Track feed consumption\n- Monitor bird health and mortality\n- Calculate efficiency metrics automatically\n\n### 4. **Sales Management**\n- Record egg sales by crates\n- Track customer information\n- Monitor payment methods\n- Calculate total revenue\n\n### 5. **Expense Tracking**\n- Record all farm expenses by category\n- Track feed costs, medication, labor, etc.\n- Monitor spending patterns\n\n### 6. **Vaccination Records**\n- Schedule and track vaccinations\n- Follow recommended vaccination timeline\n- Monitor bird health status\n\n### 7. **Analytics Dashboard**\n- View performance charts and graphs\n- Compare cage performance\n- Track profit and loss\n- Get insights and recommendations\n\n---\n\n## Understanding Production Cycles\n\n### What is a Production Cycle?\nA production cycle represents one batch of birds from when they start laying eggs until they're sold or replaced. Typically lasts 12-18 months.\n\n### Cycle Information Tracked:\n- **Start Date**: When the cycle began\n- **Bird Count**: Number of birds in the cycle\n- **Status**: Active, Completed, or Planned\n- **Cages**: Which cages are part of this cycle\n- **Financial Performance**: Revenue, expenses, and profit\n\n### Cycle Stages:\n1. **Setup**: Add cages and initial bird count\n2. **Production**: Daily egg collection and feed tracking\n3. **Sales**: Record egg sales and revenue\n4. **Monitoring**: Track expenses and bird health\n5. **Analysis**: Review performance and profitability\n\n---\n\n## Cage Management\n\n### Adding a New Cage\n1. Go to any active cycle\n2. Click \"Add New Cage\"\n3. Enter cage details:\n   - **Cage Name**: Unique identifier (e.g., \"Cage A1\")\n   - **Bird Count**: Number of birds in this cage\n   - **Status**: Active, Maintenance, or Inactive\n\n### Cage Information Displayed:\n- **Current Birds**: Live bird count\n- **Total Eggs**: Cumulative eggs produced\n- **Laying Rate**: Percentage of birds laying eggs\n- **Feed Efficiency**: How well feed converts to eggs\n- **Status**: Current cage condition\n\n---\n\n## Daily Production Tracking\n\n### What to Record Daily:\n1. **Date**: Day of recording\n2. **Flock Age**: Age of birds in days\n3. **Opening Birds**: Birds alive at start of day\n4. **Mortality**: Number of birds that died\n5. **Birds Sold**: Number of birds sold\n6. **Eggs Collected**: Total eggs in individual count\n7. **Feed Given**: Amount of feed provided (kg)\n\n### Automatically Calculated:\n- **Age in Weeks**: Flock age ÷ 7\n- **Closing Birds**: Opening birds - mortality - birds sold\n- **Cumulative Mortality**: Total deaths since cycle start\n- **Mortality Rate**: (Total deaths ÷ initial birds) × 100\n- **Production Rate**: (Eggs today ÷ current birds) × 100\n- **Cumulative Production**: Total eggs since cycle start\n- **Hen House Production**: Eggs per bird since laying started (19 weeks)\n- **Feed per Bird**: Daily feed ÷ current birds\n- **Feed per Egg**: Daily feed ÷ eggs collected\n\n---\n\n## Sales Management\n\n### Recording Sales:\n1. **Date**: When sale occurred\n2. **Customer**: Buyer's name\n3. **Crates**: Number of crates sold\n4. **Price per Crate**: Selling price in Ghanaian Cedis (₵)\n5. **Payment Method**: Cash, bank transfer, mobile money, etc.\n6. **Total Amount**: Automatically calculated\n\n### Sales Summary Shows:\n- **Total Sales**: All revenue in ₵\n- **Crates Sold**: Total crates sold\n- **Eggs Sold**: Total individual eggs sold\n- **Average Price**: Average price per crate\n\n---\n\n## Expense Tracking\n\n### Expense Categories:\n1. **Feed**: Bird feed purchases\n2. **Medication**: Vaccines, vitamins, treatments\n3. **Labor**: Worker wages and benefits\n4. **Utilities**: Electricity, water bills\n5. **Maintenance**: Repairs and equipment\n6. **Other**: Miscellaneous expenses\n\n### For Each Expense Record:\n- **Date**: When expense occurred\n- **Category**: Type of expense\n- **Amount**: Cost in Ghanaian Cedis (₵)\n- **Description**: What was purchased\n- **Vendor**: Who you bought from\n\n---\n\n## Vaccination Records\n\n### Standard Vaccination Schedule:\n- **Day 1**: Marek's disease vaccine\n- **Day 10**: Newcastle disease vaccine\n- **Day 18**: Infectious bronchitis vaccine\n- **Week 6**: Fowl pox vaccine\n- **Week 10**: Newcastle disease booster\n- **Week 16**: Infectious bronchitis booster\n\n### Recording Vaccinations:\n- **Date**: When vaccination was given\n- **Vaccine**: Type of vaccine used\n- **Method**: How it was administered\n- **Dosage**: Amount given\n- **Birds Treated**: Number of birds vaccinated\n- **Next Due**: When next vaccination is needed\n\n---\n\n## Analytics Dashboard\n\n### Key Performance Indicators (KPIs):\n1. **Total Production**: All eggs produced in cycle\n2. **Laying Rate**: Average percentage of birds laying\n3. **Feed Efficiency**: How well feed converts to eggs\n4. **Cycle Profit**: Revenue minus all expenses\n\n### Charts and Graphs:\n1. **Production Trend**: Daily egg collection over time\n2. **Cage Performance**: Comparison of all cages\n3. **Feed Consumption**: Daily feed usage patterns\n4. **Efficiency Metrics**: Performance trends over time\n\n### Performance Overview Table:\nShows all cages ranked by performance with:\n- **Total Eggs**: Cumulative production\n- **Laying Rate**: Color-coded performance badges\n- **Feed Efficiency**: Conversion rate\n- **Performance Score**: Overall rating out of 100\n\n---\n\n## All Calculations Explained\n\n### 1. **Laying Percentage (Production Rate)**\n```\nLaying Rate = (Eggs Collected ÷ Current Birds) × 100\n```\n**Example**: 80 eggs from 100 birds = 80% laying rate\n**What it means**: Percentage of your birds that laid eggs today\n\n### 2. **Feed Conversion Ratio (FCR)**\n```\nFCR = Total Feed Consumed (kg) ÷ Total Egg Weight (kg)\n```\n**Example**: 10kg feed for 8kg eggs = FCR of 1.25\n**What it means**: How much feed needed to produce 1kg of eggs (lower is better)\n\n### 3. **Feed Efficiency**\n```\nFeed Efficiency = Total Egg Weight (kg) ÷ Total Feed Consumed (kg)\n```\n**Example**: 8kg eggs from 10kg feed = 0.8 efficiency\n**What it means**: How much egg weight you get from 1kg of feed (higher is better)\n\n### 4. **Mortality Rate**\n```\nMortality Rate = (Total Deaths ÷ Initial Birds) × 100\n```\n**Example**: 5 deaths from 100 birds = 5% mortality rate\n**What it means**: Percentage of birds that have died since cycle start\n\n### 5. **Hen House Production**\n```\nHen House Production = Total Eggs ÷ Average Birds ÷ Days in Production\n```\n**Only counts days after 19 weeks of age (when laying typically starts)**\n**What it means**: Average eggs per bird per day during laying period\n\n### 6. **Feed per Bird per Day**\n```\nDaily Feed per Bird = Total Feed (kg) ÷ Current Birds\n```\n**Example**: 10kg feed for 100 birds = 0.1kg per bird per day\n**What it means**: How much feed each bird consumes daily\n\n### 7. **Feed per Egg**\n```\nFeed per Egg = Daily Feed (kg) ÷ Eggs Collected × 1000\n```\n**Result in grams per egg**\n**Example**: 10kg feed for 80 eggs = 125g feed per egg\n**What it means**: How much feed is used to produce one egg\n\n### 8. **Performance Score**\n```\nPerformance Score = (Laying Rate × 0.6) + (Feed Efficiency × 10 × 0.4)\n```\n**Example**: 80% laying rate + 0.8 feed efficiency = (80 × 0.6) + (8 × 0.4) = 51.2 points\n**What it means**: Overall cage performance rating out of 100\n\n### 9. **Profit Calculation**\n```\nProfit = Total Revenue - Total Expenses\nROI = (Profit ÷ Total Expenses) × 100\n```\n**Example**: ₵5000 revenue - ₵3000 expenses = ₵2000 profit (67% ROI)\n**What it means**: How much money you made after all costs\n\n### 10. **Break-Even Point**\n```\nBreak-Even = Fixed Costs ÷ (Price per Egg - Variable Cost per Egg)\n```\n**What it means**: How many eggs you need to sell to cover all costs\n\n---\n\n## Performance Metrics\n\n### Interpreting Your Numbers:\n\n#### **Laying Rate Benchmarks:**\n- **Excellent**: >85% (Green badge)\n- **Good**: 70-85% (Yellow badge)\n- **Needs Improvement**: <70% (Red badge)\n\n#### **Feed Efficiency Targets:**\n- **Excellent**: >0.8 (80g eggs per 100g feed)\n- **Good**: 0.6-0.8\n- **Needs Improvement**: <0.6\n\n#### **Feed per Egg Guidelines:**\n- **Excellent**: <120g feed per egg\n- **Good**: 120-150g feed per egg\n- **Needs Improvement**: >150g feed per egg\n\n#### **Mortality Rate Standards:**\n- **Excellent**: <2% total mortality\n- **Acceptable**: 2-5% total mortality\n- **Concerning**: >5% total mortality\n\n### Performance Score Interpretation:\n- **90-100**: Exceptional performance\n- **80-89**: Very good performance\n- **70-79**: Good performance\n- **60-69**: Average performance\n- **Below 60**: Needs improvement\n\n---\n\n## Troubleshooting\n\n### Common Issues:\n\n#### **\"No data showing in analytics\"**\n- Make sure you have recorded daily production data\n- Check that you have sales and expense records\n- Verify your cycle has active cages\n\n#### **\"Calculations seem wrong\"**\n- Ensure all daily entries are complete\n- Check that bird counts are accurate\n- Verify feed amounts are in kilograms\n\n#### **\"Performance scores are low\"**\n- Review laying rates - may need better nutrition\n- Check feed efficiency - might need feed adjustment\n- Consider bird health and vaccination status\n\n#### **\"App not working offline\"**\n- Ensure you've opened the app online at least once\n- Check if service worker is installed\n- Clear browser cache and reload\n\n### Getting Help:\n1. Check this README for explanations\n2. Look at the sample data for examples\n3. Use the debug tools in the app\n4. Contact your farm advisor with specific numbers\n\n---\n\n## Data Export and Backup\n\n### Exporting Your Data (CSV Format):\n1. Go to Settings in the app\n2. Choose from multiple export options:\n   - **Export All Data (CSV)**: Complete dataset with all records\n   - **Export Cycles Summary (CSV)**: Cycle overview with financial metrics\n   - **Export Production Data (CSV)**: Daily production logs only\n   - **Export Sales Data (CSV)**: Sales records only\n   - **Export Expense Data (CSV)**: Expense records only\n\n### Why CSV Format?\n- **Excel Compatible**: Open directly in Microsoft Excel, Google Sheets, or any spreadsheet application\n- **Easy Analysis**: Filter, sort, and create pivot tables for advanced analysis\n- **Universal Format**: Works with any data analysis software\n- **Readable**: Can be opened in text editors for quick viewing\n\n### What Each Export Contains:\n\n#### **All Data Export:**\n- Production logs with calculated metrics\n- Sales records with customer information\n- Expense records by category\n- All organized by cycle and date\n\n#### **Cycles Summary Export:**\n- Cycle name, dates, and status\n- Total birds and number of cages\n- Total eggs produced\n- Financial summary (revenue, expenses, profit, ROI)\n\n#### **Production Data Export:**\n- Date, cycle, and cage information\n- Flock age in days and weeks\n- Bird counts (opening, mortality, sold, closing)\n- Egg collection and production rates\n- Feed consumption and efficiency metrics\n- Cumulative statistics\n\n#### **Sales Data Export:**\n- Date and cycle information\n- Customer details and payment methods\n- Crates sold and pricing\n- Total amounts in Ghanaian Cedis (₵)\n\n#### **Expense Data Export:**\n- Date and cycle information\n- Expense categories and descriptions\n- Amounts and vendor information\n- Notes and additional details\n\n### Best Practices for Data Export:\n1. **Regular Backups**: Export data weekly or monthly\n2. **Multiple Formats**: Keep both detailed and summary exports\n3. **Date Naming**: Files are automatically named with export date\n4. **Storage**: Keep backups in multiple locations (cloud storage, local drive)\n5. **Version Control**: Keep historical exports to track changes over time\n\n---\n\n## Best Practices\n\n### Daily Routine:\n1. **Morning**: Record opening bird count\n2. **Collect Eggs**: Count and record immediately\n3. **Feed Birds**: Measure and record feed amount\n4. **Check Health**: Record any mortality or issues\n5. **Evening**: Complete daily entry in app\n\n### Weekly Tasks:\n1. Review performance metrics\n2. Check vaccination schedules\n3. Record any sales made\n4. Enter weekly expenses\n5. Analyze trends and insights\n\n### Monthly Analysis:\n1. Review cycle profitability\n2. Compare cage performance\n3. Analyze feed efficiency trends\n4. Plan for next period improvements\n5. Export data for backup\n\n---\n\n## Understanding Your Farm's Financial Health\n\n### Key Financial Metrics:\n\n#### **Revenue Streams:**\n- **Egg Sales**: Primary income source\n- **Bird Sales**: Secondary income when birds are sold\n\n#### **Major Expenses:**\n- **Feed**: Usually 60-70% of total costs\n- **Medication**: 5-10% of total costs\n- **Labor**: 10-15% of total costs\n- **Utilities**: 5-10% of total costs\n- **Other**: 5-10% of total costs\n\n#### **Profitability Analysis:**\n- **Gross Profit**: Revenue minus feed costs\n- **Net Profit**: Revenue minus all expenses\n- **Profit Margin**: (Net Profit ÷ Revenue) × 100\n\n### Making Informed Decisions:\nUse the analytics to:\n1. **Identify top performing cages** for breeding\n2. **Optimize feed usage** based on efficiency data\n3. **Plan sales timing** based on production trends\n4. **Budget for expenses** using historical data\n5. **Improve overall profitability** through data-driven decisions\n\n---\n\nThis guide covers every aspect of the Poultry Management System. Keep it handy as you use the app, and refer back to the calculations section whenever you need to understand what the numbers mean for your farm's success.","size_bytes":15142},"desktop-build.js":{"content":"const fs = require('fs');\nconst path = require('path');\n\n// Simple build script for desktop packaging\nconsole.log('Building Poultry Manager Desktop App...');\n\n// Create build configuration\nconst buildConfig = {\n    productName: 'Poultry Manager',\n    appId: 'com.poultrymanager.app',\n    directories: {\n        output: 'dist'\n    },\n    files: [\n        'electron/**/*',\n        'index.html',\n        'css/**/*',\n        'js/**/*',\n        'icons/**/*',\n        'manifest.json',\n        'sw.js'\n    ],\n    win: {\n        icon: 'icons/icon-512.png'\n    },\n    mac: {\n        icon: 'icons/icon-512.png'\n    },\n    linux: {\n        icon: 'icons/icon-512.png'\n    }\n};\n\n// Write the configuration\nfs.writeFileSync('build-config.json', JSON.stringify(buildConfig, null, 2));\n\nconsole.log('Build configuration created successfully!');\nconsole.log('\\nTo build the desktop app:');\nconsole.log('1. Install electron globally: npm install -g electron');\nconsole.log('2. Run electron: electron electron/main.js');\nconsole.log('3. For packaging: npx electron-builder --config build-config.json');","size_bytes":1083},"desktop-readme.md":{"content":"# Poultry Manager Desktop App\n\n## Overview\nThis converts your existing Poultry Management PWA into a full desktop application using Electron, adding powerful desktop-specific features while maintaining all existing functionality.\n\n## Desktop Features Added\n\n### Native File Operations\n- **File Import**: Native file dialogs for CSV imports\n- **Export with Save Dialog**: Choose where to save exports\n- **Automatic Backups**: Save backups to custom locations\n\n### Desktop Integration\n- **Native Menus**: File, Edit, View, Analytics, and Help menus\n- **Keyboard Shortcuts**: \n  - Ctrl/Cmd+I: Import CSV\n  - Ctrl/Cmd+E: Export Data\n  - Ctrl/Cmd+B: Create Backup\n  - Ctrl/Cmd+P: Print Reports\n- **System Notifications**: Desktop notifications for operations\n- **Window Management**: Proper desktop window with minimize/maximize\n\n### Enhanced Functionality\n- **Print Support**: Print production reports directly\n- **Offline First**: Works completely offline as desktop app\n- **Native Look**: Platform-specific styling and behaviors\n- **Better Performance**: No browser overhead\n\n## Quick Start\n\n### Option 1: Development Mode\n```bash\n# Start the web server and Electron together\nnode desktop-build.js\nelectron electron/main.js\n```\n\n### Option 2: Standalone Mode\n```bash\n# For standalone desktop app (requires local files)\nelectron electron/main.js\n```\n\n## Building for Distribution\n\n### Prerequisites\n```bash\nnpm install -g electron-builder\n```\n\n### Build Commands\n```bash\n# Build for current platform\nnpx electron-builder --config electron-builder.json\n\n# Build for all platforms\nnpx electron-builder --mac --win --linux --config electron-builder.json\n\n# Create installer packages\nnpx electron-builder --publish=never --config electron-builder.json\n```\n\n### Output\n- **Windows**: `.exe` installer in `dist/`\n- **macOS**: `.dmg` file in `dist/`\n- **Linux**: `.AppImage` and `.deb` in `dist/`\n\n## File Structure\n```\nelectron/\n├── main.js          # Main Electron process\n├── preload.js       # Secure bridge to web content\n├── renderer.js      # Desktop-specific enhancements\nelectron-builder.json # Build configuration\ndesktop-build.js     # Build helper script\n```\n\n## Desktop vs Web Differences\n\n| Feature | Web (PWA) | Desktop (Electron) |\n|---------|-----------|-------------------|\n| File Access | Download/Upload only | Native file dialogs |\n| Notifications | Browser dependent | Native OS notifications |\n| Printing | Browser print | Native print with options |\n| Offline | Service worker cache | Full offline capability |\n| Updates | Manual refresh | Auto-update support |\n| Shortcuts | Limited browser shortcuts | Full keyboard shortcuts |\n| Integration | Limited OS integration | Deep OS integration |\n\n## Security Features\n- **Context Isolation**: Secure communication between main and renderer\n- **No Node Integration**: Web content runs in secure sandbox\n- **Preload Script**: Safe API exposure to web content\n- **CSP Ready**: Compatible with Content Security Policies\n\n## Development Tips\n\n### Debugging\n- Use `F12` to open DevTools in development\n- Check `electron/main.js` logs in terminal\n- Use `console.log` in preload script for debugging\n\n### Customization\n- Modify `electron/main.js` for window behavior\n- Update `electron/preload.js` for new desktop features\n- Edit `electron-builder.json` for build options\n\n### Performance\n- The app loads your existing PWA in an Electron window\n- All your existing code works without changes\n- IndexedDB, localStorage, and all web APIs work normally\n\n## Deployment\n1. Test in development mode first\n2. Build for target platforms\n3. Test installers on target systems\n4. Distribute via direct download or app stores\n\nYour existing authentication system, data management, and all PWA features work exactly the same in the desktop version!","size_bytes":3806},"replit.md":{"content":"# Poultry Management System\n\n## Overview\nThis Progressive Web Application (PWA) is designed for comprehensive poultry farm management. It offers offline-capable functionality for tracking production cycles, managing cages, logging vital production data, and analyzing performance metrics. The system is a client-side application utilizing local data storage, ensuring reliability even without internet connectivity. Its core capabilities include detailed tracking of egg and bird sales, expenses, and vaccination records, providing a holistic view of farm operations and profitability.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Single Page Application (SPA)**: Built with vanilla JavaScript and a custom routing system.\n- **Progressive Web App (PWA)**: Includes a service worker for offline functionality and an app-like experience, enabling installation as a native app.\n- **Responsive Design**: Utilizes Bootstrap 5 for a mobile-first, responsive UI.\n- **Component-Based**: Modular JavaScript components organize different sections like cycles, cages, and analytics.\n\n### Data Storage\n- **IndexedDB**: Browser-based NoSQL database for robust offline data persistence.\n- **Local Storage**: All data is stored client-side for complete offline functionality, with no server dependencies.\n\n### UI/UX Decisions\n- **Bootstrap 5**: Core framework for responsive grid systems and UI components.\n- **Font Awesome**: Used for consistent iconography.\n- **Chart.js**: Integrated for dynamic data visualization and analytics charts.\n- **Custom CSS**: Augments styling using CSS custom properties for a tailored look.\n- **Date Format**: Universal `dd/mm/yyyy` format implemented across the entire application for consistent date display.\n- **Currency Support**: User-selectable currency (Ghanaian Cedi, US Dollar, British Pound) with Ghanaian Cedi as default, applied consistently across all financial records.\n\n### Technical Implementations\n- **Core Components**: Includes CycleOverview (main dashboard), CageDetail (individual cage management), Analytics (performance metrics), and CageManager (creation/management).\n- **Calculations**: Provides utilities for feed conversion ratios, laying percentages, efficiency metrics, and comprehensive financial calculations (e.g., ROI).\n- **Data Flow**: User input is immediately saved to IndexedDB, triggering real-time UI updates, on-demand analytics processing, and Chart.js rendering.\n- **Daily Entry System**: Redesigned for cage-level entry of mortality and egg production, with cycle-level tracking for feed consumption and birds sold. Auto-calculates flock age and opening birds.\n- **Sales and Expense Management**: Dual-tab system for tracking egg and bird sales, and categorized expense recording. Features comprehensive filtering by category and sales type.\n- **Vaccination Management**: Comprehensive tracking with user-configurable schedules and automatic flock age calculation.\n- **CSV Import/Export**: Bidirectional data transfer for production logs, sales, expenses, and feed logs, optimized for Excel compatibility with template downloads and smart import that auto-creates missing cycles/cages.\n- **Analytics Enhancements**: Time period filtering (daily, weekly, monthly, yearly), daily metric granularity, and secondary Y-axes for percentage-based metrics in charts. Handles various data field formats for compatibility.\n\n## External Dependencies\n\n### CDN Resources\n- **Bootstrap 5.3.0**: CSS framework and JavaScript components for responsive design.\n- **Font Awesome 6.4.0**: Icon library for visual elements.\n- **Chart.js 3.9.1**: JavaScript library for data visualization and analytics charts.\n\n### PWA Features\n- **Service Worker**: Manages caching of application resources for offline functionality.\n- **Web App Manifest**: Enables the application to be installed as a native app on devices.","size_bytes":3939},"sw.js":{"content":"const CACHE_NAME = 'poultry-manager-v2';\nconst urlsToCache = [\n  '/',\n  '/index.html',\n  '/css/styles.css',\n  '/js/app.js',\n  '/js/db.js',\n  '/js/router.js',\n  '/js/components/cycle-overview.js',\n  '/js/components/cage-detail.js',\n  '/js/components/analytics.js',\n  '/js/components/cage-manager.js',\n  '/js/utils/charts.js',\n  '/js/utils/calculations.js',\n  '/manifest.json',\n  'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css',\n  'https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js',\n  'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css',\n  'https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js'\n];\n\n// Install event - cache resources\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then(cache => {\n        console.log('Opened cache');\n        return cache.addAll(urlsToCache);\n      })\n      .catch(error => {\n        console.error('Error caching resources:', error);\n      })\n  );\n});\n\n// Fetch event - serve from cache, fallback to network\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request)\n      .then(response => {\n        // Return cached version or fetch from network\n        if (response) {\n          return response;\n        }\n        \n        return fetch(event.request)\n          .then(response => {\n            // Don't cache if not a valid response\n            if (!response || response.status !== 200 || response.type !== 'basic') {\n              return response;\n            }\n\n            // Clone the response\n            const responseToCache = response.clone();\n\n            caches.open(CACHE_NAME)\n              .then(cache => {\n                cache.put(event.request, responseToCache);\n              });\n\n            return response;\n          });\n      })\n      .catch(() => {\n        // Return offline page for navigation requests\n        if (event.request.destination === 'document') {\n          return caches.match('/index.html');\n        }\n      })\n  );\n});\n\n// Activate event - cleanup old caches\nself.addEventListener('activate', event => {\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheName !== CACHE_NAME) {\n            console.log('Deleting old cache:', cacheName);\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n","size_bytes":2464},"css/auth.css":{"content":"/* Authentication Styles */\n.login-container {\n    min-height: 100vh;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n    padding: 20px;\n}\n\n.login-card {\n    background: white;\n    padding: 40px;\n    border-radius: 15px;\n    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);\n    width: 100%;\n    max-width: 400px;\n    text-align: center;\n}\n\n.login-header {\n    margin-bottom: 30px;\n}\n\n.login-icon {\n    font-size: 3rem;\n    color: #2563eb;\n    margin-bottom: 20px;\n}\n\n.login-header h2 {\n    color: #1f2937;\n    margin-bottom: 10px;\n    font-weight: 600;\n}\n\n.login-form {\n    text-align: left;\n}\n\n.form-group {\n    margin-bottom: 20px;\n}\n\n.input-group-text {\n    background-color: #f8f9fa;\n    border-right: none;\n    color: #6b7280;\n}\n\n.form-control {\n    border-left: none;\n    padding-left: 10px;\n}\n\n.form-control:focus {\n    border-color: #2563eb;\n    box-shadow: 0 0 0 0.2rem rgba(37, 99, 235, 0.25);\n}\n\n.input-group-text + .form-control {\n    border-left: 1px solid #ced4da;\n}\n\n.input-group:focus-within .input-group-text {\n    border-color: #2563eb;\n    background-color: rgba(37, 99, 235, 0.1);\n    color: #2563eb;\n}\n\n.btn-primary {\n    background-color: #2563eb;\n    border-color: #2563eb;\n    padding: 12px;\n    font-weight: 500;\n    transition: all 0.3s ease;\n}\n\n.btn-primary:hover {\n    background-color: #1d4ed8;\n    border-color: #1d4ed8;\n    transform: translateY(-1px);\n}\n\n.login-footer {\n    margin-top: 30px;\n    padding-top: 20px;\n    border-top: 1px solid #e5e7eb;\n}\n\n.alert-danger {\n    background-color: #fef2f2;\n    border-color: #fecaca;\n    color: #dc2626;\n    border-radius: 8px;\n}\n\n/* Form check styles */\n.form-check-input:checked {\n    background-color: #2563eb;\n    border-color: #2563eb;\n}\n\n.form-check-label {\n    color: #6b7280;\n    font-size: 0.9rem;\n}\n\n/* Responsive design */\n@media (max-width: 576px) {\n    .login-container {\n        padding: 10px;\n    }\n    \n    .login-card {\n        padding: 30px 20px;\n    }\n    \n    .login-icon {\n        font-size: 2.5rem;\n    }\n}\n\n/* Animation for login card */\n.login-card {\n    animation: slideUp 0.5s ease-out;\n}\n\n@keyframes slideUp {\n    from {\n        opacity: 0;\n        transform: translateY(30px);\n    }\n    to {\n        opacity: 1;\n        transform: translateY(0);\n    }\n}","size_bytes":2344},"css/styles.css":{"content":":root {\n  --primary-color: #2563eb;\n  --secondary-color: #64748b;\n  --success-color: #10b981;\n  --warning-color: #f59e0b;\n  --danger-color: #ef4444;\n  --light-bg: #f8fafc;\n  --border-color: #e2e8f0;\n  --text-color: #1e293b;\n  --card-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n}\n\nbody {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  background-color: var(--light-bg);\n  color: var(--text-color);\n  padding-top: 76px;\n  padding-bottom: 80px;\n}\n\n.main-content {\n  min-height: calc(100vh - 156px);\n}\n\n.card {\n  border: none;\n  box-shadow: var(--card-shadow);\n  border-radius: 12px;\n  margin-bottom: 1.5rem;\n}\n\n.card-header {\n  background-color: white;\n  border-bottom: 1px solid var(--border-color);\n  font-weight: 600;\n  border-radius: 12px 12px 0 0 !important;\n}\n\n.btn {\n  border-radius: 8px;\n  font-weight: 500;\n  padding: 0.5rem 1rem;\n}\n\n.btn-primary {\n  background-color: var(--primary-color);\n  border-color: var(--primary-color);\n}\n\n.btn-primary:hover {\n  background-color: #1d4ed8;\n  border-color: #1d4ed8;\n}\n\n.navbar-brand {\n  font-weight: 700;\n  font-size: 1.25rem;\n}\n\n.nav-link {\n  font-weight: 500;\n  transition: all 0.2s ease;\n}\n\n.nav-link:hover {\n  transform: translateY(-1px);\n}\n\n.bottom-nav .nav-link {\n  padding: 0.5rem;\n  font-size: 0.875rem;\n}\n\n.form-control, .form-select {\n  border-radius: 8px;\n  border: 1px solid var(--border-color);\n  padding: 0.75rem;\n}\n\n.form-control:focus, .form-select:focus {\n  border-color: var(--primary-color);\n  box-shadow: 0 0 0 0.2rem rgba(37, 99, 235, 0.1);\n}\n\n.table {\n  margin-bottom: 0;\n}\n\n.table th {\n  border-top: none;\n  font-weight: 600;\n  color: var(--secondary-color);\n  font-size: 0.875rem;\n  text-transform: uppercase;\n  letter-spacing: 0.025em;\n}\n\n.badge {\n  font-weight: 500;\n  padding: 0.5em 0.75em;\n  border-radius: 6px;\n}\n\n.alert {\n  border: none;\n  border-radius: 8px;\n  font-weight: 500;\n}\n\n.modal-content {\n  border: none;\n  border-radius: 12px;\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n.modal-header {\n  border-bottom: 1px solid var(--border-color);\n  border-radius: 12px 12px 0 0;\n}\n\n.modal-footer {\n  border-top: 1px solid var(--border-color);\n  border-radius: 0 0 12px 12px;\n}\n\n.spinner-border {\n  width: 3rem;\n  height: 3rem;\n}\n\n.stats-card {\n  transition: transform 0.2s ease;\n}\n\n.stats-card:hover {\n  transform: translateY(-2px);\n}\n\n.stats-value {\n  font-size: 2rem;\n  font-weight: 700;\n  line-height: 1;\n}\n\n.stats-label {\n  font-size: 0.875rem;\n  color: var(--secondary-color);\n  font-weight: 500;\n}\n\n.cage-item {\n  transition: all 0.2s ease;\n  cursor: pointer;\n}\n\n.cage-item:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n}\n\n.production-form {\n  background: white;\n  border-radius: 12px;\n  padding: 1.5rem;\n  margin-bottom: 2rem;\n  box-shadow: var(--card-shadow);\n}\n\n.quick-stats {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 1rem;\n  margin-bottom: 2rem;\n}\n\n.chart-container {\n  position: relative;\n  height: 300px;\n  margin-bottom: 2rem;\n}\n\n@media (max-width: 576px) {\n  .quick-stats {\n    grid-template-columns: repeat(2, 1fr);\n  }\n  \n  .stats-value {\n    font-size: 1.5rem;\n  }\n  \n  .card {\n    margin-bottom: 1rem;\n  }\n  \n  .chart-container {\n    height: 250px;\n  }\n}\n\n.fade-in {\n  animation: fadeIn 0.3s ease-in-out;\n}\n\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.loading-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: rgba(255, 255, 255, 0.9);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 9999;\n}\n\n.empty-state {\n  text-align: center;\n  padding: 3rem 1rem;\n  color: var(--secondary-color);\n}\n\n.empty-state i {\n  font-size: 3rem;\n  margin-bottom: 1rem;\n  opacity: 0.5;\n}\n\n.empty-state h4 {\n  margin-bottom: 1rem;\n  color: var(--text-color);\n}\n\n.status-active {\n  color: var(--success-color);\n}\n\n.status-completed {\n  color: var(--secondary-color);\n}\n\n.status-planned {\n  color: var(--warning-color);\n}","size_bytes":4184},"electron/main.js":{"content":"const { app, BrowserWindow, Menu, dialog, shell, ipcMain } = require('electron');\nconst path = require('path');\nconst fs = require('fs');\n\n// Enable live reload for development\nif (process.env.NODE_ENV === 'development') {\n    require('electron-reload')(__dirname, {\n        electron: path.join(__dirname, '..', 'node_modules', '.bin', 'electron'),\n        hardResetMethod: 'exit'\n    });\n}\n\nclass PoultryApp {\n    constructor() {\n        this.mainWindow = null;\n        this.isDevelopment = process.env.NODE_ENV === 'development';\n    }\n\n    async initialize() {\n        // Set up app event handlers\n        app.whenReady().then(() => this.createMainWindow());\n        app.on('window-all-closed', () => this.handleWindowsClosed());\n        app.on('activate', () => this.handleActivate());\n\n        // Set up IPC handlers for desktop features\n        this.setupIpcHandlers();\n    }\n\n    createMainWindow() {\n        // Create the browser window\n        this.mainWindow = new BrowserWindow({\n            width: 1200,\n            height: 800,\n            minWidth: 800,\n            minHeight: 600,\n            icon: path.join(__dirname, '..', 'icons', 'icon-512.png'),\n            webPreferences: {\n                nodeIntegration: false,\n                contextIsolation: true,\n                enableRemoteModule: false,\n                preload: path.join(__dirname, 'preload.js')\n            },\n            titleBarStyle: 'default',\n            show: false // Don't show until ready\n        });\n\n        // Load the PWA\n        const startUrl = this.isDevelopment \n            ? 'http://localhost:5000' \n            : `file://${path.join(__dirname, '..', 'index.html')}`;\n        \n        this.mainWindow.loadURL(startUrl);\n\n        // Show window when ready\n        this.mainWindow.once('ready-to-show', () => {\n            this.mainWindow.show();\n            \n            // Open DevTools in development\n            if (this.isDevelopment) {\n                this.mainWindow.webContents.openDevTools();\n            }\n        });\n\n        // Handle window closed\n        this.mainWindow.on('closed', () => {\n            this.mainWindow = null;\n        });\n\n        // Set up menu\n        this.createMenu();\n\n        // Handle external links\n        this.mainWindow.webContents.setWindowOpenHandler(({ url }) => {\n            shell.openExternal(url);\n            return { action: 'deny' };\n        });\n    }\n\n    createMenu() {\n        const template = [\n            {\n                label: 'File',\n                submenu: [\n                    {\n                        label: 'Import CSV Data',\n                        accelerator: 'CmdOrCtrl+I',\n                        click: () => this.handleImportCSV()\n                    },\n                    {\n                        label: 'Export All Data',\n                        accelerator: 'CmdOrCtrl+E',\n                        click: () => this.handleExportData()\n                    },\n                    { type: 'separator' },\n                    {\n                        label: 'Create Backup',\n                        accelerator: 'CmdOrCtrl+B',\n                        click: () => this.handleCreateBackup()\n                    },\n                    { type: 'separator' },\n                    {\n                        role: 'quit'\n                    }\n                ]\n            },\n            {\n                label: 'Edit',\n                submenu: [\n                    { role: 'undo' },\n                    { role: 'redo' },\n                    { type: 'separator' },\n                    { role: 'cut' },\n                    { role: 'copy' },\n                    { role: 'paste' }\n                ]\n            },\n            {\n                label: 'View',\n                submenu: [\n                    { role: 'reload' },\n                    { role: 'forceReload' },\n                    { role: 'toggleDevTools' },\n                    { type: 'separator' },\n                    { role: 'resetZoom' },\n                    { role: 'zoomIn' },\n                    { role: 'zoomOut' },\n                    { type: 'separator' },\n                    { role: 'togglefullscreen' }\n                ]\n            },\n            {\n                label: 'Analytics',\n                submenu: [\n                    {\n                        label: 'Print Production Report',\n                        accelerator: 'CmdOrCtrl+P',\n                        click: () => this.handlePrintReport()\n                    },\n                    {\n                        label: 'Export Charts as PDF',\n                        click: () => this.handleExportCharts()\n                    }\n                ]\n            },\n            {\n                label: 'Help',\n                submenu: [\n                    {\n                        label: 'About Poultry Manager',\n                        click: () => this.showAbout()\n                    },\n                    {\n                        label: 'Open Data Folder',\n                        click: () => this.openDataFolder()\n                    }\n                ]\n            }\n        ];\n\n        // macOS specific menu adjustments\n        if (process.platform === 'darwin') {\n            template.unshift({\n                label: app.getName(),\n                submenu: [\n                    { role: 'about' },\n                    { type: 'separator' },\n                    { role: 'services' },\n                    { type: 'separator' },\n                    { role: 'hide' },\n                    { role: 'hideOthers' },\n                    { role: 'unhide' },\n                    { type: 'separator' },\n                    { role: 'quit' }\n                ]\n            });\n        }\n\n        const menu = Menu.buildFromTemplate(template);\n        Menu.setApplicationMenu(menu);\n    }\n\n    setupIpcHandlers() {\n        // Handle file imports\n        ipcMain.handle('import-csv-file', async () => {\n            const result = await dialog.showOpenDialog(this.mainWindow, {\n                properties: ['openFile'],\n                filters: [\n                    { name: 'CSV Files', extensions: ['csv'] },\n                    { name: 'All Files', extensions: ['*'] }\n                ]\n            });\n\n            if (!result.canceled && result.filePaths.length > 0) {\n                const filePath = result.filePaths[0];\n                try {\n                    const content = fs.readFileSync(filePath, 'utf8');\n                    return { success: true, content, fileName: path.basename(filePath) };\n                } catch (error) {\n                    return { success: false, error: error.message };\n                }\n            }\n            return { success: false, error: 'No file selected' };\n        });\n\n        // Handle file exports\n        ipcMain.handle('export-data-file', async (event, data, fileName) => {\n            const result = await dialog.showSaveDialog(this.mainWindow, {\n                defaultPath: fileName,\n                filters: [\n                    { name: 'JSON Files', extensions: ['json'] },\n                    { name: 'CSV Files', extensions: ['csv'] },\n                    { name: 'All Files', extensions: ['*'] }\n                ]\n            });\n\n            if (!result.canceled) {\n                try {\n                    fs.writeFileSync(result.filePath, data);\n                    return { success: true, filePath: result.filePath };\n                } catch (error) {\n                    return { success: false, error: error.message };\n                }\n            }\n            return { success: false, error: 'Save canceled' };\n        });\n\n        // Handle backup creation\n        ipcMain.handle('create-backup', async (event, data) => {\n            const today = new Date().toISOString().split('T')[0];\n            const defaultName = `poultry-backup-${today}.json`;\n            \n            const result = await dialog.showSaveDialog(this.mainWindow, {\n                defaultPath: defaultName,\n                filters: [\n                    { name: 'JSON Files', extensions: ['json'] },\n                    { name: 'All Files', extensions: ['*'] }\n                ]\n            });\n\n            if (!result.canceled) {\n                try {\n                    fs.writeFileSync(result.filePath, data);\n                    return { success: true, filePath: result.filePath };\n                } catch (error) {\n                    return { success: false, error: error.message };\n                }\n            }\n            return { success: false, error: 'Backup canceled' };\n        });\n\n        // Handle notifications\n        ipcMain.handle('show-notification', (event, title, body) => {\n            new Notification(title, { body }).show();\n        });\n    }\n\n    async handleImportCSV() {\n        this.mainWindow.webContents.send('menu-action', 'import-csv');\n    }\n\n    async handleExportData() {\n        this.mainWindow.webContents.send('menu-action', 'export-data');\n    }\n\n    async handleCreateBackup() {\n        this.mainWindow.webContents.send('menu-action', 'create-backup');\n    }\n\n    async handlePrintReport() {\n        this.mainWindow.webContents.print({\n            silent: false,\n            printBackground: true,\n            margins: {\n                marginType: 'minimum'\n            }\n        });\n    }\n\n    async handleExportCharts() {\n        this.mainWindow.webContents.send('menu-action', 'export-charts');\n    }\n\n    showAbout() {\n        dialog.showMessageBox(this.mainWindow, {\n            type: 'info',\n            title: 'About Poultry Manager',\n            message: 'Poultry Management System',\n            detail: 'Version 1.0.0\\n\\nA comprehensive desktop application for managing poultry farms with production tracking, analytics, and reporting capabilities.',\n            buttons: ['OK']\n        });\n    }\n\n    openDataFolder() {\n        const userDataPath = app.getPath('userData');\n        shell.openPath(userDataPath);\n    }\n\n    handleWindowsClosed() {\n        if (process.platform !== 'darwin') {\n            app.quit();\n        }\n    }\n\n    handleActivate() {\n        if (BrowserWindow.getAllWindows().length === 0) {\n            this.createMainWindow();\n        }\n    }\n}\n\n// Initialize the app\nconst poultryApp = new PoultryApp();\npoultryApp.initialize();","size_bytes":10270},"electron/preload.js":{"content":"const { contextBridge, ipcRenderer } = require('electron');\n\n// Expose protected methods that allow the renderer process to use\n// the ipcRenderer without exposing the entire object\ncontextBridge.exposeInMainWorld('electronAPI', {\n    // File operations\n    importCSVFile: () => ipcRenderer.invoke('import-csv-file'),\n    exportDataFile: (data, fileName) => ipcRenderer.invoke('export-data-file', data, fileName),\n    createBackup: (data) => ipcRenderer.invoke('create-backup', data),\n    \n    // Notifications\n    showNotification: (title, body) => ipcRenderer.invoke('show-notification', title, body),\n    \n    // Menu actions\n    onMenuAction: (callback) => ipcRenderer.on('menu-action', callback),\n    removeMenuActionListener: () => ipcRenderer.removeAllListeners('menu-action'),\n    \n    // Platform info\n    platform: process.platform\n});\n\n// Desktop-specific enhancements\nwindow.addEventListener('DOMContentLoaded', () => {\n    // Add desktop class to body for desktop-specific styling\n    document.body.classList.add('electron-app');\n    \n    // Enhance existing functionality with desktop features\n    enhanceWithDesktopFeatures();\n});\n\nfunction enhanceWithDesktopFeatures() {\n    // Listen for menu actions\n    window.electronAPI.onMenuAction((event, action) => {\n        switch (action) {\n            case 'import-csv':\n                handleDesktopImport();\n                break;\n            case 'export-data':\n                handleDesktopExport();\n                break;\n            case 'create-backup':\n                handleDesktopBackup();\n                break;\n            case 'export-charts':\n                handleDesktopChartExport();\n                break;\n        }\n    });\n}\n\nasync function handleDesktopImport() {\n    try {\n        const result = await window.electronAPI.importCSVFile();\n        if (result.success) {\n            // Trigger the existing CSV import functionality\n            if (window.csvHandler && window.csvHandler.parseCSV) {\n                const data = window.csvHandler.parseCSV(result.content);\n                // Process the imported data\n                console.log('Desktop import successful:', result.fileName);\n                \n                // Show success notification\n                window.electronAPI.showNotification(\n                    'Import Successful', \n                    `Successfully imported ${result.fileName}`\n                );\n            }\n        }\n    } catch (error) {\n        console.error('Desktop import failed:', error);\n    }\n}\n\nasync function handleDesktopExport() {\n    try {\n        // Get all data from the existing app\n        if (window.db) {\n            const cycles = await window.db.getAll('cycles');\n            const cages = await window.db.getAll('cages');\n            const productionLogs = await window.db.getAll('productionLogs');\n            const feedLogs = await window.db.getAll('feedLogs');\n            const sales = await window.db.getAll('sales') || [];\n            const expenses = await window.db.getAll('expenses') || [];\n            const vaccinations = await window.db.getAll('vaccinations') || [];\n\n            const exportData = {\n                cycles,\n                cages,\n                productionLogs,\n                feedLogs,\n                sales,\n                expenses,\n                vaccinations,\n                exportDate: new Date().toISOString(),\n                version: '1.0'\n            };\n\n            const data = JSON.stringify(exportData, null, 2);\n            const fileName = `poultry-backup-${new Date().toISOString().split('T')[0]}.json`;\n            \n            const result = await window.electronAPI.exportDataFile(data, fileName);\n            if (result.success) {\n                window.electronAPI.showNotification(\n                    'Export Successful', \n                    `Data exported to ${result.filePath}`\n                );\n            }\n        }\n    } catch (error) {\n        console.error('Desktop export failed:', error);\n    }\n}\n\nasync function handleDesktopBackup() {\n    try {\n        // Similar to export but specifically for backups\n        if (window.db) {\n            const cycles = await window.db.getAll('cycles');\n            const cages = await window.db.getAll('cages');\n            const productionLogs = await window.db.getAll('productionLogs');\n            const feedLogs = await window.db.getAll('feedLogs');\n            const sales = await window.db.getAll('sales') || [];\n            const expenses = await window.db.getAll('expenses') || [];\n            const vaccinations = await window.db.getAll('vaccinations') || [];\n\n            const backupData = {\n                cycles,\n                cages,\n                productionLogs,\n                feedLogs,\n                sales,\n                expenses,\n                vaccinations,\n                backupDate: new Date().toISOString(),\n                version: '1.0',\n                type: 'automatic_backup'\n            };\n\n            const data = JSON.stringify(backupData, null, 2);\n            \n            const result = await window.electronAPI.createBackup(data);\n            if (result.success) {\n                window.electronAPI.showNotification(\n                    'Backup Created', \n                    `Backup saved to ${result.filePath}`\n                );\n            }\n        }\n    } catch (error) {\n        console.error('Desktop backup failed:', error);\n    }\n}\n\nasync function handleDesktopChartExport() {\n    // This would capture charts and export as PDF\n    console.log('Chart export requested - this could be enhanced to generate PDF reports');\n}","size_bytes":5626},"js/app.js":{"content":"class PoultryApp {\n    constructor() {\n        this.initialized = false;\n        this.db = null;\n        this.router = null;\n    }\n\n    async init() {\n        if (this.initialized) return;\n\n        try {\n            // Check authentication first\n            if (!auth.checkSession()) {\n                await auth.showLoginScreen();\n                // Restore the original page structure after login\n                this.restoreAppStructure();\n            }\n\n            // Show loading screen\n            this.showLoadingScreen();\n\n            // Initialize database\n            await this.initDatabase();\n\n            // Register service worker\n            await this.registerServiceWorker();\n\n            // Initialize components\n            this.initializeComponents();\n\n            // Add logout button to navbar\n            auth.addLogoutButton();\n\n            // Hide loading screen\n            this.hideLoadingScreen();\n\n            this.initialized = true;\n            console.log('Poultry Management App initialized successfully');\n\n        } catch (error) {\n            console.error('Error initializing app:', error);\n            this.showErrorScreen(error.message);\n        }\n    }\n\n    async initDatabase() {\n        try {\n            await db.init();\n            this.db = db;\n            console.log('Database initialized successfully');\n            \n            // Generate sample data if this is the first run\n            await sampleDataGenerator.generateSampleData();\n            \n            // Debug analytics if needed\n            console.log('Running analytics debug check...');\n            setTimeout(() => {\n                if (window.debugAnalytics) {\n                    window.debugAnalytics();\n                }\n            }, 1000);\n        } catch (error) {\n            console.error('Database initialization failed:', error);\n            throw new Error('Failed to initialize database. Please refresh the page.');\n        }\n    }\n\n    async registerServiceWorker() {\n        if ('serviceWorker' in navigator) {\n            try {\n                const registration = await navigator.serviceWorker.register('/sw.js');\n                console.log('Service Worker registered successfully:', registration);\n                \n                // Listen for updates\n                registration.addEventListener('updatefound', () => {\n                    const newWorker = registration.installing;\n                    newWorker.addEventListener('statechange', () => {\n                        if (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n                            this.showUpdateNotification();\n                        }\n                    });\n                });\n            } catch (error) {\n                console.warn('Service Worker registration failed:', error);\n                // Continue without service worker\n            }\n        }\n    }\n\n    initializeComponents() {\n        // Router is already initialized in router.js\n        // Additional app-level initialization can go here\n        \n        // Set up global error handling\n        window.addEventListener('error', (e) => {\n            console.error('Global error:', e.error);\n            this.showToast('An unexpected error occurred. Please refresh the page if problems persist.', 'error');\n        });\n\n        // Set up unhandled promise rejection handling\n        window.addEventListener('unhandledrejection', (e) => {\n            console.error('Unhandled promise rejection:', e.reason);\n            this.showToast('An unexpected error occurred. Please refresh the page if problems persist.', 'error');\n            e.preventDefault();\n        });\n\n        // Initialize app settings\n        this.initializeSettings();\n\n        // Set up periodic data backup\n        this.setupPeriodicBackup();\n    }\n\n    initializeSettings() {\n        const defaultSettings = {\n            defaultEggWeight: 60,\n            currency: 'GHS',\n            enableNotifications: true,\n            theme: 'light',\n            language: 'en'\n        };\n\n        const savedSettings = localStorage.getItem('poultrySettings');\n        if (!savedSettings) {\n            localStorage.setItem('poultrySettings', JSON.stringify(defaultSettings));\n        }\n    }\n\n    restoreAppStructure() {\n        // Restore the original HTML structure after login\n        document.body.innerHTML = `\n            <!-- Navigation -->\n            <nav class=\"navbar navbar-expand-lg navbar-dark bg-primary fixed-top\">\n                <div class=\"container\">\n                    <a class=\"navbar-brand\" href=\"#\">\n                        <i class=\"fas fa-egg me-2\"></i>Poultry Manager\n                    </a>\n                    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\">\n                        <span class=\"navbar-toggler-icon\"></span>\n                    </button>\n                    <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                        <ul class=\"navbar-nav ms-auto\">\n                            <li class=\"nav-item\">\n                                <a class=\"nav-link\" href=\"#\" data-route=\"cycles\">\n                                    <i class=\"fas fa-layer-group me-1\"></i>Cycles\n                                </a>\n                            </li>\n                            <li class=\"nav-item\">\n                                <a class=\"nav-link\" href=\"#\" data-route=\"analytics\">\n                                    <i class=\"fas fa-chart-line me-1\"></i>Analytics\n                                </a>\n                            </li>\n                            <li class=\"nav-item\">\n                                <a class=\"nav-link\" href=\"#\" data-route=\"data-manager\">\n                                    <i class=\"fas fa-exchange-alt me-1\"></i>Import/Export\n                                </a>\n                            </li>\n                            <li class=\"nav-item\">\n                                <a class=\"nav-link\" href=\"#\" data-route=\"settings\">\n                                    <i class=\"fas fa-cog me-1\"></i>Settings\n                                </a>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n            </nav>\n\n            <!-- Main Content -->\n            <main class=\"main-content\">\n                <div class=\"container mt-4\">\n                    <!-- Loading Spinner -->\n                    <div id=\"loading\" class=\"text-center d-none\">\n                        <div class=\"spinner-border text-primary\" role=\"status\">\n                            <span class=\"visually-hidden\">Loading...</span>\n                        </div>\n                    </div>\n\n                    <!-- App Content -->\n                    <div id=\"app-content\"></div>\n                </div>\n            </main>\n\n            <!-- Bottom Navigation for Mobile -->\n            <nav class=\"navbar navbar-dark bg-primary fixed-bottom d-sm-none\">\n                <div class=\"container-fluid\">\n                    <div class=\"row w-100 text-center\">\n                        <div class=\"col-4\">\n                            <a class=\"nav-link text-white\" href=\"#\" data-route=\"cycles\">\n                                <i class=\"fas fa-layer-group\"></i>\n                                <small class=\"d-block\">Cycles</small>\n                            </a>\n                        </div>\n                        <div class=\"col-4\">\n                            <a class=\"nav-link text-white\" href=\"#\" data-route=\"analytics\">\n                                <i class=\"fas fa-chart-line\"></i>\n                                <small class=\"d-block\">Analytics</small>\n                            </a>\n                        </div>\n                        <div class=\"col-4\">\n                            <a class=\"nav-link text-white\" href=\"#\" data-route=\"settings\">\n                                <i class=\"fas fa-cog\"></i>\n                                <small class=\"d-block\">Settings</small>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n            </nav>\n\n            <!-- Modals -->\n            <div id=\"modal-container\"></div>\n\n            <!-- Toast Container -->\n            <div class=\"toast-container position-fixed bottom-0 end-0 p-3\">\n                <div id=\"toast\" class=\"toast\" role=\"alert\">\n                    <div class=\"toast-header\">\n                        <i class=\"fas fa-info-circle text-primary me-2\"></i>\n                        <strong class=\"me-auto\">Notification</strong>\n                        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"toast\"></button>\n                    </div>\n                    <div class=\"toast-body\"></div>\n                </div>\n            </div>\n        `;\n    }\n\n    setupPeriodicBackup() {\n        // Create backup every 24 hours\n        setInterval(() => {\n            this.createAutoBackup();\n        }, 24 * 60 * 60 * 1000);\n\n        // Create backup on app start if last backup is older than 7 days\n        const lastBackup = localStorage.getItem('lastAutoBackup');\n        if (!lastBackup || (Date.now() - parseInt(lastBackup)) > 7 * 24 * 60 * 60 * 1000) {\n            setTimeout(() => this.createAutoBackup(), 5000);\n        }\n    }\n\n    async createAutoBackup() {\n        try {\n            const cycles = await db.getAll('cycles');\n            const cages = await db.getAll('cages');\n            const productionLogs = await db.getAll('productionLogs');\n            const feedLogs = await db.getAll('feedLogs');\n\n            const backupData = {\n                cycles,\n                cages,\n                productionLogs,\n                feedLogs,\n                backupDate: new Date().toISOString(),\n                version: '1.0'\n            };\n\n            // Store in localStorage (with size limit)\n            const backupJson = JSON.stringify(backupData);\n            if (backupJson.length < 5000000) { // 5MB limit\n                localStorage.setItem('autoBackup', backupJson);\n                localStorage.setItem('lastAutoBackup', Date.now().toString());\n                console.log('Auto backup created successfully');\n            }\n        } catch (error) {\n            console.warn('Auto backup failed:', error);\n        }\n    }\n\n    showLoadingScreen() {\n        const loadingHtml = `\n            <div class=\"loading-overlay\" id=\"app-loading\">\n                <div class=\"text-center\">\n                    <div class=\"spinner-border text-primary mb-3\" role=\"status\">\n                        <span class=\"visually-hidden\">Loading...</span>\n                    </div>\n                    <h5>Loading Poultry Manager</h5>\n                    <p class=\"text-muted\">Initializing database and components...</p>\n                </div>\n            </div>\n        `;\n        \n        document.body.insertAdjacentHTML('beforeend', loadingHtml);\n    }\n\n    hideLoadingScreen() {\n        const loading = document.getElementById('app-loading');\n        if (loading) {\n            loading.remove();\n        }\n    }\n\n    showErrorScreen(message) {\n        const errorHtml = `\n            <div class=\"loading-overlay\" id=\"app-error\">\n                <div class=\"text-center\">\n                    <i class=\"fas fa-exclamation-triangle text-danger mb-3\" style=\"font-size: 3rem;\"></i>\n                    <h4>Application Error</h4>\n                    <p class=\"text-muted mb-4\">${message}</p>\n                    <button class=\"btn btn-primary\" onclick=\"location.reload()\">\n                        <i class=\"fas fa-sync-alt me-2\"></i>Reload Application\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        document.body.insertAdjacentHTML('beforeend', errorHtml);\n    }\n\n    showUpdateNotification() {\n        const notification = `\n            <div class=\"alert alert-info alert-dismissible position-fixed top-0 end-0 m-3\" style=\"z-index: 9999;\">\n                <i class=\"fas fa-info-circle me-2\"></i>\n                <strong>Update Available!</strong> A new version is ready.\n                <button type=\"button\" class=\"btn btn-sm btn-outline-primary ms-2\" onclick=\"location.reload()\">\n                    Update Now\n                </button>\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n            </div>\n        `;\n        \n        document.body.insertAdjacentHTML('beforeend', notification);\n    }\n\n    showToast(message, type = 'info') {\n        const toast = document.getElementById('toast');\n        if (!toast) return;\n        \n        const toastBody = toast.querySelector('.toast-body');\n        toastBody.textContent = message;\n        \n        const icon = toast.querySelector('.fas');\n        icon.className = type === 'success' ? 'fas fa-check-circle text-success me-2' : \n                        type === 'error' ? 'fas fa-exclamation-circle text-danger me-2' : \n                        type === 'warning' ? 'fas fa-exclamation-triangle text-warning me-2' :\n                        'fas fa-info-circle text-primary me-2';\n        \n        const bsToast = new bootstrap.Toast(toast);\n        bsToast.show();\n    }\n\n    // Utility methods\n    formatDate(date) {\n        const d = new Date(date);\n        const day = String(d.getDate()).padStart(2, '0');\n        const month = String(d.getMonth() + 1).padStart(2, '0');\n        const year = d.getFullYear();\n        return `${day}/${month}/${year}`;\n    }\n\n    formatDateTime(date) {\n        return new Date(date).toLocaleString();\n    }\n\n    formatCurrency(amount, currency = null) {\n        // Get user's preferred currency from settings, default to GHS\n        if (!currency) {\n            const settings = JSON.parse(localStorage.getItem('poultrySettings') || '{}');\n            currency = settings.currency || 'GHS';\n        }\n        \n        // Currency symbol mapping\n        const currencySymbols = {\n            'GHS': '₵',\n            'USD': '$',\n            'GBP': '£'\n        };\n        \n        // Use simple format with currency symbol for better compatibility\n        const symbol = currencySymbols[currency] || currency;\n        return `${symbol}${amount.toFixed(2)}`;\n    }\n\n    formatNumber(number, decimals = 0) {\n        return new Intl.NumberFormat('en-US', {\n            minimumFractionDigits: decimals,\n            maximumFractionDigits: decimals\n        }).format(number);\n    }\n\n    debounce(func, wait) {\n        let timeout;\n        return function executedFunction(...args) {\n            const later = () => {\n                clearTimeout(timeout);\n                func(...args);\n            };\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n        };\n    }\n\n    throttle(func, limit) {\n        let inThrottle;\n        return function() {\n            const args = arguments;\n            const context = this;\n            if (!inThrottle) {\n                func.apply(context, args);\n                inThrottle = true;\n                setTimeout(() => inThrottle = false, limit);\n            }\n        };\n    }\n\n    // Data validation methods\n    validateEmail(email) {\n        const regex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return regex.test(email);\n    }\n\n    validateNumber(value, min = null, max = null) {\n        const num = parseFloat(value);\n        if (isNaN(num)) return false;\n        if (min !== null && num < min) return false;\n        if (max !== null && num > max) return false;\n        return true;\n    }\n\n    validateDate(dateString) {\n        const date = new Date(dateString);\n        return date instanceof Date && !isNaN(date);\n    }\n\n    // Performance monitoring\n    startPerformanceTimer(label) {\n        console.time(label);\n    }\n\n    endPerformanceTimer(label) {\n        console.timeEnd(label);\n    }\n\n    // Memory management\n    cleanup() {\n        // Clean up any event listeners, timers, etc.\n        if (this.backupInterval) {\n            clearInterval(this.backupInterval);\n        }\n        \n        // Destroy charts\n        if (window.chartManager) {\n            chartManager.destroyAllCharts();\n        }\n    }\n}\n\n// Global app instance\nconst app = new PoultryApp();\n\n// Initialize app when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n    app.init();\n});\n\n// Cleanup on page unload\nwindow.addEventListener('beforeunload', () => {\n    app.cleanup();\n});\n\n// Handle app installation prompt\nlet deferredPrompt;\nwindow.addEventListener('beforeinstallprompt', (e) => {\n    e.preventDefault();\n    deferredPrompt = e;\n    \n    // Show install button or banner\n    const installBanner = document.createElement('div');\n    installBanner.className = 'alert alert-info alert-dismissible position-fixed bottom-0 end-0 m-3';\n    installBanner.style.zIndex = '9999';\n    installBanner.innerHTML = `\n        <i class=\"fas fa-mobile-alt me-2\"></i>\n        <strong>Install App:</strong> Add to your home screen for a better experience.\n        <button type=\"button\" class=\"btn btn-sm btn-outline-primary ms-2\" onclick=\"installApp()\">\n            Install\n        </button>\n        <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n    `;\n    \n    document.body.appendChild(installBanner);\n});\n\nasync function installApp() {\n    if (deferredPrompt) {\n        deferredPrompt.prompt();\n        const result = await deferredPrompt.userChoice;\n        console.log('Install prompt result:', result);\n        deferredPrompt = null;\n        \n        // Remove install banner\n        const banner = document.querySelector('.alert');\n        if (banner) banner.remove();\n    }\n}\n\n// Export for global access\nwindow.PoultryApp = PoultryApp;\nwindow.app = app;","size_bytes":17743},"js/db.js":{"content":"class Database {\n    constructor() {\n        this.dbName = 'PoultryManagementDB';\n        this.version = 4;\n        this.db = null;\n    }\n\n    async init() {\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.dbName, this.version);\n\n            request.onerror = () => {\n                console.error('Database failed to open');\n                reject(request.error);\n            };\n\n            request.onsuccess = () => {\n                this.db = request.result;\n                console.log('Database opened successfully');\n                resolve(this.db);\n            };\n\n            request.onupgradeneeded = (e) => {\n                this.db = e.target.result;\n                console.log('Database upgrade needed');\n\n                // Create cycles object store\n                if (!this.db.objectStoreNames.contains('cycles')) {\n                    const cycleStore = this.db.createObjectStore('cycles', {\n                        keyPath: 'id',\n                        autoIncrement: true\n                    });\n                    cycleStore.createIndex('name', 'name', { unique: false });\n                    cycleStore.createIndex('status', 'status', { unique: false });\n                    cycleStore.createIndex('startDate', 'startDate', { unique: false });\n                }\n\n                // Create cages object store\n                if (!this.db.objectStoreNames.contains('cages')) {\n                    const cageStore = this.db.createObjectStore('cages', {\n                        keyPath: 'id',\n                        autoIncrement: true\n                    });\n                    cageStore.createIndex('cycleId', 'cycleId', { unique: false });\n                    cageStore.createIndex('name', 'name', { unique: false });\n                }\n\n                // Create production logs object store\n                if (!this.db.objectStoreNames.contains('productionLogs')) {\n                    const prodStore = this.db.createObjectStore('productionLogs', {\n                        keyPath: 'id',\n                        autoIncrement: true\n                    });\n                    prodStore.createIndex('cageId', 'cageId', { unique: false });\n                    prodStore.createIndex('date', 'date', { unique: false });\n                    prodStore.createIndex('cycleId', 'cycleId', { unique: false });\n                }\n\n                // Create sales object store\n                if (!this.db.objectStoreNames.contains('sales')) {\n                    const salesStore = this.db.createObjectStore('sales', {\n                        keyPath: 'id',\n                        autoIncrement: true\n                    });\n                    salesStore.createIndex('cycleId', 'cycleId', { unique: false });\n                    salesStore.createIndex('date', 'date', { unique: false });\n                }\n\n                // Create expenses object store\n                if (!this.db.objectStoreNames.contains('expenses')) {\n                    const expenseStore = this.db.createObjectStore('expenses', {\n                        keyPath: 'id',\n                        autoIncrement: true\n                    });\n                    expenseStore.createIndex('cycleId', 'cycleId', { unique: false });\n                    expenseStore.createIndex('date', 'date', { unique: false });\n                    expenseStore.createIndex('category', 'category', { unique: false });\n                }\n\n                // Create vaccination records object store\n                if (!this.db.objectStoreNames.contains('vaccinations')) {\n                    const vaccinationStore = this.db.createObjectStore('vaccinations', {\n                        keyPath: 'id',\n                        autoIncrement: true\n                    });\n                    vaccinationStore.createIndex('cycleId', 'cycleId', { unique: false });\n                    vaccinationStore.createIndex('date', 'date', { unique: false });\n                }\n\n                // Create feed logs object store\n                if (!this.db.objectStoreNames.contains('feedLogs')) {\n                    const feedStore = this.db.createObjectStore('feedLogs', {\n                        keyPath: 'id',\n                        autoIncrement: true\n                    });\n                    feedStore.createIndex('cageId', 'cageId', { unique: false });\n                    feedStore.createIndex('date', 'date', { unique: false });\n                    feedStore.createIndex('cycleId', 'cycleId', { unique: false });\n                }\n            };\n        });\n    }\n\n    async add(storeName, data) {\n        return new Promise((resolve, reject) => {\n            const transaction = this.db.transaction([storeName], 'readwrite');\n            const store = transaction.objectStore(storeName);\n            const request = store.add(data);\n\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    async update(storeName, data) {\n        return new Promise((resolve, reject) => {\n            const transaction = this.db.transaction([storeName], 'readwrite');\n            const store = transaction.objectStore(storeName);\n            const request = store.put(data);\n\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    async delete(storeName, id) {\n        return new Promise((resolve, reject) => {\n            const transaction = this.db.transaction([storeName], 'readwrite');\n            const store = transaction.objectStore(storeName);\n            const request = store.delete(id);\n\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    async get(storeName, id) {\n        return new Promise((resolve, reject) => {\n            const transaction = this.db.transaction([storeName], 'readonly');\n            const store = transaction.objectStore(storeName);\n            const request = store.get(id);\n\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    async getAll(storeName) {\n        return new Promise((resolve, reject) => {\n            const transaction = this.db.transaction([storeName], 'readonly');\n            const store = transaction.objectStore(storeName);\n            const request = store.getAll();\n\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    async getByIndex(storeName, indexName, value) {\n        return new Promise((resolve, reject) => {\n            const transaction = this.db.transaction([storeName], 'readonly');\n            const store = transaction.objectStore(storeName);\n            const index = store.index(indexName);\n            const request = index.getAll(value);\n\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    async clear(storeName) {\n        return new Promise((resolve, reject) => {\n            const transaction = this.db.transaction([storeName], 'readwrite');\n            const store = transaction.objectStore(storeName);\n            const request = store.clear();\n\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    async count(storeName) {\n        return new Promise((resolve, reject) => {\n            const transaction = this.db.transaction([storeName], 'readonly');\n            const store = transaction.objectStore(storeName);\n            const request = store.count();\n\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    async getByDateRange(storeName, startDate, endDate, indexName = 'date') {\n        return new Promise((resolve, reject) => {\n            const transaction = this.db.transaction([storeName], 'readonly');\n            const store = transaction.objectStore(storeName);\n            const index = store.index(indexName);\n            const range = IDBKeyRange.bound(startDate, endDate);\n            const request = index.getAll(range);\n\n            request.onsuccess = () => resolve(request.result);\n            request.onerror = () => reject(request.error);\n        });\n    }\n\n    // Feed logs methods\n    async addFeedLog(feedLog) {\n        return this.add('feedLogs', feedLog);\n    }\n\n    async getFeedLogs(cycleId = null) {\n        if (cycleId) {\n            return this.getByIndex('feedLogs', 'cycleId', cycleId);\n        }\n        return this.getAll('feedLogs');\n    }\n\n    async updateFeedLog(feedLog) {\n        return this.update('feedLogs', feedLog);\n    }\n\n    async deleteFeedLog(id) {\n        return this.delete('feedLogs', id);\n    }\n\n    // Sales methods\n    async addSale(sale) {\n        return this.add('sales', sale);\n    }\n\n    async getSales(cycleId = null) {\n        if (cycleId) {\n            return this.getByIndex('sales', 'cycleId', cycleId);\n        }\n        return this.getAll('sales');\n    }\n\n    // Expense methods\n    async addExpense(expense) {\n        return this.add('expenses', expense);\n    }\n\n    async getExpenses(cycleId = null) {\n        if (cycleId) {\n            return this.getByIndex('expenses', 'cycleId', cycleId);\n        }\n        return this.getAll('expenses');\n    }\n\n    // Production log methods\n    async addProductionLog(log) {\n        return this.add('productionLogs', log);\n    }\n\n    async getProductionLogs(cycleId = null) {\n        if (cycleId) {\n            return this.getByIndex('productionLogs', 'cycleId', cycleId);\n        }\n        return this.getAll('productionLogs');\n    }\n\n    // Convenience methods for CSV handler\n    async getAllCycles() {\n        return this.getAll('cycles');\n    }\n\n    async getAllCages() {\n        return this.getAll('cages');\n    }\n}\n\n// Global database instance\nconst db = new Database();","size_bytes":10104},"js/debug-analytics.js":{"content":"// Debug script to help identify analytics issues\nclass AnalyticsDebugger {\n    static async debugAnalytics() {\n        console.log('=== Analytics Debug Information ===');\n        \n        try {\n            // Check if database is initialized\n            console.log('1. Checking database initialization...');\n            if (!db) {\n                console.error('Database object not found');\n                return;\n            }\n            \n            if (!db.db) {\n                console.error('Database connection not established');\n                return;\n            }\n            \n            console.log('✓ Database initialized successfully');\n            \n            // Check object stores\n            console.log('2. Checking object stores...');\n            const storeNames = Array.from(db.db.objectStoreNames);\n            console.log('Available stores:', storeNames);\n            \n            const requiredStores = ['cycles', 'cages', 'productionLogs', 'feedLogs', 'sales', 'expenses'];\n            const missingStores = requiredStores.filter(store => !storeNames.includes(store));\n            \n            if (missingStores.length > 0) {\n                console.error('Missing required stores:', missingStores);\n                return;\n            }\n            \n            console.log('✓ All required stores present');\n            \n            // Check data availability\n            console.log('3. Checking data availability...');\n            for (const storeName of requiredStores) {\n                try {\n                    const data = await db.getAll(storeName);\n                    console.log(`${storeName}: ${data.length} records`);\n                } catch (error) {\n                    console.error(`Error accessing ${storeName}:`, error);\n                }\n            }\n            \n            // Try to initialize analytics\n            console.log('4. Testing analytics initialization...');\n            const testAnalytics = new Analytics();\n            await testAnalytics.init();\n            \n            console.log('✓ Analytics initialized successfully');\n            \n        } catch (error) {\n            console.error('Analytics debug error:', error);\n            console.error('Stack trace:', error.stack);\n        }\n    }\n    \n    static async clearDatabase() {\n        console.log('Clearing database for fresh start...');\n        try {\n            if (db && db.db) {\n                db.db.close();\n            }\n            \n            // Delete the database\n            const deleteRequest = indexedDB.deleteDatabase('PoultryManagementDB');\n            \n            deleteRequest.onsuccess = () => {\n                console.log('Database cleared successfully');\n                console.log('Please refresh the page to reinitialize with fresh data');\n            };\n            \n            deleteRequest.onerror = (error) => {\n                console.error('Error clearing database:', error);\n            };\n            \n        } catch (error) {\n            console.error('Error clearing database:', error);\n        }\n    }\n}\n\n// Make debug functions available globally\nwindow.debugAnalytics = AnalyticsDebugger.debugAnalytics;\nwindow.clearDatabase = AnalyticsDebugger.clearDatabase;","size_bytes":3238},"js/router.js":{"content":"class Router {\n    constructor() {\n        this.routes = {\n            'cycles': {\n                component: 'cycleOverview',\n                title: 'Production Cycles'\n            },\n            'cage-manager': {\n                component: 'cageManager',\n                title: 'Cage Management',\n                requiresParam: 'cycleId'\n            },\n            'cage-detail': {\n                component: 'cageDetail',\n                title: 'Cage Details',\n                requiresParam: 'id'\n            },\n            'cycle-feed': {\n                component: 'cycleFeedManager',\n                title: 'Cycle Feed & Birds',\n                requiresParam: 'cycleId'\n            },\n            'analytics': {\n                component: 'analytics',\n                title: 'Analytics Dashboard'\n            },\n            'sales': {\n                component: 'salesManager',\n                title: 'Sales Management',\n                requiresParam: 'cycleId'\n            },\n            'expenses': {\n                component: 'expenseManager',\n                title: 'Expense Management',\n                requiresParam: 'cycleId'\n            },\n            'vaccinations': {\n                component: 'vaccinationManager',\n                title: 'Vaccination Records',\n                requiresParam: 'cycleId'\n            },\n            'data-manager': {\n                component: 'dataManager',\n                title: 'Import/Export Data'\n            },\n            'settings': {\n                component: 'settings',\n                title: 'Settings'\n            }\n        };\n        \n        this.currentRoute = null;\n        this.currentParams = {};\n        \n        this.init();\n    }\n\n    init() {\n        // Handle navigation clicks\n        document.addEventListener('click', (e) => {\n            const routeElement = e.target.closest('[data-route]');\n            if (routeElement) {\n                e.preventDefault();\n                const route = routeElement.dataset.route;\n                this.navigate(route);\n            }\n        });\n\n        // Handle browser back/forward\n        window.addEventListener('popstate', (e) => {\n            this.handlePopState(e);\n        });\n\n        // Load initial route\n        this.loadInitialRoute();\n    }\n\n    loadInitialRoute() {\n        const hash = window.location.hash.slice(1);\n        if (hash) {\n            const [route, paramsString] = hash.split('?');\n            const params = this.parseParams(paramsString);\n            this.navigate(route, params, false);\n        } else {\n            this.navigate('cycles', {}, false);\n        }\n    }\n\n    async navigate(route, params = {}, updateHistory = true) {\n        const routeConfig = this.routes[route];\n        \n        if (!routeConfig) {\n            console.error(`Route '${route}' not found`);\n            this.navigate('cycles', {}, updateHistory);\n            return;\n        }\n\n        // Check if required parameters are provided\n        if (routeConfig.requiresParam && !params[routeConfig.requiresParam]) {\n            console.error(`Route '${route}' requires parameter '${routeConfig.requiresParam}'`);\n            this.navigate('cycles', {}, updateHistory);\n            return;\n        }\n\n        this.currentRoute = route;\n        this.currentParams = params;\n\n        // Update URL\n        if (updateHistory) {\n            const url = this.buildUrl(route, params);\n            history.pushState({ route, params }, routeConfig.title, url);\n        }\n\n        // Update page title\n        document.title = `${routeConfig.title} - Poultry Manager`;\n\n        // Update active navigation links\n        this.updateActiveNav(route);\n\n        // Load the component\n        await this.loadComponent(routeConfig.component, params);\n    }\n\n    buildUrl(route, params) {\n        let url = `#${route}`;\n        const paramString = this.buildParamString(params);\n        if (paramString) {\n            url += `?${paramString}`;\n        }\n        return url;\n    }\n\n    buildParamString(params) {\n        const paramPairs = Object.entries(params).map(([key, value]) => \n            `${encodeURIComponent(key)}=${encodeURIComponent(value)}`\n        );\n        return paramPairs.join('&');\n    }\n\n    parseParams(paramString) {\n        const params = {};\n        if (!paramString) return params;\n\n        paramString.split('&').forEach(pair => {\n            const [key, value] = pair.split('=');\n            if (key && value) {\n                params[decodeURIComponent(key)] = decodeURIComponent(value);\n            }\n        });\n\n        return params;\n    }\n\n    handlePopState(e) {\n        if (e.state) {\n            this.navigate(e.state.route, e.state.params, false);\n        } else {\n            this.loadInitialRoute();\n        }\n    }\n\n    updateActiveNav(route) {\n        // Remove active class from all nav links\n        document.querySelectorAll('.nav-link').forEach(link => {\n            link.classList.remove('active');\n        });\n\n        // Add active class to current route links\n        document.querySelectorAll(`[data-route=\"${route}\"]`).forEach(link => {\n            link.classList.add('active');\n        });\n    }\n\n    async loadComponent(componentName, params) {\n        // Show loading spinner\n        this.showLoading();\n\n        try {\n            switch (componentName) {\n                case 'cycleOverview':\n                    cycleOverview.init();\n                    break;\n                case 'cageManager':\n                    if (params.cycleId) {\n                        cageManager.init(parseInt(params.cycleId));\n                    } else {\n                        throw new Error('Cycle ID required for cage manager');\n                    }\n                    break;\n                case 'cageDetail':\n                    if (params.id) {\n                        cageDetail.init(parseInt(params.id));\n                    } else {\n                        throw new Error('Cage ID required for cage detail');\n                    }\n                    break;\n                case 'cycleFeedManager':\n                    if (params.cycleId) {\n                        cycleFeedManager.init(parseInt(params.cycleId));\n                    } else {\n                        throw new Error('Cycle ID required for cycle feed manager');\n                    }\n                    break;\n                case 'analytics':\n                    analytics.init(params.cycleId ? parseInt(params.cycleId) : null);\n                    break;\n                case 'salesManager':\n                    if (params.cycleId) {\n                        salesManager.init(parseInt(params.cycleId));\n                    } else {\n                        throw new Error('Cycle ID required for sales manager');\n                    }\n                    break;\n                case 'expenseManager':\n                    if (params.cycleId) {\n                        expenseManager.init(parseInt(params.cycleId));\n                    } else {\n                        throw new Error('Cycle ID required for expense manager');\n                    }\n                    break;\n                case 'vaccinationManager':\n                    if (params.cycleId) {\n                        await vaccinationManager.init(parseInt(params.cycleId));\n                    } else {\n                        // Redirect to cycles page if no cycle ID provided\n                        console.warn('No cycle ID provided for vaccination manager, redirecting to cycles');\n                        this.navigate('cycles', {}, true);\n                        return;\n                    }\n                    break;\n                case 'dataManager':\n                    if (!dataManager.db) {\n                        await dataManager.init(db);\n                    }\n                    const content = document.getElementById('app-content');\n                    content.innerHTML = dataManager.render();\n                    dataManager.loadCycleOptions();\n                    break;\n                case 'settings':\n                    settings.init();\n                    break;\n                default:\n                    throw new Error(`Component '${componentName}' not found`);\n            }\n        } catch (error) {\n            console.error('Error loading component:', error);\n            this.showError(error.message);\n        } finally {\n            // Hide loading spinner\n            this.hideLoading();\n        }\n    }\n\n\n\n    loadSettingsValues() {\n        // Load saved settings from localStorage\n        const settings = JSON.parse(localStorage.getItem('poultrySettings') || '{}');\n        \n        if (settings.defaultEggWeight) {\n            document.getElementById('defaultEggWeight').value = settings.defaultEggWeight;\n        }\n        // Set currency with GHS as default\n        document.getElementById('currency').value = settings.currency || 'GHS';\n        \n        if (settings.enableNotifications !== undefined) {\n            document.getElementById('enableNotifications').checked = settings.enableNotifications;\n        }\n    }\n\n    saveSettings() {\n        const settings = {\n            defaultEggWeight: parseFloat(document.getElementById('defaultEggWeight').value),\n            currency: document.getElementById('currency').value,\n            enableNotifications: document.getElementById('enableNotifications').checked,\n            updatedAt: new Date().toISOString()\n        };\n\n        localStorage.setItem('poultrySettings', JSON.stringify(settings));\n        this.showToast('Settings saved successfully!', 'success');\n    }\n\n    async exportAllData() {\n        try {\n            const cycles = await db.getAll('cycles');\n            const cages = await db.getAll('cages');\n            const productionLogs = await db.getAll('productionLogs');\n            const feedLogs = await db.getAll('feedLogs');\n            const sales = await db.getAll('sales');\n            const expenses = await db.getAll('expenses');\n            const vaccinations = await db.getAll('vaccinations');\n\n            // Create a comprehensive CSV with all production data\n            const allData = [];\n            \n            // Add production logs with related data\n            for (const log of productionLogs) {\n                const cycle = cycles.find(c => c.id === log.cycleId);\n                const cage = cages.find(c => c.id === log.cageId);\n                \n                allData.push({\n                    Type: 'Production',\n                    Date: log.date,\n                    Cycle: cycle ? cycle.name : 'Unknown',\n                    Cage: cage ? cage.name : 'Unknown',\n                    'Flock Age (Days)': log.flockAge || '',\n                    'Opening Birds': log.openingBirds || '',\n                    'Mortality': log.mortality || 0,\n                    'Birds Sold': log.birdsSold || 0,\n                    'Closing Birds': log.closingBirds || '',\n                    'Eggs Collected': log.eggsCollected || 0,\n                    'Production Rate (%)': log.productionRate || '',\n                    'Cumulative Production': log.cumulativeProduction || '',\n                    'Current Feed (kg)': log.currentFeed || '',\n                    'Feed per Bird (kg)': log.feedPerBird || '',\n                    'Feed per Egg (g)': log.feedPerEgg || '',\n                    'Hen House Production': log.henHouseProduction || '',\n                    'Cumulative Mortality': log.cumulativeMortality || '',\n                    'Mortality Rate (%)': log.mortalityRate || '',\n                    'Notes': log.notes || ''\n                });\n            }\n            \n            // Add sales data\n            for (const sale of sales) {\n                const cycle = cycles.find(c => c.id === sale.cycleId);\n                \n                allData.push({\n                    Type: 'Sale',\n                    Date: sale.date,\n                    Cycle: cycle ? cycle.name : 'Unknown',\n                    'Customer': sale.customer || '',\n                    'Crates Sold': sale.crates || '',\n                    'Price per Crate (₵)': sale.pricePerCrate || '',\n                    'Total Amount (₵)': sale.amount || '',\n                    'Payment Method': sale.paymentMethod || '',\n                    'Notes': sale.notes || ''\n                });\n            }\n            \n            // Add expenses data\n            for (const expense of expenses) {\n                const cycle = cycles.find(c => c.id === expense.cycleId);\n                \n                allData.push({\n                    Type: 'Expense',\n                    Date: expense.date,\n                    Cycle: cycle ? cycle.name : 'Unknown',\n                    'Category': expense.category || '',\n                    'Description': expense.description || '',\n                    'Amount (₵)': expense.amount || '',\n                    'Vendor': expense.vendor || '',\n                    'Notes': expense.notes || ''\n                });\n            }\n\n            this.downloadCsv(allData, 'poultry-management-complete-data');\n            this.showToast('All data exported as CSV successfully!', 'success');\n        } catch (error) {\n            console.error('Error exporting data:', error);\n            this.showToast('Error exporting data. Please try again.', 'error');\n        }\n    }\n\n    async exportCycles() {\n        try {\n            const cycles = await db.getAll('cycles');\n            const cages = await db.getAll('cages');\n            const productionLogs = await db.getAll('productionLogs');\n            const sales = await db.getAll('sales');\n            const expenses = await db.getAll('expenses');\n            \n            // Create cycle summary data\n            const cycleData = cycles.map(cycle => {\n                const cycleCages = cages.filter(c => c.cycleId === cycle.id);\n                const cycleLogs = productionLogs.filter(l => l.cycleId === cycle.id);\n                const cycleSales = sales.filter(s => s.cycleId === cycle.id);\n                const cycleExpenses = expenses.filter(e => e.cycleId === cycle.id);\n                \n                const totalEggs = cycleLogs.reduce((sum, log) => sum + (log.eggsCollected || 0), 0);\n                const totalRevenue = cycleSales.reduce((sum, sale) => sum + (sale.amount || 0), 0);\n                const totalExpenses = cycleExpenses.reduce((sum, expense) => sum + (expense.amount || 0), 0);\n                const profit = totalRevenue - totalExpenses;\n                \n                return {\n                    'Cycle Name': cycle.name,\n                    'Start Date': cycle.startDate,\n                    'End Date': cycle.endDate || 'Active',\n                    'Status': cycle.status,\n                    'Total Birds': cycle.birdCount,\n                    'Number of Cages': cycleCages.length,\n                    'Total Eggs Produced': totalEggs,\n                    'Total Revenue (₵)': totalRevenue.toFixed(2),\n                    'Total Expenses (₵)': totalExpenses.toFixed(2),\n                    'Profit (₵)': profit.toFixed(2),\n                    'ROI (%)': totalExpenses > 0 ? ((profit / totalExpenses) * 100).toFixed(1) : '0',\n                    'Notes': cycle.notes || ''\n                };\n            });\n            \n            this.downloadCsv(cycleData, 'poultry-cycles-summary');\n            this.showToast('Cycles exported as CSV successfully!', 'success');\n        } catch (error) {\n            console.error('Error exporting cycles:', error);\n            this.showToast('Error exporting cycles. Please try again.', 'error');\n        }\n    }\n\n    async exportProductionData() {\n        try {\n            const cycles = await db.getAll('cycles');\n            const cages = await db.getAll('cages');\n            const productionLogs = await db.getAll('productionLogs');\n            \n            const productionData = productionLogs.map(log => {\n                const cycle = cycles.find(c => c.id === log.cycleId);\n                const cage = cages.find(c => c.id === log.cageId);\n                \n                return {\n                    'Date': log.date,\n                    'Cycle': cycle ? cycle.name : 'Unknown',\n                    'Cage': cage ? cage.name : 'Unknown',\n                    'Flock Age (Days)': log.flockAge || '',\n                    'Flock Age (Weeks)': log.flockAge ? Math.floor(log.flockAge / 7) : '',\n                    'Opening Birds': log.openingBirds || '',\n                    'Mortality': log.mortality || 0,\n                    'Birds Sold': log.birdsSold || 0,\n                    'Closing Birds': log.closingBirds || '',\n                    'Eggs Collected': log.eggsCollected || 0,\n                    'Production Rate (%)': log.productionRate || '',\n                    'Cumulative Production': log.cumulativeProduction || '',\n                    'Current Feed (kg)': log.currentFeed || '',\n                    'Feed per Bird (kg)': log.feedPerBird || '',\n                    'Feed per Egg (g)': log.feedPerEgg || '',\n                    'Hen House Production': log.henHouseProduction || '',\n                    'Cumulative Mortality': log.cumulativeMortality || '',\n                    'Mortality Rate (%)': log.mortalityRate || '',\n                    'Notes': log.notes || ''\n                };\n            });\n            \n            this.downloadCsv(productionData, 'production-data');\n            this.showToast('Production data exported successfully!', 'success');\n        } catch (error) {\n            console.error('Error exporting production data:', error);\n            this.showToast('Error exporting production data. Please try again.', 'error');\n        }\n    }\n\n    async exportSalesData() {\n        try {\n            const cycles = await db.getAll('cycles');\n            const sales = await db.getAll('sales');\n            \n            const salesData = sales.map(sale => {\n                const cycle = cycles.find(c => c.id === sale.cycleId);\n                \n                return {\n                    'Date': sale.date,\n                    'Cycle': cycle ? cycle.name : 'Unknown',\n                    'Customer': sale.customer || '',\n                    'Crates Sold': sale.crates || '',\n                    'Price per Crate (₵)': sale.pricePerCrate || '',\n                    'Total Amount (₵)': sale.amount || '',\n                    'Payment Method': sale.paymentMethod || '',\n                    'Notes': sale.notes || ''\n                };\n            });\n            \n            this.downloadCsv(salesData, 'sales-data');\n            this.showToast('Sales data exported successfully!', 'success');\n        } catch (error) {\n            console.error('Error exporting sales data:', error);\n            this.showToast('Error exporting sales data. Please try again.', 'error');\n        }\n    }\n\n    async exportExpenseData() {\n        try {\n            const cycles = await db.getAll('cycles');\n            const expenses = await db.getAll('expenses');\n            \n            const expenseData = expenses.map(expense => {\n                const cycle = cycles.find(c => c.id === expense.cycleId);\n                \n                return {\n                    'Date': expense.date,\n                    'Cycle': cycle ? cycle.name : 'Unknown',\n                    'Category': expense.category || '',\n                    'Description': expense.description || '',\n                    'Amount (₵)': expense.amount || '',\n                    'Vendor': expense.vendor || '',\n                    'Notes': expense.notes || ''\n                };\n            });\n            \n            this.downloadCsv(expenseData, 'expense-data');\n            this.showToast('Expense data exported successfully!', 'success');\n        } catch (error) {\n            console.error('Error exporting expense data:', error);\n            this.showToast('Error exporting expense data. Please try again.', 'error');\n        }\n    }\n\n    downloadCsv(data, filename) {\n        if (!data || data.length === 0) {\n            this.showToast('No data to export.', 'warning');\n            return;\n        }\n        \n        // Get all unique keys from all objects\n        const allKeys = new Set();\n        data.forEach(item => {\n            Object.keys(item).forEach(key => allKeys.add(key));\n        });\n        \n        const headers = Array.from(allKeys);\n        \n        // Create CSV content\n        const csvContent = [\n            headers.join(','), // Header row\n            ...data.map(item => \n                headers.map(key => {\n                    const value = item[key] || '';\n                    // Escape commas and quotes in values\n                    return typeof value === 'string' && (value.includes(',') || value.includes('\"')) \n                        ? `\"${value.replace(/\"/g, '\"\"')}\"` \n                        : value;\n                }).join(',')\n            )\n        ].join('\\n');\n        \n        const dataBlob = new Blob([csvContent], {type: 'text/csv;charset=utf-8;'});\n        \n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(dataBlob);\n        link.download = `${filename}-${new Date().toISOString().split('T')[0]}.csv`;\n        link.click();\n    }\n\n    downloadJson(data, filename) {\n        const dataStr = JSON.stringify(data, null, 2);\n        const dataBlob = new Blob([dataStr], {type: 'application/json'});\n        \n        const link = document.createElement('a');\n        link.href = URL.createObjectURL(dataBlob);\n        link.download = `${filename}-${new Date().toISOString().split('T')[0]}.json`;\n        link.click();\n    }\n\n    importData() {\n        const fileInput = document.getElementById('importFile');\n        const file = fileInput.files[0];\n\n        if (!file) {\n            this.showToast('Please select a file to import.', 'warning');\n            return;\n        }\n\n        const reader = new FileReader();\n        reader.onload = async (e) => {\n            try {\n                const data = JSON.parse(e.target.result);\n                await this.processImportData(data);\n                this.showToast('Data imported successfully!', 'success');\n                fileInput.value = '';\n            } catch (error) {\n                console.error('Error importing data:', error);\n                this.showToast('Error importing data. Please check the file format.', 'error');\n            }\n        };\n\n        reader.readAsText(file);\n    }\n\n    async processImportData(data) {\n        // Validate data structure\n        if (data.cycles && Array.isArray(data.cycles)) {\n            for (const cycle of data.cycles) {\n                await db.add('cycles', cycle);\n            }\n        }\n\n        if (data.cages && Array.isArray(data.cages)) {\n            for (const cage of data.cages) {\n                await db.add('cages', cage);\n            }\n        }\n\n        if (data.productionLogs && Array.isArray(data.productionLogs)) {\n            for (const log of data.productionLogs) {\n                await db.add('productionLogs', log);\n            }\n        }\n\n        if (data.feedLogs && Array.isArray(data.feedLogs)) {\n            for (const log of data.feedLogs) {\n                await db.add('feedLogs', log);\n            }\n        }\n    }\n\n    async clearAllData() {\n        if (!confirm('Are you sure you want to clear all data? This action cannot be undone.')) {\n            return;\n        }\n\n        if (!confirm('This will permanently delete all cycles, cages, and production data. Are you absolutely sure?')) {\n            return;\n        }\n\n        try {\n            // Clear all object stores\n            await db.clear('cycles');\n            await db.clear('cages');\n            await db.clear('productionLogs');\n            await db.clear('feedLogs');\n            await db.clear('sales');\n            await db.clear('expenses');\n            await db.clear('vaccinations');\n            \n            // Clear any cached analytics data and force refresh\n            if (window.analytics && analytics.clearCache) {\n                analytics.clearCache();\n            }\n            \n            // Force analytics to reinitialize with empty data\n            if (window.analytics) {\n                analytics.init();\n            }\n            \n            // Clear localStorage settings if needed (keep user preferences but clear data cache)\n            localStorage.removeItem('analyticsCache');\n            localStorage.removeItem('lastBackup');\n            \n            this.showToast('All data cleared successfully!', 'success');\n            this.navigate('cycles');\n        } catch (error) {\n            console.error('Error clearing data:', error);\n            this.showToast('Error clearing data. Please try again.', 'error');\n        }\n    }\n\n    showLoading() {\n        const loading = document.getElementById('loading');\n        if (loading) {\n            loading.classList.remove('d-none');\n        }\n    }\n\n    hideLoading() {\n        const loading = document.getElementById('loading');\n        if (loading) {\n            loading.classList.add('d-none');\n        }\n    }\n\n    showError(message) {\n        const content = `\n            <div class=\"text-center mt-5\">\n                <i class=\"fas fa-exclamation-triangle text-warning\" style=\"font-size: 3rem;\"></i>\n                <h4 class=\"mt-3\">Error</h4>\n                <p class=\"text-muted\">${message}</p>\n                <button class=\"btn btn-primary\" onclick=\"router.navigate('cycles')\">\n                    <i class=\"fas fa-home me-2\"></i>Go Home\n                </button>\n            </div>\n        `;\n        const contentElement = document.getElementById('app-content');\n        if (contentElement) {\n            contentElement.innerHTML = content;\n        } else {\n            console.error('Content element not found, error:', message);\n        }\n    }\n\n    showToast(message, type = 'info') {\n        const toast = document.getElementById('toast');\n        const toastBody = toast.querySelector('.toast-body');\n        \n        toastBody.textContent = message;\n        \n        const icon = toast.querySelector('.fas');\n        icon.className = type === 'success' ? 'fas fa-check-circle text-success me-2' : \n                        type === 'error' ? 'fas fa-exclamation-circle text-danger me-2' : \n                        type === 'warning' ? 'fas fa-exclamation-triangle text-warning me-2' :\n                        'fas fa-info-circle text-primary me-2';\n        \n        const bsToast = new bootstrap.Toast(toast);\n        bsToast.show();\n    }\n\n    goBack() {\n        history.back();\n    }\n\n    refresh() {\n        this.loadComponent(this.routes[this.currentRoute].component, this.currentParams);\n    }\n}\n\n// Global router instance\nconst router = new Router();","size_bytes":26738},"js/sample-data.js":{"content":"// Sample Data Generator for Poultry Management PWA\nclass SampleDataGenerator {\n    constructor() {\n        this.currentDate = new Date();\n        this.cycleStartDate = new Date(this.currentDate.getFullYear(), this.currentDate.getMonth() - 3, 1);\n    }\n\n    async generateSampleData() {\n        try {\n            // Check if data already exists\n            const existingCycles = await db.getAll('cycles');\n            if (existingCycles.length > 0) {\n                console.log('Sample data already exists');\n                return;\n            }\n\n            console.log('Generating sample data...');\n            \n            // Generate cycles\n            const cycles = await this.generateCycles();\n            \n            // Generate cages for each cycle\n            const cages = await this.generateCages(cycles);\n            \n            // Generate production logs\n            await this.generateProductionLogs(cycles, cages);\n            \n            // Generate feed logs\n            await this.generateFeedLogs(cycles, cages);\n            \n            // Generate sales\n            await this.generateSales(cycles);\n            \n            // Generate expenses\n            await this.generateExpenses(cycles);\n            \n            // Generate vaccinations\n            await this.generateVaccinations(cycles);\n            \n            console.log('Sample data generated successfully!');\n            \n        } catch (error) {\n            console.error('Error generating sample data:', error);\n        }\n    }\n\n    async generateCycles() {\n        const cycles = [\n            {\n                id: Date.now(),\n                name: 'Batch 2024-A',\n                startDate: this.cycleStartDate.toISOString().split('T')[0],\n                endDate: null,\n                status: 'active',\n                notes: 'First batch of 2024 - Rhode Island Red breed',\n                createdAt: new Date().toISOString()\n            },\n            {\n                id: Date.now() + 1,\n                name: 'Batch 2024-B',\n                startDate: new Date(this.cycleStartDate.getTime() + 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n                endDate: null,\n                status: 'active',\n                notes: 'Second batch - Leghorn breed',\n                createdAt: new Date().toISOString()\n            }\n        ];\n\n        for (const cycle of cycles) {\n            await db.add('cycles', cycle);\n        }\n        \n        return cycles;\n    }\n\n    async generateCages(cycles) {\n        const cages = [];\n        \n        for (const cycle of cycles) {\n            const cageCount = 4; // 4 cages per cycle\n            \n            for (let i = 1; i <= cageCount; i++) {\n                const cage = {\n                    id: Date.now() + cycles.indexOf(cycle) * 10 + i,\n                    name: `Cage ${cycle.name.split('-')[1]}-${i}`,\n                    cycleId: cycle.id,\n                    capacity: 500,\n                    currentBirds: 480 - Math.floor(Math.random() * 20), // Some mortality\n                    breed: cycle.name.includes('2024-A') ? 'Rhode Island Red' : 'Leghorn',\n                    status: 'active',\n                    notes: `Cage ${i} for ${cycle.name}`,\n                    createdAt: new Date().toISOString()\n                };\n                \n                cages.push(cage);\n                await db.add('cages', cage);\n            }\n        }\n        \n        return cages;\n    }\n\n    async generateProductionLogs(cycles, cages) {\n        const today = new Date();\n        const daysToGenerate = 90; // Generate 3 months of data\n        \n        for (const cage of cages) {\n            const cycle = cycles.find(c => c.id === cage.cycleId);\n            const cycleStart = new Date(cycle.startDate);\n            \n            for (let day = 0; day < daysToGenerate; day++) {\n                const logDate = new Date(cycleStart.getTime() + day * 24 * 60 * 60 * 1000);\n                \n                if (logDate > today) break;\n                \n                const flockAge = Math.floor((logDate - cycleStart) / (24 * 60 * 60 * 1000)) + 1;\n                const baseProduction = this.calculateBaseProduction(flockAge, cage.currentBirds);\n                \n                // Add some random variation\n                const variation = (Math.random() - 0.5) * 0.2;\n                const eggsProduced = Math.max(0, Math.floor(baseProduction * (1 + variation)));\n                \n                const mortality = Math.random() < 0.02 ? Math.floor(Math.random() * 3) : 0;\n                \n                const productionLog = {\n                    id: Date.now() + cage.id * 1000 + day,\n                    cageId: cage.id,\n                    cycleId: cage.cycleId,\n                    date: logDate.toISOString().split('T')[0],\n                    flockAge: flockAge,\n                    openingBirds: cage.currentBirds,\n                    mortality: mortality,\n                    birdsSold: 0,\n                    eggsProduced: eggsProduced,\n                    eggsCollected: eggsProduced,\n                    currentFeed: this.calculateFeedConsumption(cage.currentBirds, flockAge),\n                    notes: day % 7 === 0 ? 'Weekly health check completed' : '',\n                    createdAt: logDate.toISOString()\n                };\n                \n                await db.add('productionLogs', productionLog);\n            }\n        }\n    }\n\n    async generateFeedLogs(cycles, cages) {\n        const today = new Date();\n        const daysToGenerate = 90;\n        \n        for (const cage of cages) {\n            const cycle = cycles.find(c => c.id === cage.cycleId);\n            const cycleStart = new Date(cycle.startDate);\n            \n            // Generate feed logs every 3 days\n            for (let day = 0; day < daysToGenerate; day += 3) {\n                const logDate = new Date(cycleStart.getTime() + day * 24 * 60 * 60 * 1000);\n                \n                if (logDate > today) break;\n                \n                const flockAge = Math.floor((logDate - cycleStart) / (24 * 60 * 60 * 1000)) + 1;\n                const feedAmount = this.calculateFeedConsumption(cage.currentBirds, flockAge) * 3; // 3 days worth\n                const feedCost = feedAmount * 2.5; // ₵2.5 per kg\n                \n                const feedLog = {\n                    id: Date.now() + cage.id * 2000 + day,\n                    cageId: cage.id,\n                    cycleId: cage.cycleId,\n                    date: logDate.toISOString().split('T')[0],\n                    amount: feedAmount,\n                    cost: feedCost,\n                    feedType: 'Layer Feed',\n                    supplier: 'Ghana Feed Mills',\n                    createdAt: logDate.toISOString()\n                };\n                \n                await db.add('feedLogs', feedLog);\n            }\n        }\n    }\n\n    async generateSales(cycles) {\n        const today = new Date();\n        const salesData = [\n            { customer: 'Kumasi Market', pricePerCrate: 35, paymentMethod: 'cash' },\n            { customer: 'Accra Wholesaler', pricePerCrate: 38, paymentMethod: 'mobile_money' },\n            { customer: 'Tamale Distributor', pricePerCrate: 36, paymentMethod: 'bank_transfer' },\n            { customer: 'Local Retailers', pricePerCrate: 40, paymentMethod: 'cash' }\n        ];\n        \n        for (const cycle of cycles) {\n            const cycleStart = new Date(cycle.startDate);\n            \n            // Generate sales every 5 days\n            for (let day = 10; day < 90; day += 5) {\n                const saleDate = new Date(cycleStart.getTime() + day * 24 * 60 * 60 * 1000);\n                \n                if (saleDate > today) break;\n                \n                const customer = salesData[Math.floor(Math.random() * salesData.length)];\n                const crates = Math.floor(Math.random() * 20) + 10; // 10-30 crates\n                const totalAmount = crates * customer.pricePerCrate;\n                \n                const sale = {\n                    id: Date.now() + cycle.id * 3000 + day,\n                    cycleId: cycle.id,\n                    date: saleDate.toISOString().split('T')[0],\n                    customer: customer.customer,\n                    crates: crates,\n                    pricePerCrate: customer.pricePerCrate,\n                    amount: totalAmount,\n                    paymentMethod: customer.paymentMethod,\n                    notes: `Sale to ${customer.customer}`,\n                    createdAt: saleDate.toISOString()\n                };\n                \n                await db.add('sales', sale);\n            }\n        }\n    }\n\n    async generateExpenses(cycles) {\n        const today = new Date();\n        const expenseCategories = [\n            { category: 'feed', description: 'Feed purchase', amount: 500 },\n            { category: 'medication', description: 'Vitamins and supplements', amount: 80 },\n            { category: 'labor', description: 'Farm worker wages', amount: 300 },\n            { category: 'utilities', description: 'Electricity bill', amount: 120 },\n            { category: 'maintenance', description: 'Cage repairs', amount: 150 },\n            { category: 'other', description: 'Miscellaneous expenses', amount: 50 }\n        ];\n        \n        for (const cycle of cycles) {\n            const cycleStart = new Date(cycle.startDate);\n            \n            // Generate expenses weekly\n            for (let week = 0; week < 12; week++) {\n                const expenseDate = new Date(cycleStart.getTime() + week * 7 * 24 * 60 * 60 * 1000);\n                \n                if (expenseDate > today) break;\n                \n                // Generate 1-3 expenses per week\n                const expenseCount = Math.floor(Math.random() * 3) + 1;\n                \n                for (let i = 0; i < expenseCount; i++) {\n                    const expenseType = expenseCategories[Math.floor(Math.random() * expenseCategories.length)];\n                    const amount = expenseType.amount * (0.8 + Math.random() * 0.4); // ±20% variation\n                    \n                    const expense = {\n                        id: Date.now() + cycle.id * 4000 + week * 10 + i,\n                        cycleId: cycle.id,\n                        date: expenseDate.toISOString().split('T')[0],\n                        category: expenseType.category,\n                        description: expenseType.description,\n                        amount: Math.round(amount * 100) / 100,\n                        paymentMethod: Math.random() < 0.6 ? 'cash' : 'mobile_money',\n                        notes: `Weekly ${expenseType.category} expense`,\n                        createdAt: expenseDate.toISOString()\n                    };\n                    \n                    await db.add('expenses', expense);\n                }\n            }\n        }\n    }\n\n    async generateVaccinations(cycles) {\n        const vaccinationSchedule = [\n            { age: 1, vaccine: 'Marek\\'s Disease', method: 'injection' },\n            { age: 7, vaccine: 'Newcastle Disease', method: 'drinking_water' },\n            { age: 14, vaccine: 'Infectious Bronchitis', method: 'spray' },\n            { age: 21, vaccine: 'Gumboro Disease', method: 'drinking_water' },\n            { age: 35, vaccine: 'Fowl Pox', method: 'wing_web' },\n            { age: 42, vaccine: 'Newcastle Disease Booster', method: 'drinking_water' },\n            { age: 56, vaccine: 'Infectious Bronchitis Booster', method: 'spray' },\n            { age: 70, vaccine: 'Newcastle Disease Booster', method: 'drinking_water' }\n        ];\n        \n        for (const cycle of cycles) {\n            const cycleStart = new Date(cycle.startDate);\n            \n            for (const vaccination of vaccinationSchedule) {\n                const vaccinationDate = new Date(cycleStart.getTime() + vaccination.age * 24 * 60 * 60 * 1000);\n                \n                if (vaccinationDate > new Date()) break;\n                \n                const vaccinationRecord = {\n                    id: Date.now() + cycle.id * 5000 + vaccination.age,\n                    cycleId: cycle.id,\n                    date: vaccinationDate.toISOString().split('T')[0],\n                    flockAge: vaccination.age,\n                    vaccine: vaccination.vaccine,\n                    method: vaccination.method,\n                    dosage: '1 dose per bird',\n                    notes: `Routine vaccination as per schedule`,\n                    createdAt: vaccinationDate.toISOString()\n                };\n                \n                await db.add('vaccinations', vaccinationRecord);\n            }\n        }\n    }\n\n    calculateBaseProduction(flockAge, birdCount) {\n        // Production curve based on layer bird development\n        if (flockAge < 18) return 0; // Pre-lay period\n        if (flockAge < 25) return birdCount * 0.3; // Ramp up\n        if (flockAge < 35) return birdCount * 0.7; // Building up\n        if (flockAge < 65) return birdCount * 0.85; // Peak production\n        if (flockAge < 85) return birdCount * 0.75; // Gradual decline\n        return birdCount * 0.6; // Later production\n    }\n\n    calculateFeedConsumption(birdCount, flockAge) {\n        // Feed consumption in kg per day\n        const baseConsumption = 0.12; // kg per bird per day\n        \n        if (flockAge < 18) return birdCount * baseConsumption * 0.8;\n        if (flockAge < 25) return birdCount * baseConsumption * 0.9;\n        if (flockAge < 65) return birdCount * baseConsumption;\n        return birdCount * baseConsumption * 0.95;\n    }\n}\n\n// Global instance for sample data generation\nconst sampleDataGenerator = new SampleDataGenerator();","size_bytes":13692},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"js/components/analytics.js":{"content":"class Analytics {\n    constructor() {\n        this.cycle = null;\n        this.cycles = [];\n        this.cages = [];\n        this.productionLogs = [];\n        this.feedLogs = [];\n        this.sales = [];\n        this.expenses = [];\n        this.currentFilter = 'all';\n        this.dateRange = 30; // days\n        this.metricType = 'feed'; // Default metric type\n        this.timePeriod = 'day'; // day, week, month, year\n    }\n\n    async init(cycleId = null) {\n        try {\n            // Ensure database is initialized\n            if (!db || !db.db) {\n                throw new Error('Database not initialized');\n            }\n\n            if (cycleId) {\n                this.cycle = await db.get('cycles', parseInt(cycleId));\n                this.cages = await db.getByIndex('cages', 'cycleId', parseInt(cycleId));\n                this.productionLogs = await db.getByIndex('productionLogs', 'cycleId', parseInt(cycleId));\n                this.feedLogs = await db.getByIndex('feedLogs', 'cycleId', parseInt(cycleId));\n                this.sales = await db.getByIndex('sales', 'cycleId', parseInt(cycleId));\n                this.expenses = await db.getByIndex('expenses', 'cycleId', parseInt(cycleId));\n            } else {\n                // Load all data for overall analytics\n                this.cycle = null;\n                this.cycles = await db.getAll('cycles');\n                this.cages = await db.getAll('cages');\n                this.productionLogs = await db.getAll('productionLogs');\n                this.feedLogs = await db.getAll('feedLogs');\n                this.sales = await db.getAll('sales');\n                this.expenses = await db.getAll('expenses');\n            }\n\n            // Initialize arrays if they're undefined\n            this.cycles = this.cycles || [];\n            this.cages = this.cages || [];\n            this.productionLogs = this.productionLogs || [];\n            this.feedLogs = this.feedLogs || [];\n            this.sales = this.sales || [];\n            this.expenses = this.expenses || [];\n\n            this.render();\n            this.loadAnalytics();\n        } catch (error) {\n            console.error('Error initializing analytics:', error);\n            this.renderError();\n        }\n    }\n\n    render() {\n        const content = `\n            <div class=\"analytics fade-in\">\n                ${this.renderHeader()}\n                ${this.renderFilters()}\n                ${this.renderKPIs()}\n                ${this.renderCharts()}\n                ${this.renderTables()}\n            </div>\n        `;\n\n        document.getElementById('app-content').innerHTML = content;\n    }\n\n    renderHeader() {\n        return `\n            <div class=\"d-flex justify-content-between align-items-center mb-4\">\n                <div>\n                    <h2>Analytics Dashboard</h2>\n                    <p class=\"text-muted mb-0\">\n                        ${this.cycle ? `Cycle: ${this.cycle.name}` : 'All Cycles Overview'}\n                    </p>\n                </div>\n                <div>\n                    ${this.cycle ? `\n                        <div class=\"btn-group me-2\">\n                            <button class=\"btn btn-outline-success\" onclick=\"router.navigate('sales', {cycleId: ${this.cycle.id}})\">\n                                <i class=\"fas fa-shopping-cart me-2\"></i>Sales\n                            </button>\n                            <button class=\"btn btn-outline-danger\" onclick=\"router.navigate('expenses', {cycleId: ${this.cycle.id}})\">\n                                <i class=\"fas fa-receipt me-2\"></i>Expenses\n                            </button>\n                            <button class=\"btn btn-outline-info\" onclick=\"router.navigate('vaccinations', {cycleId: ${this.cycle.id}})\">\n                                <i class=\"fas fa-syringe me-2\"></i>Vaccinations\n                            </button>\n                        </div>\n                    ` : ''}\n                    <button class=\"btn btn-outline-primary me-2\" onclick=\"analytics.exportData()\">\n                        <i class=\"fas fa-download me-2\"></i>Export Data\n                    </button>\n                    ${this.cycle ? `\n                        <button class=\"btn btn-outline-secondary\" onclick=\"router.navigate('cage-manager', {cycleId: ${this.cycle.id}})\">\n                            <i class=\"fas fa-arrow-left me-2\"></i>Back to Cages\n                        </button>\n                    ` : ''}\n                </div>\n            </div>\n        `;\n    }\n\n    renderFilters() {\n        return `\n            <div class=\"card mb-4\">\n                <div class=\"card-body\">\n                    <div class=\"row align-items-center\">\n                        ${!this.cycle ? `\n                        <div class=\"col-md-3\">\n                            <label for=\"cycleFilter\" class=\"form-label\">Cycle Filter</label>\n                            <select class=\"form-select\" id=\"cycleFilter\" onchange=\"analytics.updateCycleFilter(this.value)\">\n                                <option value=\"all\">All Cycles</option>\n                                ${this.cycles ? this.cycles.map(cycle => `<option value=\"${cycle.id}\">${cycle.name}</option>`).join('') : ''}\n                            </select>\n                        </div>\n                        ` : ''}\n                        <div class=\"col-md-3\">\n                            <label for=\"dateRange\" class=\"form-label\">Date Range</label>\n                            <select class=\"form-select\" id=\"dateRange\" onchange=\"analytics.updateDateRange(this.value)\">\n                                <option value=\"7\">Last 7 days</option>\n                                <option value=\"30\" selected>Last 30 days</option>\n                                <option value=\"90\">Last 90 days</option>\n                                <option value=\"365\">Last year</option>\n                                <option value=\"all\">All time</option>\n                            </select>\n                        </div>\n                        <div class=\"col-md-2\">\n                            <label for=\"timePeriod\" class=\"form-label\">Time Period</label>\n                            <select class=\"form-select\" id=\"timePeriod\" onchange=\"analytics.updateTimePeriod(this.value)\">\n                                <option value=\"day\" selected>Daily</option>\n                                <option value=\"week\">Weekly</option>\n                                <option value=\"month\">Monthly</option>\n                                <option value=\"year\">Yearly</option>\n                            </select>\n                        </div>\n                        <div class=\"col-md-2\">\n                            <label for=\"metricType\" class=\"form-label\">Primary Metric</label>\n                            <select class=\"form-select\" id=\"metricType\" onchange=\"analytics.updateMetricType(this.value)\">\n                                <option value=\"production\">Egg Production</option>\n                                <option value=\"efficiency\">Laying Efficiency</option>\n                                <option value=\"feed\" selected>Feed Consumption</option>\n                                <option value=\"mortality\">Mortality Rate</option>\n                                <option value=\"profit\">Profit Analysis</option>\n                            </select>\n                        </div>\n                        <div class=\"col-md-2\">\n                            <button class=\"btn btn-primary mt-4\" onclick=\"analytics.refreshAnalytics()\">\n                                <i class=\"fas fa-sync-alt me-2\"></i>Refresh\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderKPIs() {\n        return `\n            <div class=\"row mb-4\" id=\"kpi-cards\">\n                <div class=\"col-md-3\">\n                    <div class=\"card stats-card\">\n                        <div class=\"card-body text-center\">\n                            <div class=\"stats-value text-primary\" id=\"total-production\">-</div>\n                            <div class=\"stats-label\">Total Production</div>\n                            <small class=\"text-muted\" id=\"production-trend\">-</small>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"card stats-card\">\n                        <div class=\"card-body text-center\">\n                            <div class=\"stats-value text-success\" id=\"avg-laying-rate\">-</div>\n                            <div class=\"stats-label\">Avg Laying Rate</div>\n                            <small class=\"text-muted\" id=\"laying-trend\">-</small>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"card stats-card\">\n                        <div class=\"card-body text-center\">\n                            <div class=\"stats-value text-warning\" id=\"feed-efficiency\">-</div>\n                            <div class=\"stats-label\">Feed Efficiency</div>\n                            <small class=\"text-muted\" id=\"feed-trend\">-</small>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"card stats-card\">\n                        <div class=\"card-body text-center\">\n                            <div class=\"stats-value text-info\" id=\"cycle-profit\">-</div>\n                            <div class=\"stats-label\">Cycle Profit</div>\n                            <small class=\"text-muted\" id=\"profit-trend\">-</small>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderCharts() {\n        return `\n            <div class=\"row mb-4\">\n                <div class=\"col-lg-8\">\n                    <div class=\"card\">\n                        <div class=\"card-header\">\n                            <h6 class=\"mb-0\" id=\"main-chart-title\">Production Trends</h6>\n                        </div>\n                        <div class=\"card-body\">\n                            <div class=\"chart-container\">\n                                <canvas id=\"productionTrendChart\"></canvas>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-lg-4\">\n                    <div class=\"card\">\n                        <div class=\"card-header\">\n                            <h6 class=\"mb-0\">Cage Performance</h6>\n                        </div>\n                        <div class=\"card-body\">\n                            <div class=\"chart-container\">\n                                <canvas id=\"cagePerformanceChart\"></canvas>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n\n        `;\n    }\n\n    renderTables() {\n        return `\n            <div class=\"row\">\n                <div class=\"col-lg-8\">\n                    <div class=\"card\">\n                        <div class=\"card-header\">\n                            <h6 class=\"mb-0\">Top Performing Cages</h6>\n                        </div>\n                        <div class=\"card-body p-0\">\n                            <div class=\"table-responsive\">\n                                <table class=\"table table-hover mb-0\">\n                                    <thead>\n                                        <tr>\n                                            <th>Cage</th>\n                                            <th>Total Eggs</th>\n                                            <th>Laying Rate</th>\n                                            <th>Feed Efficiency</th>\n                                            <th>Performance</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody id=\"performance-table\">\n                                        <!-- Data will be loaded here -->\n                                    </tbody>\n                                </table>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-lg-4\">\n                    <div class=\"card\">\n                        <div class=\"card-header\">\n                            <h6 class=\"mb-0\">Quick Insights</h6>\n                        </div>\n                        <div class=\"card-body\">\n                            <div id=\"insights-list\">\n                                <!-- Insights will be loaded here -->\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderError() {\n        const content = `\n            <div class=\"text-center mt-5\">\n                <i class=\"fas fa-chart-line text-muted\" style=\"font-size: 3rem;\"></i>\n                <h4 class=\"mt-3\">Analytics Unavailable</h4>\n                <p class=\"text-muted\">Unable to load analytics data. Please try again.</p>\n                <button class=\"btn btn-primary\" onclick=\"analytics.init()\">\n                    <i class=\"fas fa-sync-alt me-2\"></i>Retry\n                </button>\n            </div>\n        `;\n        document.getElementById('app-content').innerHTML = content;\n    }\n\n    async loadAnalytics() {\n        this.loadKPIs();\n        this.loadCharts();\n        this.loadPerformanceTable();\n        this.loadInsights();\n    }\n\n    loadKPIs() {\n        const filteredLogs = this.getFilteredLogs();\n        const filteredFeedLogs = this.getFilteredFeedLogs();\n\n        // Total production - convert trays to eggs (1 tray = 30 eggs)\n        const totalProduction = filteredLogs.reduce((sum, log) => {\n            const eggs = log.eggsTrays ? log.eggsTrays * 30 : (log.eggsCollected || log.eggsProduced || 0);\n            return sum + eggs;\n        }, 0);\n        document.getElementById('total-production').textContent = totalProduction.toLocaleString();\n\n        // Average laying rate\n        const totalBirds = this.cages.reduce((sum, cage) => sum + (cage.currentBirds || 0), 0);\n        const avgLayingRate = totalBirds > 0 ? \n            Calculations.calculateLayingPercentage(totalProduction, totalBirds, filteredLogs.length || 1) : 0;\n        document.getElementById('avg-laying-rate').textContent = `${avgLayingRate.toFixed(1)}%`;\n\n        // Feed efficiency\n        const totalFeed = filteredFeedLogs.reduce((sum, log) => sum + (log.feedConsumed || log.amount || 0), 0);\n        const productionLogsFeed = filteredLogs.reduce((sum, log) => sum + (log.currentFeed || 0), 0);\n        const combinedFeed = totalFeed + productionLogsFeed;\n        const feedEfficiency = Calculations.calculateFeedEfficiency(totalProduction, combinedFeed);\n        console.log(`KPI Debug - Total Production: ${totalProduction}, Feed Logs Total: ${totalFeed}, Production Logs Feed: ${productionLogsFeed}, Combined Feed: ${combinedFeed}, Efficiency: ${feedEfficiency}`);\n        document.getElementById('feed-efficiency').textContent = feedEfficiency.toFixed(2);\n\n        // Cycle Profit - Debug logging\n        console.log('Sales data:', this.sales);\n        console.log('Expenses data:', this.expenses);\n        \n        const totalRevenue = this.sales.reduce((sum, sale) => sum + (sale.amount || 0), 0);\n        const totalExpenses = this.expenses.reduce((sum, expense) => sum + (expense.amount || 0), 0);\n        const profit = totalRevenue - totalExpenses;\n        const roi = totalExpenses > 0 ? ((profit / totalExpenses) * 100) : 0;\n        \n        console.log('Total Revenue:', totalRevenue);\n        console.log('Total Expenses:', totalExpenses);\n        console.log('Profit:', profit);\n        console.log('ROI:', roi);\n        \n        document.getElementById('cycle-profit').textContent = `₵${profit.toFixed(2)}`;\n        document.getElementById('profit-trend').textContent = `ROI: ${roi.toFixed(1)}%`;\n    }\n\n    loadCharts() {\n        // Update the selected values in the dropdowns\n        const metricSelect = document.getElementById('metricType');\n        if (metricSelect) {\n            metricSelect.value = this.metricType;\n        }\n\n        const timePeriodSelect = document.getElementById('timePeriod');\n        if (timePeriodSelect) {\n            timePeriodSelect.value = this.timePeriod;\n        }\n\n        // Load the main trend chart based on selected metric\n        this.loadMetricBasedChart();\n        \n        // Always load cage performance chart\n        this.loadCagePerformanceChart();\n    }\n\n    loadMetricBasedChart() {\n        // Update chart title based on metric type and time period\n        const chartTitles = {\n            'production': `Egg Production Trends (${this.timePeriod.charAt(0).toUpperCase() + this.timePeriod.slice(1)}ly)`,\n            'efficiency': `Laying Efficiency Trends (${this.timePeriod.charAt(0).toUpperCase() + this.timePeriod.slice(1)}ly)`,\n            'feed': `Feed Consumption Trends (${this.timePeriod.charAt(0).toUpperCase() + this.timePeriod.slice(1)}ly)`,\n            'mortality': `Mortality Trends (${this.timePeriod.charAt(0).toUpperCase() + this.timePeriod.slice(1)}ly)`,\n            'profit': `Profit Analysis (${this.timePeriod.charAt(0).toUpperCase() + this.timePeriod.slice(1)}ly)`\n        };\n        \n        const titleElement = document.getElementById('main-chart-title');\n        if (titleElement) {\n            titleElement.textContent = chartTitles[this.metricType] || `Production Trends (${this.timePeriod.charAt(0).toUpperCase() + this.timePeriod.slice(1)}ly)`;\n        }\n\n        switch (this.metricType) {\n            case 'production':\n                this.loadProductionTrendChart();\n                break;\n            case 'efficiency':\n                this.loadEfficiencyChart();\n                break;\n            case 'feed':\n                this.loadFeedChart();\n                break;\n            case 'mortality':\n                this.loadMortalityChart();\n                break;\n            case 'profit':\n                this.loadProfitChart();\n                break;\n            default:\n                this.loadProductionTrendChart();\n        }\n    }\n\n    loadProductionTrendChart() {\n        const filteredLogs = this.getFilteredLogs();\n        \n        if (filteredLogs.length === 0) {\n            // Show no data message\n            document.getElementById('productionTrendChart').parentElement.innerHTML = `\n                <div class=\"text-center py-4 text-muted\">\n                    <i class=\"fas fa-chart-line fa-3x mb-3\"></i>\n                    <p>No production data available yet.</p>\n                    <small>Start logging daily production to see trends.</small>\n                </div>\n            `;\n            return;\n        }\n        \n        // Group data by selected time period\n        const groupedData = Calculations.groupDataByPeriod(filteredLogs, this.timePeriod);\n        const labels = Object.keys(groupedData).sort();\n        \n        const productionData = labels.map(period => {\n            const periodLogs = groupedData[period];\n            return periodLogs.reduce((sum, log) => {\n                const eggs = log.eggsTrays ? log.eggsTrays * 30 : (log.eggsCollected || log.eggsProduced || 0);\n                return sum + eggs;\n            }, 0);\n        });\n\n        const layingData = labels.map(period => {\n            const periodLogs = groupedData[period];\n            const totalEggs = periodLogs.reduce((sum, log) => {\n                const eggs = log.eggsTrays ? log.eggsTrays * 30 : (log.eggsCollected || log.eggsProduced || 0);\n                return sum + eggs;\n            }, 0);\n            const totalBirds = this.cages.reduce((sum, cage) => sum + (cage.currentBirds || 0), 0);\n            const daysInPeriod = this.timePeriod === 'day' ? 1 : this.timePeriod === 'week' ? 7 : this.timePeriod === 'month' ? 30 : 365;\n            const layingRate = totalBirds > 0 ? Calculations.calculateLayingPercentage(totalEggs, totalBirds, daysInPeriod) : 0;\n            console.log(`Debug laying rate - Period: ${period}, Eggs: ${totalEggs}, Birds: ${totalBirds}, Days: ${daysInPeriod}, Rate: ${layingRate}%`);\n            return layingRate;\n        });\n\n        const chartData = {\n                labels: labels.map(label => Calculations.formatDate(label, this.timePeriod)),\n                datasets: [\n                    {\n                        label: `${this.timePeriod.charAt(0).toUpperCase() + this.timePeriod.slice(1)}ly Production (Eggs)`,\n                        data: productionData,\n                        color: '#2563eb',\n                        fill: true,\n                        yAxisID: 'y'\n                    },\n                {\n                    label: 'Laying Rate (%)',\n                    data: layingData,\n                    color: '#10b981',\n                    fill: false,\n                    yAxisID: 'y1'\n                }\n            ]\n        };\n\n        const chartOptions = {\n            scales: {\n                y: {\n                    type: 'linear',\n                    display: true,\n                    position: 'left',\n                    title: {\n                        display: true,\n                        text: 'Eggs Produced'\n                    }\n                },\n                y1: {\n                    type: 'linear',\n                    display: true,\n                    position: 'right',\n                    beginAtZero: true,\n                    suggestedMax: 100,\n                    title: {\n                        display: true,\n                        text: 'Laying Rate (%)'\n                    },\n                    grid: {\n                        drawOnChartArea: false,\n                    },\n                    ticks: {\n                        callback: function(value) {\n                            return value + '%';\n                        }\n                    }\n                }\n            }\n        };\n\n        console.log('Production Chart Data:', {\n            labels: chartData.labels,\n            productionData: productionData,\n            layingData: layingData,\n            chartOptions: chartOptions\n        });\n\n        setTimeout(() => {\n            chartManager.createLineChart('productionTrendChart', chartData, chartOptions);\n        }, 100);\n    }\n\n    loadCagePerformanceChart() {\n        if (this.cages.length === 0) {\n            document.getElementById('cagePerformanceChart').parentElement.innerHTML = `\n                <div class=\"text-center py-4 text-muted\">\n                    <i class=\"fas fa-home fa-2x mb-3\"></i>\n                    <p>No cages available.</p>\n                    <small>Add cages to see performance comparison.</small>\n                </div>\n            `;\n            return;\n        }\n\n        const cagePerformance = this.cages.map(cage => {\n            const cageLogs = this.productionLogs.filter(log => log.cageId === cage.id);\n            const totalEggs = cageLogs.reduce((sum, log) => {\n                const eggs = log.eggsTrays ? log.eggsTrays * 30 : (log.eggsCollected || log.eggsProduced || 0);\n                return sum + eggs;\n            }, 0);\n            const avgLayingRate = cage.currentBirds > 0 ?\n                Calculations.calculateLayingPercentage(totalEggs, cage.currentBirds, cageLogs.length || 1) : 0;\n            \n            return {\n                name: cage.name,\n                performance: avgLayingRate\n            };\n        });\n\n        cagePerformance.sort((a, b) => b.performance - a.performance);\n\n        const chartData = {\n            labels: cagePerformance.map(cage => cage.name),\n            datasets: [{\n                label: 'Laying Rate %',\n                data: cagePerformance.map(cage => cage.performance),\n                color: '#8b5cf6'\n            }]\n        };\n\n        setTimeout(() => {\n            chartManager.createBarChart('cagePerformanceChart', chartData);\n        }, 100);\n    }\n\n    loadFeedChart() {\n        const filteredFeedLogs = this.getFilteredFeedLogs();\n        \n        if (filteredFeedLogs.length === 0) {\n            // Show no data message\n            document.getElementById('productionTrendChart').parentElement.innerHTML = `\n                <div class=\"text-center py-4 text-muted\">\n                    <i class=\"fas fa-chart-line fa-3x mb-3\"></i>\n                    <p>No feed consumption data available yet.</p>\n                    <small>Start logging feed consumption to see trends.</small>\n                </div>\n            `;\n            return;\n        }\n        \n        // Group data by selected time period\n        const groupedFeedData = Calculations.groupDataByPeriod(filteredFeedLogs, this.timePeriod);\n        const labels = Object.keys(groupedFeedData).sort();\n        \n        const feedData = labels.map(period => {\n            const periodLogs = groupedFeedData[period];\n            return periodLogs.reduce((sum, log) => sum + (log.feedConsumed || log.amount || 0), 0);\n        });\n\n        const chartData = {\n                labels: labels.map(label => Calculations.formatDate(label, this.timePeriod)),\n                datasets: [{\n                    label: `${this.timePeriod.charAt(0).toUpperCase() + this.timePeriod.slice(1)}ly Feed (kg)`,\n                    data: feedData,\n                    color: '#f59e0b'\n                }]\n            };\n\n        setTimeout(() => {\n            chartManager.createBarChart('productionTrendChart', chartData);\n        }, 100);\n    }\n\n    loadEfficiencyChart() {\n        const recentLogs = this.getFilteredLogs().slice(-30);\n        \n        if (recentLogs.length === 0) {\n            document.getElementById('productionTrendChart').parentElement.innerHTML = `\n                <div class=\"text-center py-4 text-muted\">\n                    <i class=\"fas fa-chart-line fa-3x mb-3\"></i>\n                    <p>No production data available for efficiency analysis.</p>\n                    <small>Start logging daily production to see laying efficiency trends.</small>\n                </div>\n            `;\n            return;\n        }\n        \n        const efficiencyData = recentLogs.map(log => {\n            const feedLog = this.feedLogs.find(f => f.date === log.date && f.cycleId === log.cycleId);\n            const feedAmount = feedLog?.feedConsumed || feedLog?.amount || log.currentFeed || 0;\n            const eggs = log.eggsTrays ? log.eggsTrays * 30 : (log.eggsCollected || log.eggsProduced || 0);\n            const efficiency = Calculations.calculateFeedEfficiency(eggs, feedAmount);\n            console.log(`Debug efficiency - Date: ${log.date}, Eggs: ${eggs}, Feed: ${feedAmount}, Efficiency: ${efficiency}`);\n            return efficiency;\n        });\n\n        const movingAvg = Calculations.calculateMovingAverage(efficiencyData, 7);\n\n        const chartData = {\n            labels: recentLogs.slice(-movingAvg.length).map(log => Calculations.formatDate(log.date)),\n            datasets: [\n                {\n                    label: 'Daily Efficiency',\n                    data: efficiencyData.slice(-movingAvg.length),\n                    color: '#06b6d4',\n                    fill: false\n                },\n                {\n                    label: '7-Day Average',\n                    data: movingAvg,\n                    color: '#ef4444',\n                    fill: false\n                }\n            ]\n        };\n\n        setTimeout(() => {\n            chartManager.createLineChart('productionTrendChart', chartData);\n        }, 100);\n    }\n\n    loadMortalityChart() {\n        const filteredLogs = this.getFilteredLogs();\n        \n        if (filteredLogs.length === 0) {\n            document.getElementById('productionTrendChart').parentElement.innerHTML = `\n                <div class=\"text-center py-4 text-muted\">\n                    <i class=\"fas fa-chart-line fa-3x mb-3\"></i>\n                    <p>No mortality data available yet.</p>\n                    <small>Start logging daily production to see mortality trends.</small>\n                </div>\n            `;\n            return;\n        }\n\n        // Group data by selected time period\n        const groupedData = Calculations.groupDataByPeriod(filteredLogs, this.timePeriod);\n        const labels = Object.keys(groupedData).sort();\n        \n        const mortalityData = labels.map(period => {\n            const periodLogs = groupedData[period];\n            return periodLogs.reduce((sum, log) => sum + (log.mortality || 0), 0);\n        });\n\n        const mortalityRateData = labels.map(period => {\n            const periodLogs = groupedData[period];\n            const totalMortality = periodLogs.reduce((sum, log) => sum + (log.mortality || 0), 0);\n            const totalBirds = this.cages.reduce((sum, cage) => sum + (cage.currentBirds || 0), 0);\n            return totalBirds > 0 ? (totalMortality / totalBirds) * 100 : 0;\n        });\n\n        const chartData = {\n                labels: labels.map(label => Calculations.formatDate(label, this.timePeriod)),\n                datasets: [\n                    {\n                        label: `${this.timePeriod.charAt(0).toUpperCase() + this.timePeriod.slice(1)}ly Mortality Count`,\n                        data: mortalityData,\n                        color: '#ef4444',\n                        fill: true,\n                        yAxisID: 'y'\n                    },\n                {\n                    label: 'Mortality Rate (%)',\n                    data: mortalityRateData,\n                    color: '#f97316',\n                    fill: false,\n                    yAxisID: 'y1'\n                }\n            ]\n        };\n\n        const chartOptions = {\n            scales: {\n                y: {\n                    type: 'linear',\n                    display: true,\n                    position: 'left',\n                    title: {\n                        display: true,\n                        text: 'Mortality Count'\n                    }\n                },\n                y1: {\n                    type: 'linear',\n                    display: true,\n                    position: 'right',\n                    beginAtZero: true,\n                    suggestedMax: 100,\n                    title: {\n                        display: true,\n                        text: 'Mortality Rate (%)'\n                    },\n                    grid: {\n                        drawOnChartArea: false,\n                    },\n                    ticks: {\n                        callback: function(value) {\n                            return value + '%';\n                        }\n                    }\n                }\n            }\n        };\n\n        setTimeout(() => {\n            chartManager.createLineChart('productionTrendChart', chartData, chartOptions);\n        }, 100);\n    }\n\n    loadProfitChart() {\n        if (this.sales.length === 0 && this.expenses.length === 0) {\n            document.getElementById('productionTrendChart').parentElement.innerHTML = `\n                <div class=\"text-center py-4 text-muted\">\n                    <i class=\"fas fa-chart-line fa-3x mb-3\"></i>\n                    <p>No financial data available yet.</p>\n                    <small>Start recording sales and expenses to see profit trends.</small>\n                </div>\n            `;\n            return;\n        }\n\n        // Group sales and expenses by month\n        const allDates = [...this.sales.map(s => s.date), ...this.expenses.map(e => e.date)];\n        const dateRange = [...new Set(allDates)].sort();\n        \n        const monthlyData = {};\n        dateRange.forEach(date => {\n            const month = date.substring(0, 7); // YYYY-MM format\n            if (!monthlyData[month]) {\n                monthlyData[month] = { revenue: 0, expenses: 0 };\n            }\n        });\n\n        // Calculate monthly revenue\n        this.sales.forEach(sale => {\n            const month = sale.date.substring(0, 7);\n            if (monthlyData[month]) {\n                monthlyData[month].revenue += sale.amount || 0;\n            }\n        });\n\n        // Calculate monthly expenses\n        this.expenses.forEach(expense => {\n            const month = expense.date.substring(0, 7);\n            if (monthlyData[month]) {\n                monthlyData[month].expenses += expense.amount || 0;\n            }\n        });\n\n        const labels = Object.keys(monthlyData).sort();\n        const revenueData = labels.map(month => monthlyData[month].revenue);\n        const expenseData = labels.map(month => monthlyData[month].expenses);\n        const profitData = labels.map(month => monthlyData[month].revenue - monthlyData[month].expenses);\n\n        const chartData = {\n            labels: labels.map(label => {\n                const date = new Date(label + '-01');\n                const month = String(date.getMonth() + 1).padStart(2, '0');\n                const year = date.getFullYear();\n                return `${month}/${year}`;\n            }),\n            datasets: [\n                {\n                    label: 'Revenue',\n                    data: revenueData,\n                    color: '#10b981',\n                    fill: false\n                },\n                {\n                    label: 'Expenses',\n                    data: expenseData,\n                    color: '#ef4444',\n                    fill: false\n                },\n                {\n                    label: 'Profit',\n                    data: profitData,\n                    color: '#2563eb',\n                    fill: true\n                }\n            ]\n        };\n\n        setTimeout(() => {\n            chartManager.createLineChart('productionTrendChart', chartData);\n        }, 100);\n    }\n\n    loadPerformanceTable() {\n        const cageStats = this.cages.map(cage => {\n            const cageLogs = this.productionLogs.filter(log => log.cageId === cage.id);\n            const cageFeedLogs = this.feedLogs.filter(log => log.cageId === cage.id);\n            \n            const totalEggs = cageLogs.reduce((sum, log) => {\n                const eggs = log.eggsTrays ? log.eggsTrays * 30 : (log.eggsCollected || log.eggsProduced || 0);\n                return sum + eggs;\n            }, 0);\n            const totalFeed = cageFeedLogs.reduce((sum, log) => sum + (log.feedConsumed || log.amount || 0), 0) +\n                           cageLogs.reduce((sum, log) => sum + (log.currentFeed || 0), 0);\n            \n            const layingRate = cage.currentBirds > 0 ?\n                Calculations.calculateLayingPercentage(totalEggs, cage.currentBirds, cageLogs.length || 1) : 0;\n            const feedEfficiency = Calculations.calculateFeedEfficiency(totalEggs, totalFeed);\n            \n            const performanceScore = layingRate * 0.6 + (feedEfficiency * 10) * 0.4;\n            \n            return {\n                cage,\n                totalEggs,\n                layingRate,\n                feedEfficiency,\n                performanceScore\n            };\n        });\n\n        cageStats.sort((a, b) => b.performanceScore - a.performanceScore);\n\n        const tableBody = document.getElementById('performance-table');\n        if (cageStats.length > 0) {\n            tableBody.innerHTML = cageStats.map(stat => `\n                <tr onclick=\"router.navigate('cage-detail', {id: ${stat.cage.id}})\" style=\"cursor: pointer;\">\n                    <td><strong>${stat.cage.name}</strong></td>\n                    <td>${stat.totalEggs.toLocaleString()}</td>\n                    <td>\n                        <span class=\"badge bg-${stat.layingRate > 80 ? 'success' : stat.layingRate > 60 ? 'warning' : 'danger'}\">\n                            ${stat.layingRate.toFixed(1)}%\n                        </span>\n                    </td>\n                    <td>${stat.feedEfficiency.toFixed(2)}</td>\n                    <td>\n                        <div class=\"progress\" style=\"height: 8px;\">\n                            <div class=\"progress-bar bg-primary\" style=\"width: ${Math.min(100, stat.performanceScore)}%\"></div>\n                        </div>\n                        <small class=\"text-muted\">${stat.performanceScore.toFixed(0)}/100</small>\n                    </td>\n                </tr>\n            `).join('');\n        } else {\n            tableBody.innerHTML = `\n                <tr>\n                    <td colspan=\"5\" class=\"text-center text-muted py-4\">\n                        <i class=\"fas fa-info-circle me-2\"></i>\n                        No production data available yet. Add some daily entries to see performance metrics.\n                    </td>\n                </tr>\n            `;\n        }\n    }\n\n    loadInsights() {\n        const insights = this.generateInsights();\n        const insightsList = document.getElementById('insights-list');\n        \n        if (insights.length === 0) {\n            insightsList.innerHTML = `\n                <div class=\"alert alert-info\">\n                    <i class=\"fas fa-lightbulb me-2\"></i>\n                    <strong>Getting Started</strong><br>\n                    <small>Add some production data to receive insights and recommendations about your farm's performance.</small>\n                </div>\n            `;\n        } else {\n            insightsList.innerHTML = insights.map(insight => `\n                <div class=\"alert alert-${insight.type} alert-dismissible\">\n                    <i class=\"fas ${insight.icon} me-2\"></i>\n                    <strong>${insight.title}</strong><br>\n                    <small>${insight.description}</small>\n                </div>\n            `).join('');\n        }\n    }\n\n    generateInsights() {\n        const insights = [];\n        \n        // Check if we have any data first\n        if (this.productionLogs.length === 0 || this.cages.length === 0) {\n            return insights; // Return empty array to show \"Getting Started\" message\n        }\n        \n        // Calculate overall metrics\n        const totalProduction = this.productionLogs.reduce((sum, log) => {\n            const eggs = log.eggsTrays ? log.eggsTrays * 30 : (log.eggsCollected || log.eggsProduced || 0);\n            return sum + eggs;\n        }, 0);\n        const totalBirds = this.cages.reduce((sum, cage) => sum + (cage.currentBirds || 0), 0);\n        const avgLayingRate = totalBirds > 0 ?\n            Calculations.calculateLayingPercentage(totalProduction, totalBirds, this.productionLogs.length || 1) : 0;\n\n        // Performance insights\n        if (avgLayingRate > 85) {\n            insights.push({\n                type: 'success',\n                icon: 'fa-thumbs-up',\n                title: 'Excellent Performance',\n                description: 'Your laying rate is above 85%, indicating excellent flock health and management.'\n            });\n        } else if (avgLayingRate < 60) {\n            insights.push({\n                type: 'warning',\n                icon: 'fa-exclamation-triangle',\n                title: 'Below Average Performance',\n                description: 'Consider reviewing feeding schedules, health management, or environmental conditions.'\n            });\n        }\n\n        // Feed efficiency insights  \n        const totalFeed = this.feedLogs.reduce((sum, log) => sum + (log.feedConsumed || log.amount || 0), 0) +\n                         this.productionLogs.reduce((sum, log) => sum + (log.currentFeed || 0), 0);\n        const feedEfficiency = Calculations.calculateFeedEfficiency(totalProduction, totalFeed);\n        \n        if (feedEfficiency < 0.5) {\n            insights.push({\n                type: 'info',\n                icon: 'fa-info-circle',\n                title: 'Feed Efficiency Alert',\n                description: 'Feed conversion ratio could be improved. Consider adjusting feed quality or quantity.'\n            });\n        }\n\n        // Trend insights\n        const recentLogs = this.productionLogs.slice(-7);\n        const previousLogs = this.productionLogs.slice(-14, -7);\n        \n        if (recentLogs.length > 0 && previousLogs.length > 0) {\n            const recentAvg = recentLogs.reduce((sum, log) => {\n                const eggs = log.eggsTrays ? log.eggsTrays * 30 : (log.eggsCollected || log.eggsProduced || 0);\n                return sum + eggs;\n            }, 0) / recentLogs.length;\n            const previousAvg = previousLogs.reduce((sum, log) => {\n                const eggs = log.eggsTrays ? log.eggsTrays * 30 : (log.eggsCollected || log.eggsProduced || 0);\n                return sum + eggs;\n            }, 0) / previousLogs.length;\n            \n            if (recentAvg > previousAvg * 1.1) {\n                insights.push({\n                    type: 'success',\n                    icon: 'fa-trending-up',\n                    title: 'Production Increasing',\n                    description: 'Production has increased by more than 10% compared to the previous week.'\n                });\n            } else if (recentAvg < previousAvg * 0.9) {\n                insights.push({\n                    type: 'warning',\n                    icon: 'fa-trending-down',\n                    title: 'Production Declining',\n                    description: 'Production has decreased by more than 10% compared to the previous week.'\n                });\n            }\n        }\n\n        return insights.slice(0, 4); // Limit to 4 insights\n    }\n\n    getFilteredLogs() {\n        let logs = [...this.productionLogs];\n        \n        // Filter by date range\n        if (this.dateRange !== 'all') {\n            const cutoffDate = new Date();\n            cutoffDate.setDate(cutoffDate.getDate() - parseInt(this.dateRange));\n            logs = logs.filter(log => new Date(log.date) >= cutoffDate);\n        }\n        \n        // Filter by cage\n        if (this.currentFilter !== 'all') {\n            logs = logs.filter(log => log.cageId === parseInt(this.currentFilter));\n        }\n        \n        return logs;\n    }\n\n    getFilteredFeedLogs() {\n        let logs = [...this.feedLogs];\n        \n        // Filter by date range\n        if (this.dateRange !== 'all') {\n            const cutoffDate = new Date();\n            cutoffDate.setDate(cutoffDate.getDate() - parseInt(this.dateRange));\n            logs = logs.filter(log => new Date(log.date) >= cutoffDate);\n        }\n        \n        // Filter by cage\n        if (this.currentFilter !== 'all') {\n            logs = logs.filter(log => log.cageId === parseInt(this.currentFilter));\n        }\n        \n        return logs;\n    }\n\n    updateDateRange(days) {\n        this.dateRange = days;\n        this.refreshAnalytics();\n    }\n\n    updateCageFilter(cageId) {\n        this.currentFilter = cageId;\n        this.refreshAnalytics();\n    }\n\n    updateCycleFilter(cycleId) {\n        if (cycleId === 'all') {\n            router.navigate('analytics');\n        } else {\n            router.navigate('analytics', { cycleId: cycleId });\n        }\n    }\n\n    updateTimePeriod(period) {\n        this.timePeriod = period;\n        this.refreshChart();\n    }\n\n    updateMetricType(type) {\n        this.metricType = type;\n        this.refreshChart();\n    }\n\n    refreshChart() {\n        // Re-load the charts with updated time period\n        this.loadMetricBasedChart();\n    }\n\n    refreshAnalytics() {\n        this.loadAnalytics();\n    }\n\n    async exportData() {\n        try {\n            const exportData = {\n                cycle: this.cycle,\n                cages: this.cages,\n                productionLogs: this.productionLogs,\n                feedLogs: this.feedLogs,\n                summary: {\n                    totalProduction: this.productionLogs.reduce((sum, log) => sum + (log.eggsCollected || 0), 0),\n                    totalFeed: this.feedLogs.reduce((sum, log) => sum + (log.amount || 0), 0),\n                    avgLayingRate: this.calculateOverallLayingRate(),\n                    exportDate: new Date().toISOString()\n                }\n            };\n\n            const dataStr = JSON.stringify(exportData, null, 2);\n            const dataBlob = new Blob([dataStr], {type: 'application/json'});\n            \n            const link = document.createElement('a');\n            link.href = URL.createObjectURL(dataBlob);\n            link.download = `analytics-export-${this.cycle?.name || 'all-cycles'}-${new Date().toISOString().split('T')[0]}.json`;\n            link.click();\n            \n            this.showToast('Analytics data exported successfully!', 'success');\n        } catch (error) {\n            console.error('Error exporting analytics data:', error);\n            this.showToast('Error exporting data. Please try again.', 'error');\n        }\n    }\n\n    calculateOverallLayingRate() {\n        const totalProduction = this.productionLogs.reduce((sum, log) => sum + (log.eggsCollected || 0), 0);\n        const totalBirds = this.cages.reduce((sum, cage) => sum + (cage.currentBirds || 0), 0);\n        return totalBirds > 0 ? Calculations.calculateLayingPercentage(totalProduction, totalBirds, this.productionLogs.length || 1) : 0;\n    }\n\n    showToast(message, type = 'info') {\n        const toast = document.getElementById('toast');\n        const toastBody = toast.querySelector('.toast-body');\n        \n        toastBody.textContent = message;\n        \n        const icon = toast.querySelector('.fas');\n        icon.className = type === 'success' ? 'fas fa-check-circle text-success me-2' : \n                        type === 'error' ? 'fas fa-exclamation-circle text-danger me-2' : \n                        'fas fa-info-circle text-primary me-2';\n        \n        const bsToast = new bootstrap.Toast(toast);\n        bsToast.show();\n    }\n\n    // Clear cache method for data clearing\n    clearCache() {\n        this.cycle = null;\n        this.cycles = [];\n        this.cages = [];\n        this.productionLogs = [];\n        this.feedLogs = [];\n        this.sales = [];\n        this.expenses = [];\n        console.log('Analytics cache cleared');\n    }\n}\n\n// Global analytics instance\nconst analytics = new Analytics();","size_bytes":45970},"js/components/auth.js":{"content":"class Auth {\n    constructor() {\n        this.isAuthenticated = false;\n        this.adminPassword = 'admin123'; // Default password - user can change in settings\n        this.sessionKey = 'poultryAppSession';\n        this.passwordKey = 'poultryAppPassword';\n        this.loadSettings();\n    }\n\n    loadSettings() {\n        // Load custom password if set\n        const savedPassword = localStorage.getItem(this.passwordKey);\n        if (savedPassword) {\n            this.adminPassword = savedPassword;\n        }\n    }\n\n    checkSession() {\n        const session = localStorage.getItem(this.sessionKey);\n        if (session) {\n            const sessionData = JSON.parse(session);\n            const now = new Date().getTime();\n            \n            // Session expires after 24 hours\n            if (now - sessionData.timestamp < 24 * 60 * 60 * 1000) {\n                this.isAuthenticated = true;\n                return true;\n            } else {\n                this.logout();\n            }\n        }\n        return false;\n    }\n\n    async showLoginScreen() {\n        return new Promise((resolve) => {\n            const loginHTML = `\n                <div class=\"login-container\">\n                    <div class=\"login-card\">\n                        <div class=\"login-header\">\n                            <i class=\"fas fa-egg login-icon\"></i>\n                            <h2>Poultry Management System</h2>\n                            <p class=\"text-muted\">Enter admin password to continue</p>\n                        </div>\n                        <form id=\"loginForm\" class=\"login-form\">\n                            <div class=\"form-group\">\n                                <div class=\"input-group\">\n                                    <span class=\"input-group-text\">\n                                        <i class=\"fas fa-lock\"></i>\n                                    </span>\n                                    <input type=\"password\" \n                                           id=\"adminPassword\" \n                                           class=\"form-control\" \n                                           placeholder=\"Admin Password\" \n                                           required\n                                           autocomplete=\"current-password\">\n                                </div>\n                            </div>\n                            <div class=\"form-check mb-3\">\n                                <input type=\"checkbox\" class=\"form-check-input\" id=\"rememberMe\" checked>\n                                <label class=\"form-check-label\" for=\"rememberMe\">\n                                    Keep me logged in for 24 hours\n                                </label>\n                            </div>\n                            <button type=\"submit\" class=\"btn btn-primary w-100\">\n                                <i class=\"fas fa-sign-in-alt me-2\"></i>Login\n                            </button>\n                        </form>\n                        <div id=\"loginError\" class=\"alert alert-danger mt-3 d-none\">\n                            Incorrect password. Please try again.\n                        </div>\n                        <div class=\"login-footer\">\n                            <small class=\"text-muted\">\n                                Default password: admin123<br>\n                                You can change this in Settings after logging in.\n                            </small>\n                        </div>\n                    </div>\n                </div>\n            `;\n\n            document.body.innerHTML = loginHTML;\n\n            const form = document.getElementById('loginForm');\n            const passwordInput = document.getElementById('adminPassword');\n            const errorDiv = document.getElementById('loginError');\n\n            form.addEventListener('submit', (e) => {\n                e.preventDefault();\n                const enteredPassword = passwordInput.value;\n                \n                if (this.validatePassword(enteredPassword)) {\n                    const rememberMe = document.getElementById('rememberMe').checked;\n                    this.login(rememberMe);\n                    resolve(true);\n                } else {\n                    errorDiv.classList.remove('d-none');\n                    passwordInput.value = '';\n                    passwordInput.focus();\n                    \n                    // Hide error after 3 seconds\n                    setTimeout(() => {\n                        errorDiv.classList.add('d-none');\n                    }, 3000);\n                }\n            });\n\n            // Focus on password input\n            passwordInput.focus();\n        });\n    }\n\n    validatePassword(password) {\n        return password === this.adminPassword;\n    }\n\n    login(rememberSession = true) {\n        this.isAuthenticated = true;\n        \n        if (rememberSession) {\n            const sessionData = {\n                timestamp: new Date().getTime(),\n                authenticated: true\n            };\n            localStorage.setItem(this.sessionKey, JSON.stringify(sessionData));\n        }\n        \n        console.log('User authenticated successfully');\n    }\n\n    logout() {\n        this.isAuthenticated = false;\n        localStorage.removeItem(this.sessionKey);\n        \n        // Reload the page to show login screen\n        window.location.reload();\n    }\n\n    changePassword(newPassword) {\n        if (newPassword && newPassword.length >= 6) {\n            this.adminPassword = newPassword;\n            localStorage.setItem(this.passwordKey, newPassword);\n            return true;\n        }\n        return false;\n    }\n\n    getCurrentPassword() {\n        return this.adminPassword;\n    }\n\n    // Method to add logout functionality to the app\n    addLogoutButton() {\n        const navbar = document.querySelector('.navbar-nav');\n        if (navbar && !document.getElementById('logoutBtn')) {\n            const logoutItem = document.createElement('li');\n            logoutItem.className = 'nav-item';\n            logoutItem.innerHTML = `\n                <a class=\"nav-link\" href=\"#\" id=\"logoutBtn\">\n                    <i class=\"fas fa-sign-out-alt me-1\"></i>Logout\n                </a>\n            `;\n            navbar.appendChild(logoutItem);\n\n            document.getElementById('logoutBtn').addEventListener('click', (e) => {\n                e.preventDefault();\n                if (confirm('Are you sure you want to logout?')) {\n                    this.logout();\n                }\n            });\n        }\n    }\n}\n\n// Create global auth instance\nconst auth = new Auth();","size_bytes":6591},"js/components/cage-detail.js":{"content":"class CageDetail {\n    constructor() {\n        this.cage = null;\n        this.cycle = null;\n        this.productionLogs = [];\n        this.feedLogs = [];\n    }\n\n    async init(cageId) {\n        try {\n            this.cage = await db.get('cages', parseInt(cageId));\n            if (!this.cage) {\n                throw new Error('Cage not found');\n            }\n\n            this.cycle = await db.get('cycles', this.cage.cycleId);\n            this.productionLogs = await db.getByIndex('productionLogs', 'cageId', this.cage.id);\n            this.feedLogs = await db.getByIndex('feedLogs', 'cycleId', this.cage.cycleId);\n            \n            // Sort logs by date (newest first)\n            this.productionLogs.sort((a, b) => new Date(b.date) - new Date(a.date));\n            this.feedLogs.sort((a, b) => new Date(b.date) - new Date(a.date));\n\n            this.render();\n        } catch (error) {\n            console.error('Error initializing cage detail:', error);\n            this.renderError();\n        }\n    }\n\n    render() {\n        const content = `\n            <div class=\"cage-detail fade-in\">\n                ${this.renderHeader()}\n                ${this.renderProductionForm()}\n                ${this.renderStats()}\n                ${this.renderCharts()}\n                ${this.renderLogs()}\n            </div>\n        `;\n\n        document.getElementById('app-content').innerHTML = content;\n        this.loadMetrics();\n        \n        // Load the actual charts after a small delay to ensure DOM is ready\n        setTimeout(() => {\n            this.renderProductionChart();\n            this.renderPerformanceChart();\n        }, 200);\n    }\n\n    async loadMetrics() {\n        try {\n            const calculations = await this.calculateDetailedMetrics();\n            \n            const metricsContent = `\n                <div class=\"row\">\n                    <div class=\"col-lg-4\">\n                        <h6 class=\"text-primary\">Age & Birds</h6>\n                        <div class=\"mb-2\">\n                            <span class=\"fw-bold\">${calculations.ageInDays}</span> days \n                            (<span class=\"fw-bold\">${calculations.ageInWeeks}</span> weeks)\n                        </div>\n                        <div class=\"mb-2\">\n                            Current Flock: <span class=\"fw-bold\">${calculations.closingBirds.toLocaleString()}</span>\n                        </div>\n                        <div class=\"mb-2\">\n                            Cum Mortality: <span class=\"fw-bold\">${calculations.cumMortality.toLocaleString()}</span> \n                            (<span class=\"fw-bold\">${calculations.cumMortalityPercent}%</span>)\n                        </div>\n                    </div>\n                    <div class=\"col-lg-4\">\n                        <h6 class=\"text-success\">Production</h6>\n                        <div class=\"mb-2\">\n                            Current Production: <span class=\"fw-bold\">${calculations.currentProductionPercent}%</span>\n                        </div>\n                        <div class=\"mb-2\">\n                            Cum Production: <span class=\"fw-bold\">${calculations.cumProductionEggs.toLocaleString()}</span> eggs\n                        </div>\n                        <div class=\"mb-2\">\n                            Hen House Production: <span class=\"fw-bold\">${calculations.henHouseProduction}</span> eggs/bird\n                        </div>\n                    </div>\n                    <div class=\"col-lg-4\">\n                        <h6 class=\"text-warning\">Feed Efficiency</h6>\n                        <div class=\"mb-2\">\n                            Current Feed/Bird: <span class=\"fw-bold\">${calculations.currentFeedPerBird}</span> kg\n                        </div>\n                        <div class=\"mb-2\">\n                            Cum Feed/Bird: <span class=\"fw-bold\">${calculations.cumFeedPerBird}</span> kg\n                        </div>\n                        <div class=\"mb-2\">\n                            Current Feed/Egg: <span class=\"fw-bold\">${calculations.currentFeedPerEgg}</span> g\n                        </div>\n                        <div class=\"mb-2\">\n                            Cum Feed/Egg: <span class=\"fw-bold\">${calculations.cumFeedPerEgg}</span> g\n                        </div>\n                    </div>\n                </div>\n            `;\n            \n            document.getElementById('metrics-content').innerHTML = metricsContent;\n        } catch (error) {\n            console.error('Error loading metrics:', error);\n            document.getElementById('metrics-content').innerHTML = `\n                <div class=\"alert alert-danger\">\n                    <i class=\"fas fa-exclamation-triangle me-2\"></i>\n                    Error loading flock metrics. Please try again.\n                </div>\n            `;\n        }\n    }\n\n    renderHeader() {\n        return `\n            <div class=\"d-flex justify-content-between align-items-center mb-4\">\n                <div>\n                    <h2>${this.cage.name}</h2>\n                    <p class=\"text-muted mb-0\">\n                        ${this.cycle?.name || 'Unknown Cycle'} • \n                        ${this.cage.currentBirds} birds • \n                        <span class=\"badge ${this.getStatusBadgeClass(this.cage.status)}\">${this.cage.status}</span>\n                    </p>\n                </div>\n                <div>\n                    <button class=\"btn btn-outline-secondary me-2\" onclick=\"router.navigate('cage-manager', {cycleId: ${this.cage.cycleId}})\">\n                        <i class=\"fas fa-arrow-left me-2\"></i>Back\n                    </button>\n                    <button class=\"btn btn-outline-primary\" onclick=\"cageDetail.showCageSettings()\">\n                        <i class=\"fas fa-cog\"></i>\n                    </button>\n                </div>\n            </div>\n        `;\n    }\n\n    renderProductionForm() {\n        const today = new Date().toISOString().split('T')[0];\n        const todayLog = this.productionLogs.find(log => log.date === today);\n        \n        // Auto-calculate flock age from cycle start date\n        const flockAge = this.calculateFlockAge(today);\n        \n        // Auto-calculate opening birds from previous day's closing stock\n        const openingBirds = this.getOpeningBirds(today);\n\n        return `\n            <div class=\"production-form\">\n                <h5><i class=\"fas fa-plus-circle me-2\"></i>Daily Production Entry - ${this.cage.name}</h5>\n                <div class=\"alert alert-info\">\n                    <i class=\"fas fa-info-circle me-2\"></i>\n                    <strong>Cage-Level Entry:</strong> Only mortality and eggs produced are recorded per cage. \n                    Feed consumption and birds sold are tracked at the cycle level.\n                    <a href=\"#\" onclick=\"router.navigate('cycle-feed', {cycleId: ${this.cage.cycleId}})\" class=\"alert-link ms-2\">\n                        <i class=\"fas fa-wheat-awn me-1\"></i>Manage Feed & Birds Sold\n                    </a>\n                </div>\n                <form id=\"productionForm\">\n                    <div class=\"row\">\n                        <div class=\"col-md-4\">\n                            <div class=\"mb-3\">\n                                <label for=\"logDate\" class=\"form-label\">Date</label>\n                                <input type=\"date\" class=\"form-control\" id=\"logDate\" value=\"${today}\" required>\n                            </div>\n                        </div>\n                        <div class=\"col-md-4\">\n                            <div class=\"mb-3\">\n                                <label for=\"flockAge\" class=\"form-label\">Flock Age (days)</label>\n                                <input type=\"number\" class=\"form-control\" id=\"flockAge\" min=\"1\" \n                                       value=\"${flockAge}\" readonly>\n                                <small class=\"text-muted\">Auto-calculated from cycle start date</small>\n                            </div>\n                        </div>\n                        <div class=\"col-md-4\">\n                            <div class=\"mb-3\">\n                                <label for=\"openingBirds\" class=\"form-label\">Opening Birds</label>\n                                <input type=\"number\" class=\"form-control\" id=\"openingBirds\" min=\"0\" \n                                       value=\"${openingBirds}\" readonly>\n                                <small class=\"text-muted\">Auto-calculated from previous day</small>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-6\">\n                            <div class=\"mb-3\">\n                                <label for=\"mortality\" class=\"form-label\">Mortality</label>\n                                <input type=\"number\" class=\"form-control\" id=\"mortality\" min=\"0\" \n                                       value=\"${todayLog?.mortality || ''}\" required>\n                                <small class=\"text-muted\">Number of birds that died</small>\n                            </div>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <div class=\"mb-3\">\n                                <label for=\"eggsProduced\" class=\"form-label\">Eggs Produced</label>\n                                <input type=\"number\" class=\"form-control\" id=\"eggsProduced\" min=\"0\" \n                                       value=\"${todayLog?.eggsProduced || ''}\" required>\n                                <small class=\"text-muted\">Number of eggs collected from this cage</small>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-md-12\">\n                            <div class=\"mb-3\">\n                                <label for=\"notes\" class=\"form-label\">Notes</label>\n                                <textarea class=\"form-control\" id=\"notes\" rows=\"2\" \n                                          placeholder=\"Any observations or notes for this cage...\">${todayLog?.notes || ''}</textarea>\n                            </div>\n                        </div>\n                    </div>\n                    <button type=\"submit\" class=\"btn btn-primary\">\n                        <i class=\"fas fa-save me-2\"></i>${todayLog ? 'Update' : 'Save'} Daily Data\n                    </button>\n                </form>\n            </div>\n        `;\n    }\n\n    renderStats() {\n        return `\n            <div class=\"detailed-metrics mb-4\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <h6 class=\"mb-0\">Flock-Level Metrics</h6>\n                        <small class=\"text-muted\">Calculated for entire flock across all cages</small>\n                    </div>\n                    <div class=\"card-body\">\n                        <div id=\"metrics-content\">\n                            <div class=\"text-center\">\n                                <div class=\"spinner-border spinner-border-sm\" role=\"status\">\n                                    <span class=\"visually-hidden\">Loading metrics...</span>\n                                </div>\n                                <small class=\"d-block mt-2 text-muted\">Calculating flock metrics...</small>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderCharts() {\n        return `\n            <div class=\"row mb-4\">\n                <div class=\"col-lg-8\">\n                    <div class=\"card\">\n                        <div class=\"card-header\">\n                            <h6 class=\"mb-0\">Production Trend</h6>\n                        </div>\n                        <div class=\"card-body\">\n                            <div class=\"chart-container\">\n                                <canvas id=\"productionChart\"></canvas>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-lg-4\">\n                    <div class=\"card\">\n                        <div class=\"card-header\">\n                            <h6 class=\"mb-0\">Performance Overview</h6>\n                        </div>\n                        <div class=\"card-body\">\n                            <div class=\"chart-container\">\n                                <canvas id=\"performanceChart\"></canvas>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderLogs() {\n        return `\n            <div class=\"row\">\n                <div class=\"col-lg-8\">\n                    <div class=\"card\">\n                        <div class=\"card-header\">\n                            <h6 class=\"mb-0\">Production History</h6>\n                        </div>\n                        <div class=\"card-body p-0\">\n                            <div class=\"table-responsive\">\n                                <table class=\"table table-hover mb-0\">\n                                    <thead>\n                                        <tr>\n                                            <th>Date</th>\n                                            <th>Eggs</th>\n                                            <th>Laying %</th>\n                                            <th>Mortality</th>\n                                            <th>Notes</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        ${this.productionLogs.slice(0, 10).map(log => this.renderProductionLogRow(log)).join('')}\n                                    </tbody>\n                                </table>\n                            </div>\n                            ${this.productionLogs.length === 0 ? '<div class=\"p-4 text-center text-muted\">No production data yet</div>' : ''}\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-lg-4\">\n                    <div class=\"card\">\n                        <div class=\"card-header\">\n                            <h6 class=\"mb-0\">Feed History (Cycle Level)</h6>\n                        </div>\n                        <div class=\"card-body p-0\">\n                            <div class=\"table-responsive\">\n                                <table class=\"table table-hover mb-0\">\n                                    <thead>\n                                        <tr>\n                                            <th>Date</th>\n                                            <th>Amount (kg)</th>\n                                            <th>Cost</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        ${this.feedLogs.slice(0, 10).map(log => this.renderFeedLogRow(log)).join('')}\n                                    </tbody>\n                                </table>\n                            </div>\n                            ${this.feedLogs.length === 0 ? '<div class=\"p-4 text-center text-muted\">No cycle feed data yet. <br><small>Feed is managed at cycle level for entire flock.</small></div>' : ''}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderProductionLogRow(log) {\n        const eggs = log.eggsCollected || log.eggsProduced || 0;\n        const layingPercentage = Calculations.calculateLayingPercentage(\n            eggs, \n            this.cage.currentBirds\n        );\n\n        const date = new Date(log.date);\n        const day = String(date.getDate()).padStart(2, '0');\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const year = date.getFullYear();\n        const formattedDate = `${day}/${month}/${year}`;\n        \n        return `\n            <tr>\n                <td>${formattedDate}</td>\n                <td><strong>${eggs}</strong></td>\n                <td><span class=\"badge bg-${layingPercentage > 80 ? 'success' : layingPercentage > 60 ? 'warning' : 'danger'}\">${layingPercentage.toFixed(1)}%</span></td>\n                <td>${log.mortality || 0}</td>\n                <td><small class=\"text-muted\">${log.notes || '-'}</small></td>\n            </tr>\n        `;\n    }\n\n    renderFeedLogRow(log) {\n        const date = new Date(log.date);\n        const day = String(date.getDate()).padStart(2, '0');\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const year = date.getFullYear();\n        const formattedDate = `${day}/${month}/${year}`;\n        \n        return `\n            <tr>\n                <td>${formattedDate}</td>\n                <td>${log.feedConsumed || log.amount || 0}</td>\n                <td>${log.cost ? '₵' + log.cost.toFixed(2) : '-'}</td>\n            </tr>\n        `;\n    }\n\n    renderError() {\n        const content = `\n            <div class=\"text-center mt-5\">\n                <i class=\"fas fa-exclamation-triangle text-warning\" style=\"font-size: 3rem;\"></i>\n                <h4 class=\"mt-3\">Cage Not Found</h4>\n                <p class=\"text-muted\">The requested cage could not be found.</p>\n                <button class=\"btn btn-primary\" onclick=\"router.navigate('cycles')\">\n                    <i class=\"fas fa-arrow-left me-2\"></i>Back to Cycles\n                </button>\n            </div>\n        `;\n        document.getElementById('app-content').innerHTML = content;\n    }\n\n    async renderProductionChart() {\n        if (this.productionLogs.length === 0) {\n            document.getElementById('productionChart').parentElement.innerHTML = `\n                <div class=\"text-center py-4 text-muted\">\n                    <i class=\"fas fa-chart-line fa-3x mb-3\"></i>\n                    <p>No production data available yet.</p>\n                    <small>Start logging daily production to see trends.</small>\n                </div>\n            `;\n            return;\n        }\n\n        const recentLogs = this.productionLogs.slice(-30); // Last 30 entries\n        \n        const chartData = {\n            labels: recentLogs.map(log => {\n                const date = new Date(log.date);\n                const day = String(date.getDate()).padStart(2, '0');\n                const month = String(date.getMonth() + 1).padStart(2, '0');\n                const year = date.getFullYear();\n                return `${day}/${month}/${year}`;\n            }),\n            datasets: [\n                {\n                    label: 'Eggs Collected',\n                    data: recentLogs.map(log => log.eggsCollected || log.eggsProduced || 0),\n                    color: '#2563eb',\n                    fill: true\n                },\n                {\n                    label: 'Laying %',\n                    data: recentLogs.map(log => \n                        Calculations.calculateLayingPercentage(log.eggsCollected || log.eggsProduced || 0, this.cage.currentBirds)\n                    ),\n                    color: '#10b981',\n                    fill: false\n                }\n            ]\n        };\n\n        setTimeout(() => {\n            chartManager.createLineChart('productionChart', chartData, {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            });\n        }, 100);\n    }\n\n    async renderPerformanceChart() {\n        if (this.productionLogs.length === 0) {\n            document.getElementById('performanceChart').parentElement.innerHTML = `\n                <div class=\"text-center py-4 text-muted\">\n                    <i class=\"fas fa-chart-pie fa-3x mb-3\"></i>\n                    <p>No performance data available yet.</p>\n                    <small>Start logging production to see performance overview.</small>\n                </div>\n            `;\n            return;\n        }\n\n        const totalEggs = this.productionLogs.reduce((sum, log) => sum + (log.eggsCollected || 0), 0);\n        const avgLayingRate = this.productionLogs.length ? \n            this.productionLogs.reduce((sum, log) => \n                sum + Calculations.calculateLayingPercentage(log.eggsCollected || 0, this.cage.currentBirds), 0\n            ) / this.productionLogs.length : 0;\n\n        // Calculate performance metrics for the doughnut chart\n        const excellent = avgLayingRate > 80 ? avgLayingRate : 0;\n        const good = avgLayingRate > 60 && avgLayingRate <= 80 ? avgLayingRate : 0;\n        const average = avgLayingRate > 40 && avgLayingRate <= 60 ? avgLayingRate : 0;\n        const belowAvg = avgLayingRate <= 40 ? avgLayingRate : 0;\n\n        const chartData = {\n            labels: ['Performance Rating'],\n            datasets: [{\n                label: 'Performance Level',\n                data: [avgLayingRate, 100 - avgLayingRate],\n                backgroundColor: [\n                    avgLayingRate > 80 ? '#10b981' : \n                    avgLayingRate > 60 ? '#f59e0b' : \n                    avgLayingRate > 40 ? '#f97316' : '#ef4444',\n                    '#e5e7eb'\n                ],\n                borderWidth: 0\n            }]\n        };\n\n        setTimeout(() => {\n            chartManager.createDoughnutChart('performanceChart', chartData, {\n                plugins: {\n                    legend: {\n                        display: false\n                    },\n                    tooltip: {\n                        callbacks: {\n                            label: function(context) {\n                                return `Laying Rate: ${avgLayingRate.toFixed(1)}%`;\n                            }\n                        }\n                    }\n                }\n            });\n            \n            // Add performance text overlay\n            const canvas = document.getElementById('performanceChart');\n            const container = canvas.parentElement;\n            const overlay = document.createElement('div');\n            overlay.style.cssText = `\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-50%, -50%);\n                text-align: center;\n                pointer-events: none;\n            `;\n            overlay.innerHTML = `\n                <div style=\"font-size: 18px; font-weight: bold; color: ${\n                    avgLayingRate > 80 ? '#10b981' : \n                    avgLayingRate > 60 ? '#f59e0b' : \n                    avgLayingRate > 40 ? '#f97316' : '#ef4444'\n                }\">\n                    ${avgLayingRate.toFixed(1)}%\n                </div>\n                <div style=\"font-size: 12px; color: #6b7280;\">\n                    ${avgLayingRate > 80 ? 'Excellent' : \n                      avgLayingRate > 60 ? 'Good' : \n                      avgLayingRate > 40 ? 'Average' : 'Below Average'}\n                </div>\n            `;\n            container.style.position = 'relative';\n            container.appendChild(overlay);\n        }, 100);\n    }\n\n    getTodayFeedLog() {\n        const today = new Date().toISOString().split('T')[0];\n        return this.feedLogs.find(log => log.date === today);\n    }\n\n    getStatusBadgeClass(status) {\n        const classes = {\n            'active': 'bg-success',\n            'maintenance': 'bg-warning',\n            'inactive': 'bg-secondary',\n            'cleaning': 'bg-info'\n        };\n        return classes[status] || 'bg-secondary';\n    }\n\n    async handleProductionSubmit(event) {\n        event.preventDefault();\n        \n        const date = document.getElementById('logDate').value;\n        const flockAge = parseInt(document.getElementById('flockAge').value);\n        const openingBirds = parseInt(document.getElementById('openingBirds').value);\n        const mortality = parseInt(document.getElementById('mortality').value) || 0;\n        const eggsProduced = parseInt(document.getElementById('eggsProduced').value) || 0;\n        const notes = document.getElementById('notes').value;\n        \n        const formData = {\n            cageId: this.cage.id,\n            cycleId: this.cage.cycleId,\n            date: date,\n            flockAge: flockAge,\n            openingBirds: openingBirds,\n            mortality: mortality,\n            birdsSold: 0, // Birds sold tracked at cycle level\n            eggsProduced: eggsProduced,\n            eggsCollected: eggsProduced,\n            closingBirds: openingBirds - mortality,\n            currentFeed: 0, // Feed tracked at cycle level\n            notes: notes,\n            updatedAt: new Date().toISOString()\n        };\n\n        try {\n            // Check if log exists for this date\n            const existingLog = this.productionLogs.find(log => log.date === formData.date);\n            \n            if (existingLog) {\n                formData.id = existingLog.id;\n                formData.createdAt = existingLog.createdAt;\n                await db.update('productionLogs', formData);\n            } else {\n                formData.createdAt = new Date().toISOString();\n                await db.add('productionLogs', formData);\n            }\n\n            // Update cage current birds count\n            this.cage.currentBirds = formData.closingBirds;\n            this.cage.updatedAt = new Date().toISOString();\n            await db.update('cages', this.cage);\n\n            this.showToast('Daily production data saved successfully!', 'success');\n            await this.init(this.cage.id); // Refresh the view\n        } catch (error) {\n            console.error('Error saving production data:', error);\n            this.showToast('Error saving data. Please try again.', 'error');\n        }\n    }\n\n    async updateCageTotals() {\n        const totalEggs = this.productionLogs.reduce((sum, log) => sum + (log.eggsCollected || 0), 0);\n        const totalFeed = this.feedLogs.reduce((sum, log) => sum + (log.amount || 0), 0);\n        const totalMortality = this.productionLogs.reduce((sum, log) => sum + (log.mortality || 0), 0);\n\n        this.cage.totalEggs = totalEggs;\n        this.cage.totalFeed = totalFeed;\n        this.cage.mortality = totalMortality;\n        this.cage.currentBirds = Math.max(0, (this.cage.currentBirds || 0) - totalMortality);\n        this.cage.updatedAt = new Date().toISOString();\n\n        await db.update('cages', this.cage);\n    }\n\n    calculateFlockAge(date) {\n        if (!this.cycle || !this.cycle.startDate) return 1;\n        const startDate = new Date(this.cycle.startDate);\n        const currentDate = new Date(date);\n        const diffTime = Math.abs(currentDate - startDate);\n        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    }\n\n    getOpeningBirds(date) {\n        // Get the previous day's closing birds\n        const currentDate = new Date(date);\n        const previousDate = new Date(currentDate);\n        previousDate.setDate(previousDate.getDate() - 1);\n        const previousDateStr = previousDate.toISOString().split('T')[0];\n        \n        // Find the previous day's log\n        const previousLog = this.productionLogs.find(log => log.date === previousDateStr);\n        \n        if (previousLog) {\n            return previousLog.closingBirds || previousLog.openingBirds;\n        }\n        \n        // If no previous log, use cage's current birds\n        return this.cage.currentBirds || 0;\n    }\n\n    async calculateDetailedMetrics() {\n        // Get all production logs for the entire cycle (all cages)\n        const allProductionLogs = await db.getByIndex('productionLogs', 'cycleId', this.cage.cycleId);\n        const allFeedLogs = await db.getByIndex('feedLogs', 'cycleId', this.cage.cycleId);\n        \n        const logs = allProductionLogs.sort((a, b) => new Date(a.date) - new Date(b.date));\n        const today = new Date().toISOString().split('T')[0];\n        \n        if (logs.length === 0) {\n            return {\n                ageInDays: 0,\n                ageInWeeks: 0,\n                closingBirds: 0,\n                cumMortality: 0,\n                cumMortalityPercent: 0,\n                currentProductionPercent: 0,\n                cumProductionEggs: 0,\n                henHouseProduction: 0,\n                currentFeedPerBird: 0,\n                cumFeedPerBird: 0,\n                currentFeedPerEgg: 0,\n                cumFeedPerEgg: 0\n            };\n        }\n\n        // Calculate flock age from cycle start date\n        const ageInDays = this.calculateFlockAge(today);\n        const ageInWeeks = Math.floor(ageInDays / 7);\n        \n        // Get all cages for this cycle to calculate total flock size\n        const allCages = await db.getByIndex('cages', 'cycleId', this.cage.cycleId);\n        const totalFlockSize = allCages.reduce((sum, cage) => sum + (cage.initialBirds || 0), 0);\n        const currentFlockSize = allCages.reduce((sum, cage) => sum + (cage.currentBirds || 0), 0);\n        \n        // Calculate cumulative mortality for entire flock\n        const cumMortality = logs.reduce((sum, log) => sum + (log.mortality || 0), 0);\n        const cumMortalityPercent = totalFlockSize > 0 ? (cumMortality / totalFlockSize * 100) : 0;\n        \n        // Calculate production metrics for entire flock\n        const cumProductionEggs = logs.reduce((sum, log) => sum + (log.eggsCollected || 0), 0);\n        \n        // Current production percentage (today's total eggs vs current flock size)\n        const todayLogs = logs.filter(log => log.date === today);\n        const todayEggs = todayLogs.reduce((sum, log) => sum + (log.eggsCollected || 0), 0);\n        const currentProductionPercent = currentFlockSize > 0 ? (todayEggs / currentFlockSize * 100) : 0;\n        \n        // Hen house production (eggs per bird from 19th week - 133 days)\n        const layingStartAge = 133; // 19 weeks\n        const layingLogs = logs.filter(log => (log.flockAge || 0) >= layingStartAge);\n        const layingEggs = layingLogs.reduce((sum, log) => sum + (log.eggsCollected || 0), 0);\n        const layingDays = layingLogs.length > 0 ? \n            Math.max(1, Math.floor(layingLogs.length / allCages.length)) : 0;\n        const avgBirdsInLayingPeriod = layingDays > 0 ? \n            layingLogs.reduce((sum, log) => sum + (log.openingBirds || 0), 0) / layingLogs.length : 0;\n        const henHouseProduction = avgBirdsInLayingPeriod > 0 ? layingEggs / avgBirdsInLayingPeriod : 0;\n        \n        // Feed calculations for entire flock\n        const cumFeed = allFeedLogs.reduce((sum, log) => sum + (log.amount || 0), 0);\n        const todayFeed = allFeedLogs.filter(log => log.date === today)\n            .reduce((sum, log) => sum + (log.amount || 0), 0);\n        \n        const currentFeedPerBird = currentFlockSize > 0 ? (todayFeed / currentFlockSize) : 0;\n        const cumFeedPerBird = totalFlockSize > 0 ? (cumFeed / totalFlockSize) : 0;\n        \n        const currentFeedPerEgg = todayEggs > 0 ? (todayFeed * 1000) / todayEggs : 0; // grams\n        const cumFeedPerEgg = cumProductionEggs > 0 ? (cumFeed * 1000) / cumProductionEggs : 0; // grams\n\n        return {\n            ageInDays: ageInDays,\n            ageInWeeks: ageInWeeks,\n            closingBirds: currentFlockSize,\n            cumMortality: cumMortality,\n            cumMortalityPercent: cumMortalityPercent.toFixed(2),\n            currentProductionPercent: currentProductionPercent.toFixed(1),\n            cumProductionEggs: cumProductionEggs,\n            henHouseProduction: henHouseProduction.toFixed(1),\n            currentFeedPerBird: currentFeedPerBird.toFixed(2),\n            cumFeedPerBird: cumFeedPerBird.toFixed(2),\n            currentFeedPerEgg: currentFeedPerEgg.toFixed(1),\n            cumFeedPerEgg: cumFeedPerEgg.toFixed(1)\n        };\n    }\n\n    showToast(message, type = 'info') {\n        const toast = document.getElementById('toast');\n        const toastBody = toast.querySelector('.toast-body');\n        \n        toastBody.textContent = message;\n        \n        const icon = toast.querySelector('.fas');\n        icon.className = type === 'success' ? 'fas fa-check-circle text-success me-2' : \n                        type === 'error' ? 'fas fa-exclamation-circle text-danger me-2' : \n                        'fas fa-info-circle text-primary me-2';\n        \n        const bsToast = new bootstrap.Toast(toast);\n        bsToast.show();\n    }\n}\n\n// Global cage detail instance\nconst cageDetail = new CageDetail();\n\n// Event listeners\ndocument.addEventListener('DOMContentLoaded', () => {\n    document.addEventListener('submit', (e) => {\n        if (e.target.id === 'productionForm') {\n            cageDetail.handleProductionSubmit(e);\n        }\n    });\n});","size_bytes":32683},"js/components/cage-manager.js":{"content":"class CageManager {\n    constructor() {\n        this.currentCycle = null;\n        this.cages = [];\n    }\n\n    async init(cycleId) {\n        this.currentCycle = await db.get('cycles', cycleId);\n        this.cages = await db.getByIndex('cages', 'cycleId', cycleId);\n        this.render();\n    }\n\n    render() {\n        const content = `\n            <div class=\"cage-manager fade-in\">\n                <div class=\"d-flex justify-content-between align-items-center mb-4\">\n                    <div>\n                        <h2>Cage Management</h2>\n                        <p class=\"text-muted mb-0\">Cycle: ${this.currentCycle?.name || 'Unknown'}</p>\n                    </div>\n                    <button class=\"btn btn-primary\" onclick=\"cageManager.showAddCageModal()\">\n                        <i class=\"fas fa-plus me-2\"></i>Add Cage\n                    </button>\n                </div>\n\n                <div class=\"row\" id=\"cages-grid\">\n                    ${this.renderCages()}\n                </div>\n\n                ${this.cages.length === 0 ? this.renderEmptyState() : ''}\n            </div>\n        `;\n\n        document.getElementById('app-content').innerHTML = content;\n    }\n\n    renderCages() {\n        return this.cages.map(cage => `\n            <div class=\"col-md-6 col-lg-4 mb-4\">\n                <div class=\"card cage-item h-100\" onclick=\"router.navigate('cage-detail', {id: ${cage.id}})\">\n                    <div class=\"card-body\">\n                        <div class=\"d-flex justify-content-between align-items-start mb-3\">\n                            <h5 class=\"card-title mb-0\">${cage.name}</h5>\n                            <span class=\"badge ${this.getStatusBadgeClass(cage.status)}\">${cage.status}</span>\n                        </div>\n                        \n                        <div class=\"row text-center\">\n                            <div class=\"col-6\">\n                                <div class=\"stats-value text-primary\">${cage.currentBirds || 0}</div>\n                                <div class=\"stats-label\">Birds</div>\n                            </div>\n                            <div class=\"col-6\">\n                                <div class=\"stats-value text-success\">${cage.totalEggs || 0}</div>\n                                <div class=\"stats-label\">Total Eggs</div>\n                            </div>\n                        </div>\n\n                        <div class=\"mt-3\">\n                            <small class=\"text-muted\">\n                                <i class=\"fas fa-calendar me-1\"></i>\n                                Created: ${this.formatDate(cage.createdAt)}\n                            </small>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    renderEmptyState() {\n        return `\n            <div class=\"col-12\">\n                <div class=\"empty-state\">\n                    <i class=\"fas fa-archive\"></i>\n                    <h4>No Cages Yet</h4>\n                    <p>Start by adding your first cage to begin tracking production.</p>\n                    <button class=\"btn btn-primary\" onclick=\"cageManager.showAddCageModal()\">\n                        <i class=\"fas fa-plus me-2\"></i>Add First Cage\n                    </button>\n                </div>\n            </div>\n        `;\n    }\n\n    getStatusBadgeClass(status) {\n        const classes = {\n            'active': 'bg-success',\n            'maintenance': 'bg-warning',\n            'inactive': 'bg-secondary',\n            'cleaning': 'bg-info'\n        };\n        return classes[status] || 'bg-secondary';\n    }\n\n    showAddCageModal() {\n        const modal = `\n            <div class=\"modal fade\" id=\"addCageModal\" tabindex=\"-1\">\n                <div class=\"modal-dialog\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\">Add New Cage</h5>\n                            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                        </div>\n                        <form id=\"addCageForm\">\n                            <div class=\"modal-body\">\n                                <div class=\"mb-3\">\n                                    <label for=\"cageName\" class=\"form-label\">Cage Name</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"cageName\" required>\n                                </div>\n                                \n                                <div class=\"mb-3\">\n                                    <label for=\"cageCapacity\" class=\"form-label\">Capacity (birds)</label>\n                                    <input type=\"number\" class=\"form-control\" id=\"cageCapacity\" min=\"1\" required>\n                                </div>\n\n                                <div class=\"mb-3\">\n                                    <label for=\"initialBirds\" class=\"form-label\">Initial Bird Count</label>\n                                    <input type=\"number\" class=\"form-control\" id=\"initialBirds\" min=\"0\" required>\n                                </div>\n\n                                <div class=\"mb-3\">\n                                    <label for=\"cageType\" class=\"form-label\">Cage Type</label>\n                                    <select class=\"form-select\" id=\"cageType\" required>\n                                        <option value=\"\">Select type...</option>\n                                        <option value=\"layer\">Layer Cage</option>\n                                        <option value=\"broiler\">Broiler Cage</option>\n                                        <option value=\"breeder\">Breeder Cage</option>\n                                        <option value=\"growing\">Growing Cage</option>\n                                    </select>\n                                </div>\n\n                                <div class=\"mb-3\">\n                                    <label for=\"cageLocation\" class=\"form-label\">Location</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"cageLocation\" placeholder=\"e.g., Building A, Section 1\">\n                                </div>\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n                                <button type=\"submit\" class=\"btn btn-primary\">Add Cage</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.getElementById('modal-container').innerHTML = modal;\n        const modalElement = new bootstrap.Modal(document.getElementById('addCageModal'));\n        modalElement.show();\n\n        document.getElementById('addCageForm').addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.handleAddCage();\n            modalElement.hide();\n        });\n    }\n\n    async handleAddCage() {\n        const formData = {\n            name: document.getElementById('cageName').value,\n            capacity: parseInt(document.getElementById('cageCapacity').value),\n            currentBirds: parseInt(document.getElementById('initialBirds').value),\n            type: document.getElementById('cageType').value,\n            location: document.getElementById('cageLocation').value,\n            cycleId: this.currentCycle.id,\n            status: 'active',\n            totalEggs: 0,\n            totalFeed: 0,\n            mortality: 0,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n\n        try {\n            await db.add('cages', formData);\n            this.showToast('Cage added successfully!', 'success');\n            await this.init(this.currentCycle.id); // Refresh the view\n        } catch (error) {\n            console.error('Error adding cage:', error);\n            this.showToast('Error adding cage. Please try again.', 'error');\n        }\n    }\n\n    async deleteCage(cageId) {\n        if (!confirm('Are you sure you want to delete this cage? All associated data will be lost.')) {\n            return;\n        }\n\n        try {\n            // Delete cage and all associated logs\n            await db.delete('cages', cageId);\n            \n            const productionLogs = await db.getByIndex('productionLogs', 'cageId', cageId);\n            const feedLogs = await db.getByIndex('feedLogs', 'cageId', cageId);\n            \n            for (const log of productionLogs) {\n                await db.delete('productionLogs', log.id);\n            }\n            \n            for (const log of feedLogs) {\n                await db.delete('feedLogs', log.id);\n            }\n\n            this.showToast('Cage deleted successfully!', 'success');\n            await this.init(this.currentCycle.id); // Refresh the view\n        } catch (error) {\n            console.error('Error deleting cage:', error);\n            this.showToast('Error deleting cage. Please try again.', 'error');\n        }\n    }\n\n    async updateCageStatus(cageId, newStatus) {\n        try {\n            const cage = await db.get('cages', cageId);\n            cage.status = newStatus;\n            cage.updatedAt = new Date().toISOString();\n            \n            await db.update('cages', cage);\n            this.showToast('Cage status updated!', 'success');\n            await this.init(this.currentCycle.id); // Refresh the view\n        } catch (error) {\n            console.error('Error updating cage status:', error);\n            this.showToast('Error updating cage status. Please try again.', 'error');\n        }\n    }\n\n    formatDate(date) {\n        const d = new Date(date);\n        const day = String(d.getDate()).padStart(2, '0');\n        const month = String(d.getMonth() + 1).padStart(2, '0');\n        const year = d.getFullYear();\n        return `${day}/${month}/${year}`;\n    }\n\n    showToast(message, type = 'info') {\n        const toast = document.getElementById('toast');\n        const toastBody = toast.querySelector('.toast-body');\n        \n        toastBody.textContent = message;\n        \n        // Update icon based on type\n        const icon = toast.querySelector('.fas');\n        icon.className = type === 'success' ? 'fas fa-check-circle text-success me-2' : \n                        type === 'error' ? 'fas fa-exclamation-circle text-danger me-2' : \n                        'fas fa-info-circle text-primary me-2';\n        \n        const bsToast = new bootstrap.Toast(toast);\n        bsToast.show();\n    }\n\n    async searchCages(query) {\n        const filtered = this.cages.filter(cage => \n            cage.name.toLowerCase().includes(query.toLowerCase()) ||\n            cage.location?.toLowerCase().includes(query.toLowerCase()) ||\n            cage.type.toLowerCase().includes(query.toLowerCase())\n        );\n        \n        document.getElementById('cages-grid').innerHTML = \n            filtered.map(cage => this.renderCageCard(cage)).join('');\n    }\n\n    async exportCageData() {\n        try {\n            const cageData = this.cages.map(cage => ({\n                name: cage.name,\n                type: cage.type,\n                capacity: cage.capacity,\n                currentBirds: cage.currentBirds,\n                status: cage.status,\n                location: cage.location,\n                totalEggs: cage.totalEggs,\n                totalFeed: cage.totalFeed,\n                mortality: cage.mortality,\n                createdAt: cage.createdAt\n            }));\n\n            const dataStr = JSON.stringify(cageData, null, 2);\n            const dataBlob = new Blob([dataStr], {type: 'application/json'});\n            \n            const link = document.createElement('a');\n            link.href = URL.createObjectURL(dataBlob);\n            link.download = `cage-data-${this.currentCycle.name}-${new Date().toISOString().split('T')[0]}.json`;\n            link.click();\n            \n            this.showToast('Cage data exported successfully!', 'success');\n        } catch (error) {\n            console.error('Error exporting cage data:', error);\n            this.showToast('Error exporting data. Please try again.', 'error');\n        }\n    }\n}\n\n// Global cage manager instance\nconst cageManager = new CageManager();","size_bytes":12332},"js/components/cycle-feed-manager.js":{"content":"class CycleFeedManager {\n    constructor() {\n        this.cycle = null;\n        this.feedLogs = [];\n        this.birdsSoldLogs = [];\n    }\n\n    async init(cycleId) {\n        try {\n            this.cycle = await db.get('cycles', parseInt(cycleId));\n            if (!this.cycle) {\n                throw new Error('Cycle not found');\n            }\n\n            // Load feed logs for this cycle\n            this.feedLogs = await db.getByIndex('feedLogs', 'cycleId', this.cycle.id);\n            \n            // Load birds sold logs (from production logs)\n            const allProductionLogs = await db.getByIndex('productionLogs', 'cycleId', this.cycle.id);\n            this.birdsSoldLogs = allProductionLogs.filter(log => log.birdsSold > 0);\n            \n            // Sort logs by date (newest first)\n            this.feedLogs.sort((a, b) => new Date(b.date) - new Date(a.date));\n            this.birdsSoldLogs.sort((a, b) => new Date(b.date) - new Date(a.date));\n\n            this.render();\n        } catch (error) {\n            console.error('Error initializing cycle feed manager:', error);\n            this.renderError();\n        }\n    }\n\n    render() {\n        const content = `\n            <div class=\"cycle-feed-manager fade-in\">\n                ${this.renderHeader()}\n                ${this.renderTabs()}\n                ${this.renderTabContent()}\n            </div>\n        `;\n\n        document.getElementById('app-content').innerHTML = content;\n    }\n\n    renderHeader() {\n        return `\n            <div class=\"d-flex justify-content-between align-items-center mb-4\">\n                <div>\n                    <h2>Cycle Feed & Birds Management</h2>\n                    <p class=\"text-muted mb-0\">\n                        ${this.cycle?.name || 'Unknown Cycle'} • \n                        Feed consumption and birds sold for entire flock\n                    </p>\n                </div>\n                <div>\n                    <button class=\"btn btn-outline-secondary\" onclick=\"router.navigate('cycles')\">\n                        <i class=\"fas fa-arrow-left me-2\"></i>Back to Cycles\n                    </button>\n                </div>\n            </div>\n        `;\n    }\n\n    renderTabs() {\n        return `\n            <ul class=\"nav nav-tabs\" id=\"managementTabs\" role=\"tablist\">\n                <li class=\"nav-item\" role=\"presentation\">\n                    <button class=\"nav-link active\" id=\"feed-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#feed-panel\" type=\"button\" role=\"tab\">\n                        <i class=\"fas fa-wheat-awn me-2\"></i>Feed Management\n                    </button>\n                </li>\n                <li class=\"nav-item\" role=\"presentation\">\n                    <button class=\"nav-link\" id=\"birds-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#birds-panel\" type=\"button\" role=\"tab\">\n                        <i class=\"fas fa-dove me-2\"></i>Birds Sold\n                    </button>\n                </li>\n            </ul>\n        `;\n    }\n\n    renderTabContent() {\n        return `\n            <div class=\"tab-content\" id=\"managementTabContent\">\n                <div class=\"tab-pane fade show active\" id=\"feed-panel\" role=\"tabpanel\">\n                    ${this.renderFeedManagement()}\n                </div>\n                <div class=\"tab-pane fade\" id=\"birds-panel\" role=\"tabpanel\">\n                    ${this.renderBirdsManagement()}\n                </div>\n            </div>\n        `;\n    }\n\n    renderFeedManagement() {\n        const today = new Date().toISOString().split('T')[0];\n        const todayFeed = this.feedLogs.find(log => log.date === today);\n\n        return `\n            <div class=\"mt-4\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <h5 class=\"mb-0\">Daily Feed Entry</h5>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"alert alert-info\">\n                            <i class=\"fas fa-info-circle me-2\"></i>\n                            <strong>Cycle-Level Feed:</strong> Enter total feed consumed by the entire flock for the day.\n                        </div>\n                        <form id=\"feedForm\">\n                            <div class=\"row\">\n                                <div class=\"col-md-4\">\n                                    <div class=\"mb-3\">\n                                        <label for=\"feedDate\" class=\"form-label\">Date</label>\n                                        <input type=\"date\" class=\"form-control\" id=\"feedDate\" value=\"${today}\" required>\n                                    </div>\n                                </div>\n                                <div class=\"col-md-4\">\n                                    <div class=\"mb-3\">\n                                        <label for=\"feedAmount\" class=\"form-label\">Feed Amount (kg)</label>\n                                        <input type=\"number\" class=\"form-control\" id=\"feedAmount\" step=\"0.1\" min=\"0\" \n                                               value=\"${todayFeed?.amount || ''}\" required>\n                                        <small class=\"text-muted\">Total feed consumed by entire flock</small>\n                                    </div>\n                                </div>\n                                <div class=\"col-md-4\">\n                                    <div class=\"mb-3\">\n                                        <label for=\"feedCost\" class=\"form-label\">Feed Cost (₵)</label>\n                                        <input type=\"number\" class=\"form-control\" id=\"feedCost\" step=\"0.01\" min=\"0\" \n                                               value=\"${todayFeed?.cost || ''}\">\n                                        <small class=\"text-muted\">Cost of feed for this day</small>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-md-12\">\n                                    <div class=\"mb-3\">\n                                        <label for=\"feedNotes\" class=\"form-label\">Notes</label>\n                                        <textarea class=\"form-control\" id=\"feedNotes\" rows=\"2\" \n                                                  placeholder=\"Feed type, supplier, observations...\">${todayFeed?.notes || ''}</textarea>\n                                    </div>\n                                </div>\n                            </div>\n                            <button type=\"submit\" class=\"btn btn-primary\">\n                                <i class=\"fas fa-save me-2\"></i>${todayFeed ? 'Update' : 'Save'} Feed Data\n                            </button>\n                        </form>\n                    </div>\n                </div>\n\n                <div class=\"card mt-4\">\n                    <div class=\"card-header\">\n                        <h5 class=\"mb-0\">Feed History</h5>\n                    </div>\n                    <div class=\"card-body p-0\">\n                        <div class=\"table-responsive\">\n                            <table class=\"table table-hover mb-0\">\n                                <thead>\n                                    <tr>\n                                        <th>Date</th>\n                                        <th>Amount (kg)</th>\n                                        <th>Cost (₵)</th>\n                                        <th>Notes</th>\n                                        <th>Actions</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    ${this.feedLogs.slice(0, 20).map(log => this.renderFeedLogRow(log)).join('')}\n                                </tbody>\n                            </table>\n                        </div>\n                        ${this.feedLogs.length === 0 ? '<div class=\"p-4 text-center text-muted\">No feed data yet</div>' : ''}\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderBirdsManagement() {\n        const today = new Date().toISOString().split('T')[0];\n\n        return `\n            <div class=\"mt-4\">\n                <div class=\"card\">\n                    <div class=\"card-header\">\n                        <h5 class=\"mb-0\">Birds Sold Entry</h5>\n                    </div>\n                    <div class=\"card-body\">\n                        <div class=\"alert alert-info\">\n                            <i class=\"fas fa-info-circle me-2\"></i>\n                            <strong>Cycle-Level Birds Sold:</strong> Enter total birds sold from the entire flock for the day.\n                        </div>\n                        <form id=\"birdsForm\">\n                            <div class=\"row\">\n                                <div class=\"col-md-4\">\n                                    <div class=\"mb-3\">\n                                        <label for=\"birdsDate\" class=\"form-label\">Date</label>\n                                        <input type=\"date\" class=\"form-control\" id=\"birdsDate\" value=\"${today}\" required>\n                                    </div>\n                                </div>\n                                <div class=\"col-md-4\">\n                                    <div class=\"mb-3\">\n                                        <label for=\"birdsCount\" class=\"form-label\">Number of Birds</label>\n                                        <input type=\"number\" class=\"form-control\" id=\"birdsCount\" min=\"0\" required>\n                                        <small class=\"text-muted\">Total birds sold from entire flock</small>\n                                    </div>\n                                </div>\n                                <div class=\"col-md-4\">\n                                    <div class=\"mb-3\">\n                                        <label for=\"birdsPrice\" class=\"form-label\">Price per Bird (₵)</label>\n                                        <input type=\"number\" class=\"form-control\" id=\"birdsPrice\" step=\"0.01\" min=\"0\">\n                                        <small class=\"text-muted\">Selling price per bird</small>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-md-6\">\n                                    <div class=\"mb-3\">\n                                        <label for=\"birdsCustomer\" class=\"form-label\">Customer</label>\n                                        <input type=\"text\" class=\"form-control\" id=\"birdsCustomer\" \n                                               placeholder=\"Customer name or company\">\n                                    </div>\n                                </div>\n                                <div class=\"col-md-6\">\n                                    <div class=\"mb-3\">\n                                        <label for=\"birdsNotes\" class=\"form-label\">Notes</label>\n                                        <textarea class=\"form-control\" id=\"birdsNotes\" rows=\"2\" \n                                                  placeholder=\"Reason for sale, observations...\"></textarea>\n                                    </div>\n                                </div>\n                            </div>\n                            <button type=\"submit\" class=\"btn btn-primary\">\n                                <i class=\"fas fa-save me-2\"></i>Save Birds Sold Data\n                            </button>\n                        </form>\n                    </div>\n                </div>\n\n                <div class=\"card mt-4\">\n                    <div class=\"card-header\">\n                        <h5 class=\"mb-0\">Birds Sold History</h5>\n                    </div>\n                    <div class=\"card-body p-0\">\n                        <div class=\"table-responsive\">\n                            <table class=\"table table-hover mb-0\">\n                                <thead>\n                                    <tr>\n                                        <th>Date</th>\n                                        <th>Birds Sold</th>\n                                        <th>Price per Bird</th>\n                                        <th>Total Value</th>\n                                        <th>Customer</th>\n                                        <th>Notes</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    ${this.birdsSoldLogs.slice(0, 20).map(log => this.renderBirdsLogRow(log)).join('')}\n                                </tbody>\n                            </table>\n                        </div>\n                        ${this.birdsSoldLogs.length === 0 ? '<div class=\"p-4 text-center text-muted\">No birds sold data yet</div>' : ''}\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderFeedLogRow(log) {\n        const date = new Date(log.date);\n        const day = String(date.getDate()).padStart(2, '0');\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const year = date.getFullYear();\n        const formattedDate = `${day}/${month}/${year}`;\n        \n        return `\n            <tr>\n                <td>${formattedDate}</td>\n                <td>${log.amount} kg</td>\n                <td>${log.cost ? '₵' + log.cost.toFixed(2) : '-'}</td>\n                <td>${log.notes || '-'}</td>\n                <td>\n                    <button class=\"btn btn-sm btn-outline-danger\" onclick=\"cycleFeedManager.deleteFeedLog(${log.id})\">\n                        <i class=\"fas fa-trash\"></i>\n                    </button>\n                </td>\n            </tr>\n        `;\n    }\n\n    renderBirdsLogRow(log) {\n        const date = new Date(log.date);\n        const day = String(date.getDate()).padStart(2, '0');\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const year = date.getFullYear();\n        const formattedDate = `${day}/${month}/${year}`;\n        \n        const totalValue = (log.birdsSold || 0) * (log.birdPrice || 0);\n        return `\n            <tr>\n                <td>${formattedDate}</td>\n                <td>${log.birdsSold || 0}</td>\n                <td>${log.birdPrice ? '₵' + log.birdPrice.toFixed(2) : '-'}</td>\n                <td>${totalValue ? '₵' + totalValue.toFixed(2) : '-'}</td>\n                <td>${log.customer || '-'}</td>\n                <td>${log.notes || '-'}</td>\n            </tr>\n        `;\n    }\n\n    renderError() {\n        document.getElementById('app-content').innerHTML = `\n            <div class=\"alert alert-danger\">\n                <i class=\"fas fa-exclamation-triangle me-2\"></i>\n                Error loading cycle feed manager. Please try again.\n            </div>\n        `;\n    }\n\n    async handleFeedSubmit(event) {\n        event.preventDefault();\n        \n        const feedData = {\n            cycleId: this.cycle.id,\n            date: document.getElementById('feedDate').value,\n            amount: parseFloat(document.getElementById('feedAmount').value) || 0,\n            cost: parseFloat(document.getElementById('feedCost').value) || 0,\n            notes: document.getElementById('feedNotes').value.trim(),\n            updatedAt: new Date().toISOString()\n        };\n\n        try {\n            const existingLog = this.feedLogs.find(log => log.date === feedData.date);\n            \n            if (existingLog) {\n                feedData.id = existingLog.id;\n                feedData.createdAt = existingLog.createdAt;\n                await db.update('feedLogs', feedData);\n            } else {\n                feedData.createdAt = new Date().toISOString();\n                await db.add('feedLogs', feedData);\n            }\n\n            this.showToast('Feed data saved successfully!', 'success');\n            await this.init(this.cycle.id);\n        } catch (error) {\n            console.error('Error saving feed data:', error);\n            this.showToast('Error saving feed data. Please try again.', 'error');\n        }\n    }\n\n    async handleBirdsSubmit(event) {\n        event.preventDefault();\n        \n        const birdsData = {\n            cycleId: this.cycle.id,\n            date: document.getElementById('birdsDate').value,\n            birdsSold: parseInt(document.getElementById('birdsCount').value) || 0,\n            birdPrice: parseFloat(document.getElementById('birdsPrice').value) || 0,\n            customer: document.getElementById('birdsCustomer').value.trim(),\n            notes: document.getElementById('birdsNotes').value.trim(),\n            updatedAt: new Date().toISOString()\n        };\n\n        try {\n            // This will be stored as a special production log entry\n            const existingLog = await db.getByIndex('productionLogs', 'date', birdsData.date);\n            const flockBirdsLog = existingLog.find(log => log.cycleId === this.cycle.id && log.birdsSold > 0);\n            \n            if (flockBirdsLog) {\n                // Update existing birds sold log\n                flockBirdsLog.birdsSold = birdsData.birdsSold;\n                flockBirdsLog.birdPrice = birdsData.birdPrice;\n                flockBirdsLog.customer = birdsData.customer;\n                flockBirdsLog.notes = birdsData.notes;\n                flockBirdsLog.updatedAt = new Date().toISOString();\n                await db.update('productionLogs', flockBirdsLog);\n            } else {\n                // Create new birds sold log\n                const newLog = {\n                    ...birdsData,\n                    cageId: 0, // Cycle-level entry\n                    flockAge: 0,\n                    openingBirds: 0,\n                    mortality: 0,\n                    eggsProduced: 0,\n                    eggsCollected: 0,\n                    closingBirds: 0,\n                    currentFeed: 0,\n                    createdAt: new Date().toISOString()\n                };\n                await db.add('productionLogs', newLog);\n            }\n\n            this.showToast('Birds sold data saved successfully!', 'success');\n            await this.init(this.cycle.id);\n        } catch (error) {\n            console.error('Error saving birds sold data:', error);\n            this.showToast('Error saving birds sold data. Please try again.', 'error');\n        }\n    }\n\n    async deleteFeedLog(logId) {\n        if (confirm('Are you sure you want to delete this feed log?')) {\n            try {\n                await db.delete('feedLogs', logId);\n                this.showToast('Feed log deleted successfully!', 'success');\n                await this.init(this.cycle.id);\n            } catch (error) {\n                console.error('Error deleting feed log:', error);\n                this.showToast('Error deleting feed log. Please try again.', 'error');\n            }\n        }\n    }\n\n    showToast(message, type = 'info') {\n        // Create toast notification\n        const toastContainer = document.getElementById('toast-container') || document.body;\n        const toast = document.createElement('div');\n        toast.className = `toast align-items-center text-white bg-${type === 'error' ? 'danger' : type === 'success' ? 'success' : 'info'} border-0`;\n        toast.setAttribute('role', 'alert');\n        toast.innerHTML = `\n            <div class=\"d-flex\">\n                <div class=\"toast-body\">${message}</div>\n                <button type=\"button\" class=\"btn-close btn-close-white me-2 m-auto\" data-bs-dismiss=\"toast\"></button>\n            </div>\n        `;\n        toastContainer.appendChild(toast);\n        \n        const bsToast = new bootstrap.Toast(toast);\n        bsToast.show();\n        \n        setTimeout(() => {\n            toast.remove();\n        }, 5000);\n    }\n}\n\n// Global instance\nconst cycleFeedManager = new CycleFeedManager();\n\n// Event listeners\ndocument.addEventListener('DOMContentLoaded', () => {\n    document.addEventListener('submit', (e) => {\n        if (e.target.id === 'feedForm') {\n            cycleFeedManager.handleFeedSubmit(e);\n        } else if (e.target.id === 'birdsForm') {\n            cycleFeedManager.handleBirdsSubmit(e);\n        }\n    });\n});","size_bytes":20195},"js/components/cycle-overview.js":{"content":"class CycleOverview {\n    constructor() {\n        this.cycles = [];\n        this.activeCycle = null;\n    }\n\n    async init() {\n        this.cycles = await db.getAll('cycles');\n        this.activeCycle = this.cycles.find(cycle => cycle.status === 'active');\n        this.render();\n    }\n\n    render() {\n        const content = `\n            <div class=\"cycle-overview fade-in\">\n                ${this.renderHeader()}\n                ${this.renderQuickStats()}\n                ${this.renderCyclesList()}\n            </div>\n        `;\n\n        document.getElementById('app-content').innerHTML = content;\n        this.loadQuickStats();\n    }\n\n    renderHeader() {\n        return `\n            <div class=\"d-flex justify-content-between align-items-center mb-4\">\n                <div>\n                    <h2>Production Cycles</h2>\n                    <p class=\"text-muted mb-0\">Manage your poultry production cycles</p>\n                </div>\n                <button class=\"btn btn-primary\" onclick=\"cycleOverview.showCreateCycleModal()\">\n                    <i class=\"fas fa-plus me-2\"></i>New Cycle\n                </button>\n            </div>\n        `;\n    }\n\n    renderQuickStats() {\n        return `\n            <div class=\"quick-stats mb-4\">\n                <div class=\"card stats-card\">\n                    <div class=\"card-body text-center\">\n                        <div class=\"stats-value text-primary\" id=\"total-cycles\">-</div>\n                        <div class=\"stats-label\">Total Cycles</div>\n                    </div>\n                </div>\n                <div class=\"card stats-card\">\n                    <div class=\"card-body text-center\">\n                        <div class=\"stats-value text-success\" id=\"active-cages\">-</div>\n                        <div class=\"stats-label\">Active Cages</div>\n                    </div>\n                </div>\n                <div class=\"card stats-card\">\n                    <div class=\"card-body text-center\">\n                        <div class=\"stats-value text-warning\" id=\"total-birds\">-</div>\n                        <div class=\"stats-label\">Total Birds</div>\n                    </div>\n                </div>\n                <div class=\"card stats-card\">\n                    <div class=\"card-body text-center\">\n                        <div class=\"stats-value text-info\" id=\"daily-production\">-</div>\n                        <div class=\"stats-label\">Today's Eggs</div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderCyclesList() {\n        if (this.cycles.length === 0) {\n            return this.renderEmptyState();\n        }\n\n        return `\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <h5 class=\"mb-0\">Production Cycles</h5>\n                </div>\n                <div class=\"card-body p-0\">\n                    <div class=\"table-responsive\">\n                        <table class=\"table table-hover mb-0\">\n                            <thead>\n                                <tr>\n                                    <th>Cycle Name</th>\n                                    <th>Status</th>\n                                    <th>Start Date</th>\n                                    <th>Duration</th>\n                                    <th>Cages</th>\n                                    <th>Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                ${this.cycles.map(cycle => this.renderCycleRow(cycle)).join('')}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderCycleRow(cycle) {\n        const duration = this.calculateDuration(cycle.startDate, cycle.endDate);\n        \n        return `\n            <tr onclick=\"cycleOverview.selectCycle(${cycle.id})\" style=\"cursor: pointer;\">\n                <td>\n                    <strong>${cycle.name}</strong>\n                    ${cycle.description ? `<br><small class=\"text-muted\">${cycle.description}</small>` : ''}\n                </td>\n                <td>\n                    <span class=\"badge ${this.getStatusBadgeClass(cycle.status)}\">${cycle.status}</span>\n                </td>\n                <td>${this.formatDate(cycle.startDate)}</td>\n                <td>${duration}</td>\n                <td>\n                    <span class=\"badge bg-secondary\" id=\"cages-count-${cycle.id}\">-</span>\n                </td>\n                <td>\n                    <div class=\"btn-group btn-group-sm\">\n                        <button class=\"btn btn-outline-primary\" onclick=\"event.stopPropagation(); router.navigate('cage-manager', {cycleId: ${cycle.id}})\" \n                                title=\"Manage Cages\">\n                            <i class=\"fas fa-archive\"></i>\n                        </button>\n                        <button class=\"btn btn-outline-warning\" onclick=\"event.stopPropagation(); router.navigate('cycle-feed', {cycleId: ${cycle.id}})\" \n                                title=\"Manage Feed & Birds Sold\">\n                            <i class=\"fas fa-wheat-awn\"></i>\n                        </button>\n                        <button class=\"btn btn-outline-success\" onclick=\"event.stopPropagation(); cycleOverview.viewCycleAnalytics(${cycle.id})\" \n                                title=\"View Analytics\">\n                            <i class=\"fas fa-chart-line\"></i>\n                        </button>\n                        <button class=\"btn btn-outline-danger\" onclick=\"event.stopPropagation(); cycleOverview.deleteCycle(${cycle.id})\" \n                                title=\"Delete Cycle\">\n                            <i class=\"fas fa-trash\"></i>\n                        </button>\n                    </div>\n                </td>\n            </tr>\n        `;\n    }\n\n    renderEmptyState() {\n        return `\n            <div class=\"empty-state\">\n                <i class=\"fas fa-layer-group\"></i>\n                <h4>No Production Cycles</h4>\n                <p>Create your first production cycle to start managing your poultry farm.</p>\n                <button class=\"btn btn-primary\" onclick=\"cycleOverview.showCreateCycleModal()\">\n                    <i class=\"fas fa-plus me-2\"></i>Create First Cycle\n                </button>\n            </div>\n        `;\n    }\n\n    async loadQuickStats() {\n        try {\n            // Total cycles\n            document.getElementById('total-cycles').textContent = this.cycles.length;\n\n            // Active cages and total birds\n            const allCages = await db.getAll('cages');\n            const activeCages = allCages.filter(cage => cage.status === 'active');\n            const totalBirds = allCages.reduce((sum, cage) => sum + (cage.currentBirds || 0), 0);\n\n            document.getElementById('active-cages').textContent = activeCages.length;\n            document.getElementById('total-birds').textContent = totalBirds.toLocaleString();\n\n            // Today's production\n            const today = new Date().toISOString().split('T')[0];\n            const todayLogs = await db.getByIndex('productionLogs', 'date', today);\n            const dailyProduction = todayLogs.reduce((sum, log) => sum + (log.eggsCollected || 0), 0);\n\n            document.getElementById('daily-production').textContent = dailyProduction.toLocaleString();\n\n            // Load cage counts for each cycle\n            for (const cycle of this.cycles) {\n                const cycleCages = await db.getByIndex('cages', 'cycleId', cycle.id);\n                const countElement = document.getElementById(`cages-count-${cycle.id}`);\n                if (countElement) {\n                    countElement.textContent = cycleCages.length;\n                }\n            }\n        } catch (error) {\n            console.error('Error loading quick stats:', error);\n        }\n    }\n\n    calculateDuration(startDate, endDate) {\n        const start = new Date(startDate);\n        const end = endDate ? new Date(endDate) : new Date();\n        const diffTime = Math.abs(end - start);\n        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n        \n        if (diffDays < 7) {\n            return `${diffDays} days`;\n        } else if (diffDays < 30) {\n            return `${Math.floor(diffDays / 7)} weeks`;\n        } else {\n            return `${Math.floor(diffDays / 30)} months`;\n        }\n    }\n\n    getStatusBadgeClass(status) {\n        const classes = {\n            'active': 'bg-success',\n            'completed': 'bg-secondary',\n            'planned': 'bg-warning'\n        };\n        return classes[status] || 'bg-secondary';\n    }\n\n    showCreateCycleModal() {\n        const modal = `\n            <div class=\"modal fade\" id=\"createCycleModal\" tabindex=\"-1\">\n                <div class=\"modal-dialog modal-lg\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\">Create New Production Cycle</h5>\n                            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                        </div>\n                        <form id=\"createCycleForm\">\n                            <div class=\"modal-body\">\n                                <div class=\"row\">\n                                    <div class=\"col-md-6\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"cycleName\" class=\"form-label\">Cycle Name</label>\n                                            <input type=\"text\" class=\"form-control\" id=\"cycleName\" required>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-md-6\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"cycleType\" class=\"form-label\">Cycle Type</label>\n                                            <select class=\"form-select\" id=\"cycleType\" required>\n                                                <option value=\"\">Select type...</option>\n                                                <option value=\"layer\">Layer Production</option>\n                                                <option value=\"broiler\">Broiler Production</option>\n                                                <option value=\"breeder\">Breeder Production</option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div class=\"mb-3\">\n                                    <label for=\"cycleDescription\" class=\"form-label\">Description</label>\n                                    <textarea class=\"form-control\" id=\"cycleDescription\" rows=\"3\"></textarea>\n                                </div>\n\n                                <div class=\"row\">\n                                    <div class=\"col-md-6\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"startDate\" class=\"form-label\">Start Date</label>\n                                            <input type=\"date\" class=\"form-control\" id=\"startDate\" required>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-md-6\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"plannedDuration\" class=\"form-label\">Planned Duration (weeks)</label>\n                                            <input type=\"number\" class=\"form-control\" id=\"plannedDuration\" min=\"1\" required>\n                                        </div>\n                                    </div>\n                                </div>\n\n                                <div class=\"row\">\n                                    <div class=\"col-md-6\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"expectedBirds\" class=\"form-label\">Expected Total Birds</label>\n                                            <input type=\"number\" class=\"form-control\" id=\"expectedBirds\" min=\"1\">\n                                        </div>\n                                    </div>\n                                    <div class=\"col-md-6\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"targetProduction\" class=\"form-label\">Target Daily Production</label>\n                                            <input type=\"number\" class=\"form-control\" id=\"targetProduction\" min=\"0\">\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n                                <button type=\"submit\" class=\"btn btn-primary\">Create Cycle</button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.getElementById('modal-container').innerHTML = modal;\n        const modalElement = new bootstrap.Modal(document.getElementById('createCycleModal'));\n        modalElement.show();\n\n        // Set default start date to today\n        document.getElementById('startDate').valueAsDate = new Date();\n\n        document.getElementById('createCycleForm').addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.handleCreateCycle();\n            modalElement.hide();\n        });\n    }\n\n    async handleCreateCycle() {\n        const formData = {\n            name: document.getElementById('cycleName').value,\n            type: document.getElementById('cycleType').value,\n            description: document.getElementById('cycleDescription').value,\n            startDate: document.getElementById('startDate').value,\n            plannedDuration: parseInt(document.getElementById('plannedDuration').value),\n            expectedBirds: parseInt(document.getElementById('expectedBirds').value) || 0,\n            targetProduction: parseInt(document.getElementById('targetProduction').value) || 0,\n            status: 'active',\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n\n        try {\n            // Set other cycles to completed if this is being set as active\n            if (formData.status === 'active') {\n                for (const cycle of this.cycles) {\n                    if (cycle.status === 'active') {\n                        cycle.status = 'completed';\n                        cycle.endDate = new Date().toISOString();\n                        await db.update('cycles', cycle);\n                    }\n                }\n            }\n\n            await db.add('cycles', formData);\n            this.showToast('Production cycle created successfully!', 'success');\n            await this.init(); // Refresh the view\n        } catch (error) {\n            console.error('Error creating cycle:', error);\n            this.showToast('Error creating cycle. Please try again.', 'error');\n        }\n    }\n\n    async deleteCycle(cycleId) {\n        if (!confirm('Are you sure you want to delete this cycle? All associated data will be lost.')) {\n            return;\n        }\n\n        try {\n            // Delete cycle and all associated data\n            await db.delete('cycles', cycleId);\n            \n            const cages = await db.getByIndex('cages', 'cycleId', cycleId);\n            const productionLogs = await db.getByIndex('productionLogs', 'cycleId', cycleId);\n            const feedLogs = await db.getByIndex('feedLogs', 'cycleId', cycleId);\n            \n            for (const cage of cages) {\n                await db.delete('cages', cage.id);\n            }\n            \n            for (const log of productionLogs) {\n                await db.delete('productionLogs', log.id);\n            }\n            \n            for (const log of feedLogs) {\n                await db.delete('feedLogs', log.id);\n            }\n\n            this.showToast('Cycle deleted successfully!', 'success');\n            await this.init(); // Refresh the view\n        } catch (error) {\n            console.error('Error deleting cycle:', error);\n            this.showToast('Error deleting cycle. Please try again.', 'error');\n        }\n    }\n\n    selectCycle(cycleId) {\n        router.navigate('cage-manager', { cycleId });\n    }\n\n    viewCycleAnalytics(cycleId) {\n        router.navigate('analytics', { cycleId });\n    }\n\n    formatDate(date) {\n        const d = new Date(date);\n        const day = String(d.getDate()).padStart(2, '0');\n        const month = String(d.getMonth() + 1).padStart(2, '0');\n        const year = d.getFullYear();\n        return `${day}/${month}/${year}`;\n    }\n\n    showToast(message, type = 'info') {\n        const toast = document.getElementById('toast');\n        const toastBody = toast.querySelector('.toast-body');\n        \n        toastBody.textContent = message;\n        \n        const icon = toast.querySelector('.fas');\n        icon.className = type === 'success' ? 'fas fa-check-circle text-success me-2' : \n                        type === 'error' ? 'fas fa-exclamation-circle text-danger me-2' : \n                        'fas fa-info-circle text-primary me-2';\n        \n        const bsToast = new bootstrap.Toast(toast);\n        bsToast.show();\n    }\n}\n\n// Global cycle overview instance\nconst cycleOverview = new CycleOverview();","size_bytes":17809},"js/components/data-manager.js":{"content":"/**\n * Data Manager Component for CSV Import/Export\n * Provides user interface for importing and exporting farm data\n */\n\nclass DataManager {\n    constructor() {\n        this.csvHandler = new CSVHandler();\n        this.db = null;\n    }\n\n    async init(database) {\n        this.db = database;\n        await this.csvHandler.init(database);\n    }\n\n    render() {\n        return `\n            <div class=\"container-fluid\">\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <div class=\"d-flex justify-content-between align-items-center mb-4\">\n                            <h2><i class=\"fas fa-exchange-alt me-2\"></i>Data Import/Export</h2>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"row\">\n                    <!-- Export Section -->\n                    <div class=\"col-lg-6 mb-4\">\n                        <div class=\"card h-100\">\n                            <div class=\"card-header bg-success text-white\">\n                                <h5 class=\"mb-0\"><i class=\"fas fa-download me-2\"></i>Export Data to CSV</h5>\n                            </div>\n                            <div class=\"card-body\">\n                                <p class=\"text-muted\">Download your farm data as CSV files for use in Excel or other spreadsheet applications.</p>\n                                \n                                <!-- Cycle Selection for Export -->\n                                <div class=\"mb-3\">\n                                    <label for=\"exportCycleSelect\" class=\"form-label\">Select Cycle (Optional)</label>\n                                    <select id=\"exportCycleSelect\" class=\"form-select\">\n                                        <option value=\"\">All Cycles</option>\n                                    </select>\n                                    <small class=\"text-muted\">Leave blank to export data from all cycles</small>\n                                </div>\n\n                                <div class=\"d-grid gap-2\">\n                                    <button class=\"btn btn-success\" onclick=\"dataManager.exportData('production')\">\n                                        <i class=\"fas fa-egg me-2\"></i>Export Production Logs\n                                    </button>\n                                    <button class=\"btn btn-success\" onclick=\"dataManager.exportData('sales')\">\n                                        <i class=\"fas fa-shopping-cart me-2\"></i>Export Sales Data\n                                    </button>\n                                    <button class=\"btn btn-success\" onclick=\"dataManager.exportData('expenses')\">\n                                        <i class=\"fas fa-receipt me-2\"></i>Export Expenses\n                                    </button>\n                                    <button class=\"btn btn-success\" onclick=\"dataManager.exportData('feed')\">\n                                        <i class=\"fas fa-seedling me-2\"></i>Export Feed Logs\n                                    </button>\n                                    <button class=\"btn btn-outline-success\" onclick=\"dataManager.exportAllData()\">\n                                        <i class=\"fas fa-download me-2\"></i>Export All Data\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <!-- Import Section -->\n                    <div class=\"col-lg-6 mb-4\">\n                        <div class=\"card h-100\">\n                            <div class=\"card-header bg-primary text-white\">\n                                <h5 class=\"mb-0\"><i class=\"fas fa-upload me-2\"></i>Import Data from CSV</h5>\n                            </div>\n                            <div class=\"card-body\">\n                                <p class=\"text-muted\">Upload CSV files to import data into your farm management system.</p>\n                                \n                                <!-- File Upload -->\n                                <div class=\"mb-3\">\n                                    <label for=\"csvFileInput\" class=\"form-label\">Select CSV File</label>\n                                    <input type=\"file\" id=\"csvFileInput\" class=\"form-control\" accept=\".csv\" onchange=\"dataManager.handleFileSelect()\">\n                                </div>\n\n                                <!-- Import Type Selection -->\n                                <div class=\"mb-3\">\n                                    <label for=\"importTypeSelect\" class=\"form-label\">Data Type</label>\n                                    <select id=\"importTypeSelect\" class=\"form-select\">\n                                        <option value=\"production\">Production Logs</option>\n                                        <option value=\"sales\">Sales Data</option>\n                                        <option value=\"expenses\">Expenses</option>\n                                        <option value=\"feed\">Feed Logs</option>\n                                    </select>\n                                </div>\n\n                                <div class=\"d-grid gap-2\">\n                                    <button id=\"importBtn\" class=\"btn btn-primary\" onclick=\"dataManager.importData()\" disabled>\n                                        <i class=\"fas fa-upload me-2\"></i>Import Data\n                                    </button>\n                                </div>\n\n                                <!-- Import Templates -->\n                                <hr>\n                                <h6>Download Templates</h6>\n                                <div class=\"d-grid gap-1\">\n                                    <button class=\"btn btn-sm btn-outline-primary\" onclick=\"dataManager.downloadTemplate('production')\">\n                                        <i class=\"fas fa-file-csv me-1\"></i>Production Log Template\n                                    </button>\n                                    <button class=\"btn btn-sm btn-outline-primary\" onclick=\"dataManager.downloadTemplate('sales')\">\n                                        <i class=\"fas fa-file-csv me-1\"></i>Sales Template\n                                    </button>\n                                    <button class=\"btn btn-sm btn-outline-primary\" onclick=\"dataManager.downloadTemplate('expenses')\">\n                                        <i class=\"fas fa-file-csv me-1\"></i>Expenses Template\n                                    </button>\n                                    <button class=\"btn btn-sm btn-outline-primary\" onclick=\"dataManager.downloadTemplate('feed')\">\n                                        <i class=\"fas fa-file-csv me-1\"></i>Feed Log Template\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Results Section -->\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <div id=\"importResults\" class=\"alert alert-info d-none\">\n                            <h6>Import Results</h6>\n                            <div id=\"importResultsContent\"></div>\n                        </div>\n                    </div>\n                </div>\n\n                <!-- Instructions Section -->\n                <div class=\"row\">\n                    <div class=\"col-12\">\n                        <div class=\"card\">\n                            <div class=\"card-header\">\n                                <h5 class=\"mb-0\"><i class=\"fas fa-info-circle me-2\"></i>Instructions</h5>\n                            </div>\n                            <div class=\"card-body\">\n                                <div class=\"row\">\n                                    <div class=\"col-md-6\">\n                                        <h6>Exporting Data</h6>\n                                        <ul class=\"list-unstyled\">\n                                            <li>• Export creates CSV files compatible with Excel</li>\n                                            <li>• Select a specific cycle or export all data</li>\n                                            <li>• Files include all necessary columns with proper formatting</li>\n                                            <li>• Data can be edited in Excel and re-imported</li>\n                                        </ul>\n                                    </div>\n                                    <div class=\"col-md-6\">\n                                        <h6>Importing Data</h6>\n                                        <ul class=\"list-unstyled\">\n                                            <li>• Use downloaded templates for correct format</li>\n                                            <li>• Cycle and cage names must match existing records</li>\n                                            <li>• Dates should be in YYYY-MM-DD format</li>\n                                            <li>• Import will show success/error summary</li>\n                                        </ul>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    async loadCycleOptions() {\n        const cycles = await this.db.getAll('cycles');\n        const select = document.getElementById('exportCycleSelect');\n        \n        if (select) {\n            // Clear existing options except \"All Cycles\"\n            select.innerHTML = '<option value=\"\">All Cycles</option>';\n            \n            cycles.forEach(cycle => {\n                const option = document.createElement('option');\n                option.value = cycle.id;\n                option.textContent = cycle.name || `Cycle ${cycle.id}`;\n                select.appendChild(option);\n            });\n        }\n    }\n\n    handleFileSelect() {\n        const fileInput = document.getElementById('csvFileInput');\n        const importBtn = document.getElementById('importBtn');\n        \n        if (fileInput.files.length > 0) {\n            importBtn.disabled = false;\n        } else {\n            importBtn.disabled = true;\n        }\n    }\n\n    async exportData(type) {\n        try {\n            const cycleSelect = document.getElementById('exportCycleSelect');\n            const selectedCycleId = cycleSelect.value || null;\n            \n            let csvContent = '';\n            let filename = '';\n            const timestamp = new Date().toISOString().split('T')[0];\n\n            switch (type) {\n                case 'production':\n                    csvContent = await this.csvHandler.exportProductionLogs(selectedCycleId);\n                    filename = `production_logs_${timestamp}.csv`;\n                    break;\n                case 'sales':\n                    csvContent = await this.csvHandler.exportSales(selectedCycleId);\n                    filename = `sales_data_${timestamp}.csv`;\n                    break;\n                case 'expenses':\n                    csvContent = await this.csvHandler.exportExpenses(selectedCycleId);\n                    filename = `expenses_${timestamp}.csv`;\n                    break;\n                case 'feed':\n                    csvContent = await this.csvHandler.exportFeedLogs(selectedCycleId);\n                    filename = `feed_logs_${timestamp}.csv`;\n                    break;\n                default:\n                    throw new Error('Invalid export type');\n            }\n\n            if (csvContent) {\n                this.csvHandler.downloadCSV(csvContent, filename);\n                this.showMessage(`${type} data exported successfully as ${filename}`, 'success');\n            } else {\n                this.showMessage(`No ${type} data found to export`, 'warning');\n            }\n        } catch (error) {\n            console.error('Export error:', error);\n            this.showMessage(`Error exporting ${type} data: ${error.message}`, 'danger');\n        }\n    }\n\n    async exportAllData() {\n        try {\n            const cycleSelect = document.getElementById('exportCycleSelect');\n            const selectedCycleId = cycleSelect.value || null;\n            const timestamp = new Date().toISOString().split('T')[0];\n\n            const exports = [\n                { type: 'production', method: 'exportProductionLogs', filename: `production_logs_${timestamp}.csv` },\n                { type: 'sales', method: 'exportSales', filename: `sales_data_${timestamp}.csv` },\n                { type: 'expenses', method: 'exportExpenses', filename: `expenses_${timestamp}.csv` },\n                { type: 'feed', method: 'exportFeedLogs', filename: `feed_logs_${timestamp}.csv` }\n            ];\n\n            for (const exportConfig of exports) {\n                const csvContent = await this.csvHandler[exportConfig.method](selectedCycleId);\n                if (csvContent) {\n                    this.csvHandler.downloadCSV(csvContent, exportConfig.filename);\n                }\n            }\n\n            this.showMessage('All data exported successfully', 'success');\n        } catch (error) {\n            console.error('Export all error:', error);\n            this.showMessage(`Error exporting all data: ${error.message}`, 'danger');\n        }\n    }\n\n    async importData() {\n        try {\n            const fileInput = document.getElementById('csvFileInput');\n            const typeSelect = document.getElementById('importTypeSelect');\n            \n            if (fileInput.files.length === 0) {\n                this.showMessage('Please select a CSV file to import', 'warning');\n                return;\n            }\n\n            const file = fileInput.files[0];\n            const importType = typeSelect.value;\n            \n            const csvText = await this.readFileAsText(file);\n            let results;\n\n            switch (importType) {\n                case 'production':\n                    results = await this.csvHandler.importProductionLogs(csvText);\n                    break;\n                case 'sales':\n                    results = await this.csvHandler.importSales(csvText);\n                    break;\n                case 'expenses':\n                    results = await this.csvHandler.importExpenses(csvText);\n                    break;\n                case 'feed':\n                    results = await this.csvHandler.importFeedLogs(csvText);\n                    break;\n                default:\n                    throw new Error('Invalid import type');\n            }\n\n            this.showImportResults(results, importType);\n            \n            // Reset form\n            fileInput.value = '';\n            document.getElementById('importBtn').disabled = true;\n\n        } catch (error) {\n            console.error('Import error:', error);\n            this.showMessage(`Error importing data: ${error.message}`, 'danger');\n        }\n    }\n\n    readFileAsText(file) {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.onload = (e) => resolve(e.target.result);\n            reader.onerror = (e) => reject(e);\n            reader.readAsText(file);\n        });\n    }\n\n    downloadTemplate(type) {\n        let content = '';\n        let filename = '';\n\n        switch (type) {\n            case 'production':\n                content = this.csvHandler.getProductionLogTemplate();\n                filename = 'production_log_template.csv';\n                break;\n            case 'sales':\n                content = this.csvHandler.getSalesTemplate();\n                filename = 'sales_template.csv';\n                break;\n            case 'expenses':\n                content = this.csvHandler.getExpensesTemplate();\n                filename = 'expenses_template.csv';\n                break;\n            case 'feed':\n                content = this.csvHandler.getFeedLogTemplate();\n                filename = 'feed_log_template.csv';\n                break;\n            default:\n                this.showMessage('Invalid template type', 'danger');\n                return;\n        }\n\n        this.csvHandler.downloadCSV(content, filename);\n        this.showMessage(`${type} template downloaded as ${filename}`, 'info');\n    }\n\n    showImportResults(results, type) {\n        const resultsDiv = document.getElementById('importResults');\n        const contentDiv = document.getElementById('importResultsContent');\n        \n        let html = `\n            <div class=\"row\">\n                <div class=\"col-md-4\">\n                    <div class=\"text-success\">\n                        <strong>Successfully imported:</strong> ${results.success} ${type} records\n                    </div>\n                </div>\n                <div class=\"col-md-4\">\n                    <div class=\"text-info\">\n                        <strong>New cycles created:</strong> ${results.newCycles || 0}\n                        ${results.newCages ? `<br><strong>New cages created:</strong> ${results.newCages}` : ''}\n                    </div>\n                </div>\n                <div class=\"col-md-4\">\n                    <div class=\"text-danger\">\n                        <strong>Errors:</strong> ${results.errors.length}\n                    </div>\n                </div>\n            </div>\n        `;\n\n        if (results.errors.length > 0) {\n            html += `\n                <div class=\"mt-2\">\n                    <strong>Error Details:</strong>\n                    <ul class=\"mb-0\">\n                        ${results.errors.map(error => `<li>${error}</li>`).join('')}\n                    </ul>\n                </div>\n            `;\n        }\n\n        contentDiv.innerHTML = html;\n        resultsDiv.classList.remove('d-none');\n        \n        // Auto-hide after 10 seconds if no errors\n        if (results.errors.length === 0) {\n            setTimeout(() => {\n                resultsDiv.classList.add('d-none');\n            }, 10000);\n        }\n    }\n\n    showMessage(message, type) {\n        // Create a temporary alert\n        const alertDiv = document.createElement('div');\n        alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3`;\n        alertDiv.style.zIndex = '9999';\n        alertDiv.innerHTML = `\n            ${message}\n            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\"></button>\n        `;\n        \n        document.body.appendChild(alertDiv);\n        \n        // Auto-remove after 5 seconds\n        setTimeout(() => {\n            if (alertDiv.parentNode) {\n                alertDiv.parentNode.removeChild(alertDiv);\n            }\n        }, 5000);\n    }\n}\n\n// Initialize global data manager\nwindow.dataManager = new DataManager();","size_bytes":18863},"js/components/expense-manager.js":{"content":"class ExpenseManager {\n    constructor() {\n        this.cycle = null;\n        this.expenses = [];\n        this.allExpenses = [];\n        this.currentCategoryFilter = 'all';\n    }\n\n    getUserCurrency() {\n        const settings = JSON.parse(localStorage.getItem('poultrySettings') || '{}');\n        return settings.currency || 'GHS';\n    }\n\n    formatCurrency(amount) {\n        const currency = this.getUserCurrency();\n        const currencySymbols = {\n            'GHS': '₵',\n            'USD': '$',\n            'GBP': '£'\n        };\n        const symbol = currencySymbols[currency] || currency;\n        return `${symbol}${amount.toFixed(2)}`;\n    }\n\n    async init(cycleId) {\n        this.cycle = await db.get('cycles', parseInt(cycleId));\n        this.allExpenses = await db.getByIndex('expenses', 'cycleId', parseInt(cycleId));\n        this.allExpenses.sort((a, b) => new Date(b.date) - new Date(a.date));\n        this.applyFilters();\n        this.render();\n    }\n\n    render() {\n        const content = `\n            <div class=\"expense-manager fade-in\">\n                ${this.renderHeader()}\n                ${this.renderExpenseForm()}\n                ${this.renderExpenseSummary()}\n                ${this.renderExpenseHistory()}\n            </div>\n        `;\n\n        document.getElementById('app-content').innerHTML = content;\n        \n        // Add event listeners\n        document.getElementById('expenseForm').addEventListener('submit', (e) => this.handleExpenseSubmit(e));\n        document.getElementById('categoryFilter').addEventListener('change', (e) => this.filterByCategory(e.target.value));\n    }\n\n    applyFilters() {\n        this.expenses = this.allExpenses.filter(expense => {\n            if (this.currentCategoryFilter === 'all') {\n                return true;\n            }\n            return expense.category === this.currentCategoryFilter;\n        });\n    }\n\n    filterByCategory(category) {\n        this.currentCategoryFilter = category;\n        this.applyFilters();\n        this.render();\n    }\n\n    clearFilters() {\n        this.currentCategoryFilter = 'all';\n        this.applyFilters();\n        this.render();\n    }\n\n    renderHeader() {\n        return `\n            <div class=\"d-flex justify-content-between align-items-center mb-4\">\n                <div>\n                    <h2>Expense Management</h2>\n                    <p class=\"text-muted mb-0\">Cycle: ${this.cycle?.name || 'Unknown'}</p>\n                </div>\n                <button class=\"btn btn-outline-secondary\" onclick=\"router.navigate('analytics', {cycleId: ${this.cycle?.id}})\">\n                    <i class=\"fas fa-arrow-left me-2\"></i>Back to Analytics\n                </button>\n            </div>\n            \n            <!-- Filter Section -->\n            <div class=\"card mb-4\">\n                <div class=\"card-body\">\n                    <div class=\"row align-items-center\">\n                        <div class=\"col-md-3\">\n                            <label for=\"categoryFilter\" class=\"form-label\">Filter by Category</label>\n                            <select class=\"form-select\" id=\"categoryFilter\">\n                                <option value=\"all\" ${this.currentCategoryFilter === 'all' ? 'selected' : ''}>All Categories</option>\n                                <option value=\"feed\" ${this.currentCategoryFilter === 'feed' ? 'selected' : ''}>Feed</option>\n                                <option value=\"medication\" ${this.currentCategoryFilter === 'medication' ? 'selected' : ''}>Medication</option>\n                                <option value=\"vaccination\" ${this.currentCategoryFilter === 'vaccination' ? 'selected' : ''}>Vaccination</option>\n                                <option value=\"labor\" ${this.currentCategoryFilter === 'labor' ? 'selected' : ''}>Labor</option>\n                                <option value=\"utilities\" ${this.currentCategoryFilter === 'utilities' ? 'selected' : ''}>Utilities</option>\n                                <option value=\"equipment\" ${this.currentCategoryFilter === 'equipment' ? 'selected' : ''}>Equipment</option>\n                                <option value=\"transport\" ${this.currentCategoryFilter === 'transport' ? 'selected' : ''}>Transport</option>\n                                <option value=\"maintenance\" ${this.currentCategoryFilter === 'maintenance' ? 'selected' : ''}>Maintenance</option>\n                                <option value=\"other\" ${this.currentCategoryFilter === 'other' ? 'selected' : ''}>Other</option>\n                            </select>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <div class=\"d-flex gap-3 mt-4\">\n                                <div class=\"text-center\">\n                                    <div class=\"fw-bold text-primary\">${this.expenses.length}</div>\n                                    <small class=\"text-muted\">Records</small>\n                                </div>\n                                <div class=\"text-center\">\n                                    <div class=\"fw-bold text-danger\">${this.formatCurrency(this.expenses.reduce((sum, e) => sum + e.amount, 0))}</div>\n                                    <small class=\"text-muted\">Total</small>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-md-3 text-end\">\n                            <button class=\"btn btn-outline-secondary btn-sm\" onclick=\"expenseManager.clearFilters()\">\n                                <i class=\"fas fa-times me-1\"></i>Clear Filters\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderExpenseForm() {\n        const today = new Date().toISOString().split('T')[0];\n\n        return `\n            <div class=\"card mb-4\">\n                <div class=\"card-header\">\n                    <h5 class=\"mb-0\"><i class=\"fas fa-receipt me-2\"></i>Record Expense</h5>\n                </div>\n                <div class=\"card-body\">\n                    <form id=\"expenseForm\">\n                        <div class=\"row\">\n                            <div class=\"col-md-3\">\n                                <div class=\"mb-3\">\n                                    <label for=\"expenseDate\" class=\"form-label\">Date</label>\n                                    <input type=\"date\" class=\"form-control\" id=\"expenseDate\" value=\"${today}\" required>\n                                </div>\n                            </div>\n                            <div class=\"col-md-3\">\n                                <div class=\"mb-3\">\n                                    <label for=\"expenseCategory\" class=\"form-label\">Category</label>\n                                    <select class=\"form-select\" id=\"expenseCategory\" required>\n                                        <option value=\"\">Select category...</option>\n                                        <option value=\"feed\">Feed</option>\n                                        <option value=\"medication\">Medication</option>\n                                        <option value=\"vaccination\">Vaccination</option>\n                                        <option value=\"labor\">Labor</option>\n                                        <option value=\"utilities\">Utilities</option>\n                                        <option value=\"equipment\">Equipment</option>\n                                        <option value=\"transport\">Transport</option>\n                                        <option value=\"maintenance\">Maintenance</option>\n                                        <option value=\"other\">Other</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <div class=\"col-md-3\">\n                                <div class=\"mb-3\">\n                                    <label for=\"expenseAmount\" class=\"form-label\">Amount (${this.getUserCurrency() === 'GHS' ? '₵' : this.getUserCurrency() === 'USD' ? '$' : '£'})</label>\n                                    <input type=\"number\" class=\"form-control\" id=\"expenseAmount\" step=\"0.01\" min=\"0\" required>\n                                </div>\n                            </div>\n                            <div class=\"col-md-3\">\n                                <div class=\"mb-3\">\n                                    <label for=\"supplier\" class=\"form-label\">Supplier/Vendor</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"supplier\">\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-md-6\">\n                                <div class=\"mb-3\">\n                                    <label for=\"expenseDescription\" class=\"form-label\">Description</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"expenseDescription\" required>\n                                </div>\n                            </div>\n                            <div class=\"col-md-3\">\n                                <div class=\"mb-3\">\n                                    <label for=\"quantity\" class=\"form-label\">Quantity</label>\n                                    <input type=\"number\" class=\"form-control\" id=\"quantity\" step=\"0.1\" min=\"0\">\n                                </div>\n                            </div>\n                            <div class=\"col-md-3\">\n                                <div class=\"mb-3\">\n                                    <label for=\"unit\" class=\"form-label\">Unit</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"unit\" placeholder=\"kg, bags, hours, etc.\">\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n                                <div class=\"mb-3\">\n                                    <label for=\"expenseNotes\" class=\"form-label\">Notes</label>\n                                    <textarea class=\"form-control\" id=\"expenseNotes\" rows=\"2\"></textarea>\n                                </div>\n                            </div>\n                        </div>\n                        <button type=\"submit\" class=\"btn btn-primary\">\n                            <i class=\"fas fa-save me-2\"></i>Record Expense\n                        </button>\n                    </form>\n                </div>\n            </div>\n        `;\n    }\n\n    renderExpenseSummary() {\n        const totalExpenses = this.expenses.reduce((sum, expense) => sum + (expense.amount || 0), 0);\n        const categoryTotals = this.expenses.reduce((acc, expense) => {\n            acc[expense.category] = (acc[expense.category] || 0) + expense.amount;\n            return acc;\n        }, {});\n\n        const topCategory = Object.keys(categoryTotals).reduce((a, b) => \n            categoryTotals[a] > categoryTotals[b] ? a : b, 'none');\n        \n        const avgExpensePerDay = this.expenses.length > 0 ? totalExpenses / this.expenses.length : 0;\n\n        return `\n            <div class=\"row mb-4\">\n                <div class=\"col-md-3\">\n                    <div class=\"card stats-card\">\n                        <div class=\"card-body text-center\">\n                            <div class=\"stats-value text-danger\">${this.formatCurrency(totalExpenses)}</div>\n                            <div class=\"stats-label\">Total Expenses</div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"card stats-card\">\n                        <div class=\"card-body text-center\">\n                            <div class=\"stats-value text-primary\">${this.expenses.length}</div>\n                            <div class=\"stats-label\">Total Records</div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"card stats-card\">\n                        <div class=\"card-body text-center\">\n                            <div class=\"stats-value text-warning\">${this.formatCurrency(avgExpensePerDay)}</div>\n                            <div class=\"stats-label\">Avg per Entry</div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-3\">\n                    <div class=\"card stats-card\">\n                        <div class=\"card-body text-center\">\n                            <div class=\"stats-value text-info\">${topCategory}</div>\n                            <div class=\"stats-label\">Top Category</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderExpenseHistory() {\n        if (this.expenses.length === 0) {\n            return `\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <div class=\"empty-state\">\n                            <i class=\"fas fa-receipt\"></i>\n                            <h4>No Expense Records</h4>\n                            <p>Start recording your expenses to track costs.</p>\n                        </div>\n                    </div>\n                </div>\n            `;\n        }\n\n        return `\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <h5 class=\"mb-0\">Expense History</h5>\n                </div>\n                <div class=\"card-body p-0\">\n                    <div class=\"table-responsive\">\n                        <table class=\"table table-hover mb-0\">\n                            <thead>\n                                <tr>\n                                    <th>Date</th>\n                                    <th>Category</th>\n                                    <th>Description</th>\n                                    <th>Amount</th>\n                                    <th>Supplier</th>\n                                    <th>Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                ${this.expenses.map(expense => this.renderExpenseRow(expense)).join('')}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderExpenseRow(expense) {\n        const date = new Date(expense.date);\n        const day = String(date.getDate()).padStart(2, '0');\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const year = date.getFullYear();\n        const formattedDate = `${day}/${month}/${year}`;\n        \n        return `\n            <tr>\n                <td>${formattedDate}</td>\n                <td>\n                    <span class=\"badge ${this.getCategoryBadgeClass(expense.category)}\">${expense.category}</span>\n                </td>\n                <td>\n                    <strong>${expense.description}</strong>\n                    ${expense.quantity ? `<br><small class=\"text-muted\">${expense.quantity} ${expense.unit || ''}</small>` : ''}\n                </td>\n                <td><strong>${this.formatCurrency(expense.amount)}</strong></td>\n                <td>${expense.supplier || '-'}</td>\n                <td>\n                    <div class=\"btn-group btn-group-sm\">\n                        <button class=\"btn btn-outline-danger\" onclick=\"expenseManager.deleteExpense(${expense.id})\">\n                            <i class=\"fas fa-trash\"></i>\n                        </button>\n                    </div>\n                </td>\n            </tr>\n        `;\n    }\n\n    getCategoryBadgeClass(category) {\n        const classes = {\n            'feed': 'bg-warning',\n            'medication': 'bg-danger',\n            'vaccination': 'bg-info',\n            'labor': 'bg-primary',\n            'utilities': 'bg-secondary',\n            'equipment': 'bg-dark',\n            'transport': 'bg-success',\n            'maintenance': 'bg-warning',\n            'other': 'bg-light text-dark'\n        };\n        return classes[category] || 'bg-secondary';\n    }\n\n    async handleExpenseSubmit(event) {\n        event.preventDefault();\n\n        const formData = {\n            cycleId: this.cycle.id,\n            date: document.getElementById('expenseDate').value,\n            category: document.getElementById('expenseCategory').value,\n            description: document.getElementById('expenseDescription').value,\n            amount: parseFloat(document.getElementById('expenseAmount').value),\n            supplier: document.getElementById('supplier').value,\n            quantity: parseFloat(document.getElementById('quantity').value) || null,\n            unit: document.getElementById('unit').value,\n            notes: document.getElementById('expenseNotes').value,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n\n        try {\n            await db.add('expenses', formData);\n            this.showToast('Expense recorded successfully!', 'success');\n            \n            // Reset form\n            document.getElementById('expenseForm').reset();\n            document.getElementById('expenseDate').value = new Date().toISOString().split('T')[0];\n            \n            await this.init(this.cycle.id); // Refresh the view\n        } catch (error) {\n            console.error('Error recording expense:', error);\n            this.showToast('Error recording expense. Please try again.', 'error');\n        }\n    }\n\n    async deleteExpense(expenseId) {\n        if (!confirm('Are you sure you want to delete this expense record?')) {\n            return;\n        }\n\n        try {\n            await db.delete('expenses', expenseId);\n            this.showToast('Expense deleted successfully!', 'success');\n            await this.init(this.cycle.id); // Refresh the view\n        } catch (error) {\n            console.error('Error deleting expense:', error);\n            this.showToast('Error deleting expense. Please try again.', 'error');\n        }\n    }\n\n    showToast(message, type = 'info') {\n        const toast = document.getElementById('toast');\n        const toastBody = toast.querySelector('.toast-body');\n        \n        toastBody.textContent = message;\n        \n        const icon = toast.querySelector('.fas');\n        icon.className = type === 'success' ? 'fas fa-check-circle text-success me-2' : \n                        type === 'error' ? 'fas fa-exclamation-circle text-danger me-2' : \n                        'fas fa-info-circle text-primary me-2';\n        \n        const bsToast = new bootstrap.Toast(toast);\n        bsToast.show();\n    }\n}\n\n// Global expense manager instance\nconst expenseManager = new ExpenseManager();\n\n// Event listeners\ndocument.addEventListener('DOMContentLoaded', () => {\n    document.addEventListener('submit', (e) => {\n        if (e.target.id === 'expenseForm') {\n            expenseManager.handleExpenseSubmit(e);\n        }\n    });\n});","size_bytes":19187},"js/components/sales-manager.js":{"content":"class SalesManager {\n    constructor() {\n        this.cycle = null;\n        this.salesRecords = [];\n        this.allSalesRecords = [];\n        this.currentSaleTypeFilter = 'all';\n    }\n\n    getUserCurrency() {\n        const settings = JSON.parse(localStorage.getItem('poultrySettings') || '{}');\n        return settings.currency || 'GHS';\n    }\n\n    formatCurrency(amount) {\n        const currency = this.getUserCurrency();\n        const currencySymbols = {\n            'GHS': '₵',\n            'USD': '$',\n            'GBP': '£'\n        };\n        const symbol = currencySymbols[currency] || currency;\n        return `${symbol}${amount.toFixed(2)}`;\n    }\n\n    async init(cycleId) {\n        this.cycle = await db.get('cycles', parseInt(cycleId));\n        this.allSalesRecords = await db.getByIndex('sales', 'cycleId', parseInt(cycleId));\n        this.allSalesRecords.sort((a, b) => new Date(b.date) - new Date(a.date));\n        this.applyFilters();\n        this.render();\n    }\n\n    render() {\n        const content = `\n            <div class=\"sales-manager fade-in\">\n                ${this.renderHeader()}\n                ${this.renderSalesForm()}\n                ${this.renderSalesSummary()}\n                ${this.renderSalesHistory()}\n            </div>\n        `;\n\n        document.getElementById('app-content').innerHTML = content;\n        \n        // Add event listeners for form submissions\n        document.getElementById('eggSalesForm').addEventListener('submit', (e) => this.handleEggSalesSubmit(e));\n        document.getElementById('birdSalesForm').addEventListener('submit', (e) => this.handleBirdSalesSubmit(e));\n        \n        // Add automatic calculation for egg sales\n        document.getElementById('cratesQuantity').addEventListener('input', this.calculateEggTotal.bind(this));\n        document.getElementById('pricePerCrate').addEventListener('input', this.calculateEggTotal.bind(this));\n        \n        // Add automatic calculation for bird sales\n        document.getElementById('birdsQuantity').addEventListener('input', this.calculateBirdTotal.bind(this));\n        document.getElementById('pricePerBird').addEventListener('input', this.calculateBirdTotal.bind(this));\n        \n        // Add filter event listener\n        document.getElementById('salesTypeFilter').addEventListener('change', (e) => this.filterBySaleType(e.target.value));\n    }\n\n    applyFilters() {\n        this.salesRecords = this.allSalesRecords.filter(sale => {\n            const saleType = sale.saleType || 'eggs';\n            if (this.currentSaleTypeFilter === 'all') {\n                return true;\n            }\n            return saleType === this.currentSaleTypeFilter;\n        });\n    }\n\n    filterBySaleType(saleType) {\n        this.currentSaleTypeFilter = saleType;\n        this.applyFilters();\n        this.render();\n    }\n\n    clearFilters() {\n        this.currentSaleTypeFilter = 'all';\n        this.applyFilters();\n        this.render();\n    }\n\n    renderHeader() {\n        return `\n            <div class=\"d-flex justify-content-between align-items-center mb-4\">\n                <div>\n                    <h2>Sales Management</h2>\n                    <p class=\"text-muted mb-0\">Cycle: ${this.cycle?.name || 'Unknown'}</p>\n                </div>\n                <button class=\"btn btn-outline-secondary\" onclick=\"router.navigate('analytics', {cycleId: ${this.cycle?.id}})\">\n                    <i class=\"fas fa-arrow-left me-2\"></i>Back to Analytics\n                </button>\n            </div>\n            \n            <!-- Filter Section -->\n            <div class=\"card mb-4\">\n                <div class=\"card-body\">\n                    <div class=\"row align-items-center\">\n                        <div class=\"col-md-3\">\n                            <label for=\"salesTypeFilter\" class=\"form-label\">Filter by Sale Type</label>\n                            <select class=\"form-select\" id=\"salesTypeFilter\">\n                                <option value=\"all\" ${this.currentSaleTypeFilter === 'all' ? 'selected' : ''}>All Sales</option>\n                                <option value=\"eggs\" ${this.currentSaleTypeFilter === 'eggs' ? 'selected' : ''}>Egg Sales</option>\n                                <option value=\"birds\" ${this.currentSaleTypeFilter === 'birds' ? 'selected' : ''}>Bird Sales</option>\n                            </select>\n                        </div>\n                        <div class=\"col-md-6\">\n                            <div class=\"d-flex gap-3 mt-4\">\n                                <div class=\"text-center\">\n                                    <div class=\"fw-bold text-primary\">${this.salesRecords.length}</div>\n                                    <small class=\"text-muted\">Records</small>\n                                </div>\n                                <div class=\"text-center\">\n                                    <div class=\"fw-bold text-success\">${this.formatCurrency(this.salesRecords.reduce((sum, s) => sum + (s.totalAmount || s.amount || 0), 0))}</div>\n                                    <small class=\"text-muted\">Total</small>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"col-md-3 text-end\">\n                            <button class=\"btn btn-outline-secondary btn-sm\" onclick=\"salesManager.clearFilters()\">\n                                <i class=\"fas fa-times me-1\"></i>Clear Filters\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderSalesForm() {\n        const today = new Date().toISOString().split('T')[0];\n\n        return `\n            <div class=\"card mb-4\">\n                <div class=\"card-header\">\n                    <h5 class=\"mb-0\"><i class=\"fas fa-shopping-cart me-2\"></i>Record Sales</h5>\n                </div>\n                <div class=\"card-body\">\n                    <!-- Sales Type Tabs -->\n                    <ul class=\"nav nav-tabs\" id=\"salesTabs\" role=\"tablist\">\n                        <li class=\"nav-item\" role=\"presentation\">\n                            <button class=\"nav-link active\" id=\"egg-sales-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#egg-sales\" type=\"button\" role=\"tab\">\n                                <i class=\"fas fa-egg me-2\"></i>Egg Sales\n                            </button>\n                        </li>\n                        <li class=\"nav-item\" role=\"presentation\">\n                            <button class=\"nav-link\" id=\"bird-sales-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#bird-sales\" type=\"button\" role=\"tab\">\n                                <i class=\"fas fa-dove me-2\"></i>Birds Sold\n                            </button>\n                        </li>\n                    </ul>\n\n                    <!-- Tab Content -->\n                    <div class=\"tab-content mt-3\" id=\"salesTabContent\">\n                        <!-- Egg Sales Tab -->\n                        <div class=\"tab-pane fade show active\" id=\"egg-sales\" role=\"tabpanel\">\n                            <form id=\"eggSalesForm\">\n                                <div class=\"row\">\n                                    <div class=\"col-md-3\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"eggSaleDate\" class=\"form-label\">Date</label>\n                                            <input type=\"date\" class=\"form-control\" id=\"eggSaleDate\" value=\"${today}\" required>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-md-3\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"eggCustomerName\" class=\"form-label\">Customer Name</label>\n                                            <input type=\"text\" class=\"form-control\" id=\"eggCustomerName\" required>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-md-3\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"cratesQuantity\" class=\"form-label\">Crates Sold</label>\n                                            <input type=\"number\" class=\"form-control\" id=\"cratesQuantity\" min=\"1\" step=\"0.1\" required>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-md-3\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"pricePerCrate\" class=\"form-label\">Price per Crate (${this.getUserCurrency() === 'GHS' ? '₵' : this.getUserCurrency() === 'USD' ? '$' : '£'})</label>\n                                            <input type=\"number\" class=\"form-control\" id=\"pricePerCrate\" step=\"0.01\" min=\"0\" required>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-md-4\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"eggsPerCrate\" class=\"form-label\">Eggs per Crate</label>\n                                            <input type=\"number\" class=\"form-control\" id=\"eggsPerCrate\" value=\"30\" min=\"1\" required>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-md-4\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"eggPaymentMethod\" class=\"form-label\">Payment Method</label>\n                                            <select class=\"form-select\" id=\"eggPaymentMethod\" required>\n                                                <option value=\"\">Select method...</option>\n                                                <option value=\"cash\">Cash</option>\n                                                <option value=\"mobile_money\">Mobile Money</option>\n                                                <option value=\"bank\">Bank Transfer</option>\n                                                <option value=\"check\">Check</option>\n                                                <option value=\"credit\">Credit</option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-md-4\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"eggTotalAmount\" class=\"form-label\">Total Amount (${this.getUserCurrency() === 'GHS' ? '₵' : this.getUserCurrency() === 'USD' ? '$' : '£'})</label>\n                                            <input type=\"number\" class=\"form-control\" id=\"eggTotalAmount\" step=\"0.01\" readonly>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-md-12\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"eggSalesNotes\" class=\"form-label\">Notes</label>\n                                            <textarea class=\"form-control\" id=\"eggSalesNotes\" rows=\"2\"></textarea>\n                                        </div>\n                                    </div>\n                                </div>\n                                <button type=\"submit\" class=\"btn btn-primary\">\n                                    <i class=\"fas fa-save me-2\"></i>Record Egg Sale\n                                </button>\n                            </form>\n                        </div>\n\n                        <!-- Birds Sold Tab -->\n                        <div class=\"tab-pane fade\" id=\"bird-sales\" role=\"tabpanel\">\n                            <form id=\"birdSalesForm\">\n                                <div class=\"row\">\n                                    <div class=\"col-md-3\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"birdSaleDate\" class=\"form-label\">Date</label>\n                                            <input type=\"date\" class=\"form-control\" id=\"birdSaleDate\" value=\"${today}\" required>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-md-3\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"birdCustomerName\" class=\"form-label\">Customer Name</label>\n                                            <input type=\"text\" class=\"form-control\" id=\"birdCustomerName\" required>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-md-3\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"birdsQuantity\" class=\"form-label\">Number of Birds</label>\n                                            <input type=\"number\" class=\"form-control\" id=\"birdsQuantity\" min=\"1\" required>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-md-3\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"pricePerBird\" class=\"form-label\">Price per Bird (${this.getUserCurrency() === 'GHS' ? '₵' : this.getUserCurrency() === 'USD' ? '$' : '£'})</label>\n                                            <input type=\"number\" class=\"form-control\" id=\"pricePerBird\" step=\"0.01\" min=\"0\" required>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-md-4\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"birdWeight\" class=\"form-label\">Average Weight (kg)</label>\n                                            <input type=\"number\" class=\"form-control\" id=\"birdWeight\" step=\"0.1\" min=\"0\">\n                                            <small class=\"text-muted\">Optional: Average weight per bird</small>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-md-4\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"birdPaymentMethod\" class=\"form-label\">Payment Method</label>\n                                            <select class=\"form-select\" id=\"birdPaymentMethod\" required>\n                                                <option value=\"\">Select method...</option>\n                                                <option value=\"cash\">Cash</option>\n                                                <option value=\"mobile_money\">Mobile Money</option>\n                                                <option value=\"bank\">Bank Transfer</option>\n                                                <option value=\"check\">Check</option>\n                                                <option value=\"credit\">Credit</option>\n                                            </select>\n                                        </div>\n                                    </div>\n                                    <div class=\"col-md-4\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"birdTotalAmount\" class=\"form-label\">Total Amount (${this.getUserCurrency() === 'GHS' ? '₵' : this.getUserCurrency() === 'USD' ? '$' : '£'})</label>\n                                            <input type=\"number\" class=\"form-control\" id=\"birdTotalAmount\" step=\"0.01\" readonly>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div class=\"row\">\n                                    <div class=\"col-md-12\">\n                                        <div class=\"mb-3\">\n                                            <label for=\"birdSalesNotes\" class=\"form-label\">Notes</label>\n                                            <textarea class=\"form-control\" id=\"birdSalesNotes\" rows=\"2\" placeholder=\"Reason for sale, breed, condition, etc.\"></textarea>\n                                        </div>\n                                    </div>\n                                </div>\n                                <button type=\"submit\" class=\"btn btn-success\">\n                                    <i class=\"fas fa-save me-2\"></i>Record Bird Sale\n                                </button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderSalesSummary() {\n        // Separate egg sales and bird sales\n        const eggSales = this.salesRecords.filter(sale => sale.saleType === 'eggs' || !sale.saleType);\n        const birdSales = this.salesRecords.filter(sale => sale.saleType === 'birds');\n        \n        const totalEggSales = eggSales.reduce((sum, sale) => sum + (sale.totalAmount || 0), 0);\n        const totalBirdSales = birdSales.reduce((sum, sale) => sum + (sale.totalAmount || 0), 0);\n        const totalSales = totalEggSales + totalBirdSales;\n        \n        const totalCrates = eggSales.reduce((sum, sale) => sum + (sale.cratesQuantity || 0), 0);\n        const totalEggsSold = eggSales.reduce((sum, sale) => sum + (sale.totalEggs || 0), 0);\n        const totalBirdsSold = birdSales.reduce((sum, sale) => sum + (sale.birdsQuantity || 0), 0);\n        \n        const avgPricePerCrate = totalCrates > 0 ? totalEggSales / totalCrates : 0;\n        const avgPricePerBird = totalBirdsSold > 0 ? totalBirdSales / totalBirdsSold : 0;\n\n        return `\n            <div class=\"row mb-4\">\n                <div class=\"col-md-2\">\n                    <div class=\"card stats-card\">\n                        <div class=\"card-body text-center\">\n                            <div class=\"stats-value text-success\">${this.formatCurrency(totalSales)}</div>\n                            <div class=\"stats-label\">Total Sales</div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"card stats-card\">\n                        <div class=\"card-body text-center\">\n                            <div class=\"stats-value text-primary\">${this.formatCurrency(totalEggSales)}</div>\n                            <div class=\"stats-label\">Egg Sales</div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"card stats-card\">\n                        <div class=\"card-body text-center\">\n                            <div class=\"stats-value text-warning\">${this.formatCurrency(totalBirdSales)}</div>\n                            <div class=\"stats-label\">Bird Sales</div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"card stats-card\">\n                        <div class=\"card-body text-center\">\n                            <div class=\"stats-value text-info\">${totalCrates.toFixed(1)}</div>\n                            <div class=\"stats-label\">Crates Sold</div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"card stats-card\">\n                        <div class=\"card-body text-center\">\n                            <div class=\"stats-value text-info\">${totalBirdsSold.toLocaleString()}</div>\n                            <div class=\"stats-label\">Birds Sold</div>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-2\">\n                    <div class=\"card stats-card\">\n                        <div class=\"card-body text-center\">\n                            <div class=\"stats-value text-secondary\">${this.salesRecords.length}</div>\n                            <div class=\"stats-label\">Total Records</div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderSalesHistory() {\n        if (this.salesRecords.length === 0) {\n            return `\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <div class=\"empty-state\">\n                            <i class=\"fas fa-shopping-cart\"></i>\n                            <h4>No Sales Records</h4>\n                            <p>Start recording your egg and bird sales to track revenue.</p>\n                        </div>\n                    </div>\n                </div>\n            `;\n        }\n\n        return `\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <h5 class=\"mb-0\">Sales History</h5>\n                </div>\n                <div class=\"card-body p-0\">\n                    <div class=\"table-responsive\">\n                        <table class=\"table table-hover mb-0\">\n                            <thead>\n                                <tr>\n                                    <th>Date</th>\n                                    <th>Type</th>\n                                    <th>Customer</th>\n                                    <th>Quantity</th>\n                                    <th>Unit Price</th>\n                                    <th>Total Amount</th>\n                                    <th>Payment</th>\n                                    <th>Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                ${this.salesRecords.map(sale => this.renderSalesRow(sale)).join('')}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderSalesRow(sale) {\n        const date = new Date(sale.date);\n        const day = String(date.getDate()).padStart(2, '0');\n        const month = String(date.getMonth() + 1).padStart(2, '0');\n        const year = date.getFullYear();\n        const formattedDate = `${day}/${month}/${year}`;\n        \n        const saleType = sale.saleType || 'eggs';\n        const typeIcon = saleType === 'birds' ? '<i class=\"fas fa-dove text-warning\"></i>' : '<i class=\"fas fa-egg text-primary\"></i>';\n        const quantity = saleType === 'birds' ? `${sale.birdsQuantity} birds` : `${sale.crates || sale.cratesQuantity} crates`;\n        const unitPrice = saleType === 'birds' ? this.formatCurrency(sale.pricePerBird || 0) : this.formatCurrency(sale.pricePerCrate || 0);\n        \n        return `\n            <tr>\n                <td>${formattedDate}</td>\n                <td>${typeIcon} ${saleType.charAt(0).toUpperCase() + saleType.slice(1)}</td>\n                <td><strong>${sale.customer || sale.customerName}</strong></td>\n                <td>${quantity}</td>\n                <td>${unitPrice}</td>\n                <td><strong>${this.formatCurrency(sale.totalAmount || sale.amount || 0)}</strong></td>\n                <td>\n                    <span class=\"badge ${this.getPaymentBadgeClass(sale.paymentMethod)}\">${sale.paymentMethod}</span>\n                </td>\n                <td>\n                    <div class=\"btn-group btn-group-sm\">\n                        <button class=\"btn btn-outline-danger\" onclick=\"salesManager.deleteSale(${sale.id})\">\n                            <i class=\"fas fa-trash\"></i>\n                        </button>\n                    </div>\n                </td>\n            </tr>\n        `;\n    }\n\n    getPaymentBadgeClass(method) {\n        const classes = {\n            'cash': 'bg-success',\n            'mobile_money': 'bg-info',\n            'bank': 'bg-primary',\n            'check': 'bg-info',\n            'credit': 'bg-warning'\n        };\n        return classes[method] || 'bg-secondary';\n    }\n\n    async handleEggSalesSubmit(event) {\n        event.preventDefault();\n\n        const crates = parseFloat(document.getElementById('cratesQuantity').value);\n        const pricePerCrate = parseFloat(document.getElementById('pricePerCrate').value);\n        const eggsPerCrate = parseInt(document.getElementById('eggsPerCrate').value);\n        const totalAmount = crates * pricePerCrate;\n        const totalEggs = crates * eggsPerCrate;\n        \n        const formData = {\n            cycleId: this.cycle.id,\n            saleType: 'eggs',\n            date: document.getElementById('eggSaleDate').value,\n            customerName: document.getElementById('eggCustomerName').value,\n            cratesQuantity: crates,\n            pricePerCrate: pricePerCrate,\n            eggsPerCrate: eggsPerCrate,\n            totalEggs: totalEggs,\n            totalAmount: totalAmount,\n            paymentMethod: document.getElementById('eggPaymentMethod').value,\n            notes: document.getElementById('eggSalesNotes').value,\n            createdAt: new Date().toISOString()\n        };\n\n        try {\n            await db.add('sales', formData);\n            this.showToast('Egg sale recorded successfully!', 'success');\n            \n            // Reset form\n            document.getElementById('eggSalesForm').reset();\n            document.getElementById('eggSaleDate').value = new Date().toISOString().split('T')[0];\n            document.getElementById('eggsPerCrate').value = 30;\n            \n            await this.init(this.cycle.id); // Refresh the view\n        } catch (error) {\n            console.error('Error recording egg sale:', error);\n            this.showToast('Error recording egg sale. Please try again.', 'error');\n        }\n    }\n\n    async handleBirdSalesSubmit(event) {\n        event.preventDefault();\n\n        const birdsQuantity = parseInt(document.getElementById('birdsQuantity').value);\n        const pricePerBird = parseFloat(document.getElementById('pricePerBird').value);\n        const totalAmount = birdsQuantity * pricePerBird;\n        const birdWeight = parseFloat(document.getElementById('birdWeight').value) || 0;\n        \n        const formData = {\n            cycleId: this.cycle.id,\n            saleType: 'birds',\n            date: document.getElementById('birdSaleDate').value,\n            customerName: document.getElementById('birdCustomerName').value,\n            birdsQuantity: birdsQuantity,\n            pricePerBird: pricePerBird,\n            birdWeight: birdWeight,\n            totalAmount: totalAmount,\n            paymentMethod: document.getElementById('birdPaymentMethod').value,\n            notes: document.getElementById('birdSalesNotes').value,\n            createdAt: new Date().toISOString()\n        };\n\n        try {\n            await db.add('sales', formData);\n            this.showToast('Bird sale recorded successfully!', 'success');\n            \n            // Reset form\n            document.getElementById('birdSalesForm').reset();\n            document.getElementById('birdSaleDate').value = new Date().toISOString().split('T')[0];\n            \n            await this.init(this.cycle.id); // Refresh the view\n        } catch (error) {\n            console.error('Error recording bird sale:', error);\n            this.showToast('Error recording bird sale. Please try again.', 'error');\n        }\n    }\n\n    calculateEggTotal() {\n        const crates = parseFloat(document.getElementById('cratesQuantity').value) || 0;\n        const pricePerCrate = parseFloat(document.getElementById('pricePerCrate').value) || 0;\n        const total = crates * pricePerCrate;\n        document.getElementById('eggTotalAmount').value = total.toFixed(2);\n    }\n\n    calculateBirdTotal() {\n        const birds = parseInt(document.getElementById('birdsQuantity').value) || 0;\n        const pricePerBird = parseFloat(document.getElementById('pricePerBird').value) || 0;\n        const total = birds * pricePerBird;\n        document.getElementById('birdTotalAmount').value = total.toFixed(2);\n    }\n\n    async deleteSale(saleId) {\n        if (!confirm('Are you sure you want to delete this sale record?')) {\n            return;\n        }\n\n        try {\n            await db.delete('sales', saleId);\n            this.showToast('Sale deleted successfully!', 'success');\n            await this.init(this.cycle.id); // Refresh the view\n        } catch (error) {\n            console.error('Error deleting sale:', error);\n            this.showToast('Error deleting sale. Please try again.', 'error');\n        }\n    }\n\n\n\n    showToast(message, type = 'info') {\n        const toast = document.getElementById('toast');\n        const toastBody = toast.querySelector('.toast-body');\n        \n        toastBody.textContent = message;\n        \n        const icon = toast.querySelector('.fas');\n        icon.className = type === 'success' ? 'fas fa-check-circle text-success me-2' : \n                        type === 'error' ? 'fas fa-exclamation-circle text-danger me-2' : \n                        'fas fa-info-circle text-primary me-2';\n        \n        const bsToast = new bootstrap.Toast(toast);\n        bsToast.show();\n    }\n}\n\n// Global sales manager instance\nconst salesManager = new SalesManager();\n\n// Event listeners are now handled within the render method for better component isolation","size_bytes":29852},"js/components/settings.js":{"content":"const settings = {\n    init() {\n        this.render();\n        this.attachEventListeners();\n        this.loadCurrentSettings();\n    },\n\n    render() {\n        const content = `\n            <div class=\"settings-page\">\n                <div class=\"page-header\">\n                    <h2><i class=\"fas fa-cog me-2\"></i>Settings</h2>\n                    <p class=\"text-muted\">Manage your application preferences and security settings</p>\n                </div>\n\n                <div class=\"row\">\n                    <div class=\"col-lg-8\">\n                        <!-- Security Settings -->\n                        <div class=\"card mb-4\">\n                            <div class=\"card-header\">\n                                <h5 class=\"card-title mb-0\">\n                                    <i class=\"fas fa-shield-alt me-2\"></i>Security Settings\n                                </h5>\n                            </div>\n                            <div class=\"card-body\">\n                                <form id=\"passwordForm\">\n                                    <div class=\"mb-3\">\n                                        <label for=\"currentPassword\" class=\"form-label\">Current Admin Password</label>\n                                        <div class=\"input-group\">\n                                            <span class=\"input-group-text\">\n                                                <i class=\"fas fa-lock\"></i>\n                                            </span>\n                                            <input type=\"password\" \n                                                   id=\"currentPassword\" \n                                                   class=\"form-control\" \n                                                   placeholder=\"Enter current password\"\n                                                   required>\n                                        </div>\n                                    </div>\n                                    \n                                    <div class=\"mb-3\">\n                                        <label for=\"newPassword\" class=\"form-label\">New Admin Password</label>\n                                        <div class=\"input-group\">\n                                            <span class=\"input-group-text\">\n                                                <i class=\"fas fa-key\"></i>\n                                            </span>\n                                            <input type=\"password\" \n                                                   id=\"newPassword\" \n                                                   class=\"form-control\" \n                                                   placeholder=\"Enter new password (min 6 characters)\"\n                                                   minlength=\"6\"\n                                                   required>\n                                        </div>\n                                    </div>\n                                    \n                                    <div class=\"mb-3\">\n                                        <label for=\"confirmPassword\" class=\"form-label\">Confirm New Password</label>\n                                        <div class=\"input-group\">\n                                            <span class=\"input-group-text\">\n                                                <i class=\"fas fa-key\"></i>\n                                            </span>\n                                            <input type=\"password\" \n                                                   id=\"confirmPassword\" \n                                                   class=\"form-control\" \n                                                   placeholder=\"Confirm new password\"\n                                                   required>\n                                        </div>\n                                    </div>\n                                    \n                                    <button type=\"submit\" class=\"btn btn-primary\">\n                                        <i class=\"fas fa-save me-2\"></i>Change Password\n                                    </button>\n                                </form>\n                            </div>\n                        </div>\n\n                        <!-- Application Settings -->\n                        <div class=\"card mb-4\">\n                            <div class=\"card-header\">\n                                <h5 class=\"card-title mb-0\">\n                                    <i class=\"fas fa-sliders-h me-2\"></i>Application Settings\n                                </h5>\n                            </div>\n                            <div class=\"card-body\">\n                                <form id=\"appSettingsForm\">\n                                    <div class=\"row\">\n                                        <div class=\"col-md-6\">\n                                            <div class=\"mb-3\">\n                                                <label for=\"currency\" class=\"form-label\">Default Currency</label>\n                                                <select id=\"currency\" class=\"form-select\">\n                                                    <option value=\"GHS\">Ghanaian Cedi (₵)</option>\n                                                    <option value=\"USD\">US Dollar ($)</option>\n                                                    <option value=\"GBP\">British Pound (£)</option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                        <div class=\"col-md-6\">\n                                            <div class=\"mb-3\">\n                                                <label for=\"defaultEggWeight\" class=\"form-label\">Default Egg Weight (grams)</label>\n                                                <input type=\"number\" \n                                                       id=\"defaultEggWeight\" \n                                                       class=\"form-control\" \n                                                       min=\"40\" \n                                                       max=\"80\" \n                                                       value=\"60\">\n                                            </div>\n                                        </div>\n                                    </div>\n                                    \n                                    <div class=\"row\">\n                                        <div class=\"col-md-6\">\n                                            <div class=\"mb-3\">\n                                                <label for=\"theme\" class=\"form-label\">Theme</label>\n                                                <select id=\"theme\" class=\"form-select\">\n                                                    <option value=\"light\">Light</option>\n                                                    <option value=\"dark\">Dark</option>\n                                                </select>\n                                            </div>\n                                        </div>\n                                        <div class=\"col-md-6\">\n                                            <div class=\"mb-3\">\n                                                <div class=\"form-check mt-4\">\n                                                    <input type=\"checkbox\" \n                                                           class=\"form-check-input\" \n                                                           id=\"enableNotifications\">\n                                                    <label class=\"form-check-label\" for=\"enableNotifications\">\n                                                        Enable Notifications\n                                                    </label>\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                    \n                                    <button type=\"submit\" class=\"btn btn-success\">\n                                        <i class=\"fas fa-save me-2\"></i>Save Settings\n                                    </button>\n                                </form>\n                            </div>\n                        </div>\n\n                        <!-- Data Management -->\n                        <div class=\"card mb-4\">\n                            <div class=\"card-header\">\n                                <h5 class=\"card-title mb-0\">\n                                    <i class=\"fas fa-database me-2\"></i>Data Management\n                                </h5>\n                            </div>\n                            <div class=\"card-body\">\n                                <div class=\"row\">\n                                    <div class=\"col-md-6\">\n                                        <h6>Backup Data</h6>\n                                        <p class=\"text-muted small\">Export all your data for backup purposes</p>\n                                        <button type=\"button\" class=\"btn btn-outline-primary\" id=\"exportDataBtn\">\n                                            <i class=\"fas fa-download me-2\"></i>Export All Data\n                                        </button>\n                                    </div>\n                                    <div class=\"col-md-6\">\n                                        <h6>Clear Data</h6>\n                                        <p class=\"text-muted small\">Remove all application data (cannot be undone)</p>\n                                        <button type=\"button\" class=\"btn btn-outline-danger\" id=\"clearDataBtn\">\n                                            <i class=\"fas fa-trash-alt me-2\"></i>Clear All Data\n                                        </button>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"col-lg-4\">\n                        <!-- App Information -->\n                        <div class=\"card\">\n                            <div class=\"card-header\">\n                                <h5 class=\"card-title mb-0\">\n                                    <i class=\"fas fa-info-circle me-2\"></i>Application Info\n                                </h5>\n                            </div>\n                            <div class=\"card-body\">\n                                <div class=\"mb-3\">\n                                    <strong>Version:</strong> 1.0.0\n                                </div>\n                                <div class=\"mb-3\">\n                                    <strong>Last Backup:</strong> \n                                    <span id=\"lastBackupDate\">Never</span>\n                                </div>\n                                <div class=\"mb-3\">\n                                    <strong>Storage Used:</strong> \n                                    <span id=\"storageUsed\">Calculating...</span>\n                                </div>\n                                <div class=\"mb-3\">\n                                    <strong>Total Records:</strong> \n                                    <span id=\"totalRecords\">Loading...</span>\n                                </div>\n                                \n                                <hr>\n                                \n                                <div class=\"d-grid\">\n                                    <button type=\"button\" class=\"btn btn-outline-secondary\" id=\"refreshStatsBtn\">\n                                        <i class=\"fas fa-sync-alt me-2\"></i>Refresh Stats\n                                    </button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.getElementById('app-content').innerHTML = content;\n    },\n\n    attachEventListeners() {\n        // Password change form\n        document.getElementById('passwordForm').addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.handlePasswordChange();\n        });\n\n        // App settings form\n        document.getElementById('appSettingsForm').addEventListener('submit', (e) => {\n            e.preventDefault();\n            this.handleAppSettingsChange();\n        });\n\n        // Data management buttons\n        document.getElementById('exportDataBtn').addEventListener('click', () => {\n            this.exportAllData();\n        });\n\n        document.getElementById('clearDataBtn').addEventListener('click', () => {\n            this.confirmClearData();\n        });\n\n        document.getElementById('refreshStatsBtn').addEventListener('click', () => {\n            this.loadAppStats();\n        });\n    },\n\n    loadCurrentSettings() {\n        const settings = JSON.parse(localStorage.getItem('poultrySettings') || '{}');\n        \n        // Load app settings\n        document.getElementById('currency').value = settings.currency || 'GHS';\n        document.getElementById('defaultEggWeight').value = settings.defaultEggWeight || 60;\n        document.getElementById('theme').value = settings.theme || 'light';\n        document.getElementById('enableNotifications').checked = settings.enableNotifications !== false;\n\n        // Load app stats\n        this.loadAppStats();\n    },\n\n    async loadAppStats() {\n        try {\n            // Get storage usage estimate\n            const storageEstimate = await navigator.storage.estimate();\n            const storageUsed = this.formatBytes(storageEstimate.usage || 0);\n            document.getElementById('storageUsed').textContent = storageUsed;\n\n            // Get record counts\n            const cycles = await db.getAll('cycles');\n            const cages = await db.getAll('cages');\n            const productionLogs = await db.getAll('productionLogs');\n            const feedLogs = await db.getAll('feedLogs');\n            \n            const totalRecords = cycles.length + cages.length + productionLogs.length + feedLogs.length;\n            document.getElementById('totalRecords').textContent = totalRecords.toLocaleString();\n\n            // Get last backup date\n            const lastBackup = localStorage.getItem('lastAutoBackup');\n            if (lastBackup) {\n                const backupDate = new Date(parseInt(lastBackup)).toLocaleDateString();\n                document.getElementById('lastBackupDate').textContent = backupDate;\n            }\n        } catch (error) {\n            console.error('Error loading app stats:', error);\n        }\n    },\n\n    handlePasswordChange() {\n        const currentPassword = document.getElementById('currentPassword').value;\n        const newPassword = document.getElementById('newPassword').value;\n        const confirmPassword = document.getElementById('confirmPassword').value;\n\n        // Validate current password\n        if (!auth.validatePassword(currentPassword)) {\n            this.showToast('Current password is incorrect', 'error');\n            return;\n        }\n\n        // Validate new password\n        if (newPassword.length < 6) {\n            this.showToast('New password must be at least 6 characters', 'error');\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            this.showToast('New passwords do not match', 'error');\n            return;\n        }\n\n        // Change password\n        if (auth.changePassword(newPassword)) {\n            this.showToast('Password changed successfully', 'success');\n            document.getElementById('passwordForm').reset();\n        } else {\n            this.showToast('Failed to change password', 'error');\n        }\n    },\n\n    handleAppSettingsChange() {\n        const newSettings = {\n            currency: document.getElementById('currency').value,\n            defaultEggWeight: parseInt(document.getElementById('defaultEggWeight').value),\n            theme: document.getElementById('theme').value,\n            enableNotifications: document.getElementById('enableNotifications').checked\n        };\n\n        localStorage.setItem('poultrySettings', JSON.stringify(newSettings));\n        this.showToast('Settings saved successfully', 'success');\n    },\n\n    async exportAllData() {\n        try {\n            // Get all data\n            const cycles = await db.getAll('cycles');\n            const cages = await db.getAll('cages');\n            const productionLogs = await db.getAll('productionLogs');\n            const feedLogs = await db.getAll('feedLogs');\n            const sales = await db.getAll('sales') || [];\n            const expenses = await db.getAll('expenses') || [];\n            const vaccinations = await db.getAll('vaccinations') || [];\n\n            const exportData = {\n                cycles,\n                cages,\n                productionLogs,\n                feedLogs,\n                sales,\n                expenses,\n                vaccinations,\n                exportDate: new Date().toISOString(),\n                version: '1.0'\n            };\n\n            // Create and download file\n            const dataStr = JSON.stringify(exportData, null, 2);\n            const blob = new Blob([dataStr], { type: 'application/json' });\n            const url = URL.createObjectURL(blob);\n            \n            const link = document.createElement('a');\n            link.href = url;\n            link.download = `poultry-backup-${new Date().toISOString().split('T')[0]}.json`;\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n            URL.revokeObjectURL(url);\n\n            this.showToast('Data exported successfully', 'success');\n        } catch (error) {\n            console.error('Export failed:', error);\n            this.showToast('Failed to export data', 'error');\n        }\n    },\n\n    confirmClearData() {\n        if (confirm('Are you sure you want to clear all data? This action cannot be undone.')) {\n            if (confirm('This will permanently delete all cycles, cages, production logs, and other data. Continue?')) {\n                this.clearAllData();\n            }\n        }\n    },\n\n    async clearAllData() {\n        try {\n            // Clear all object stores\n            await db.clear('cycles');\n            await db.clear('cages');\n            await db.clear('productionLogs');\n            await db.clear('feedLogs');\n            await db.clear('sales');\n            await db.clear('expenses');\n            await db.clear('vaccinations');\n\n            // Clear localStorage\n            localStorage.removeItem('autoBackup');\n            localStorage.removeItem('lastAutoBackup');\n\n            this.showToast('All data cleared successfully', 'success');\n            this.loadAppStats();\n        } catch (error) {\n            console.error('Failed to clear data:', error);\n            this.showToast('Failed to clear data', 'error');\n        }\n    },\n\n    formatBytes(bytes) {\n        if (bytes === 0) return '0 Bytes';\n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    },\n\n    showToast(message, type = 'info') {\n        // Try to use the app's toast method first\n        if (window.app && window.app.showToast) {\n            window.app.showToast(message, type);\n            return;\n        }\n\n        // Fallback to Bootstrap toast implementation\n        const toast = document.getElementById('toast');\n        if (toast) {\n            const toastBody = toast.querySelector('.toast-body');\n            if (toastBody) {\n                toastBody.textContent = message;\n                \n                const icon = toast.querySelector('.fas');\n                if (icon) {\n                    icon.className = type === 'success' ? 'fas fa-check-circle text-success me-2' : \n                                    type === 'error' ? 'fas fa-exclamation-circle text-danger me-2' : \n                                    type === 'warning' ? 'fas fa-exclamation-triangle text-warning me-2' :\n                                    'fas fa-info-circle text-primary me-2';\n                }\n                \n                // Show the toast using Bootstrap\n                if (typeof bootstrap !== 'undefined' && bootstrap.Toast) {\n                    const bsToast = new bootstrap.Toast(toast);\n                    bsToast.show();\n                } else {\n                    // Fallback for when Bootstrap isn't available\n                    toast.style.display = 'block';\n                    setTimeout(() => {\n                        toast.style.display = 'none';\n                    }, 3000);\n                }\n                return;\n            }\n        }\n\n        // Ultimate fallback - just use alert for important messages\n        if (type === 'error' || type === 'success') {\n            alert(`${type.toUpperCase()}: ${message}`);\n        } else {\n            console.log(`${type.toUpperCase()}: ${message}`);\n        }\n    }\n};","size_bytes":21185},"js/components/vaccination-manager.js":{"content":"class VaccinationManager {\n    constructor() {\n        this.cycle = null;\n        this.vaccinations = [];\n        this.customSchedule = [];\n    }\n\n    async init(cycleId) {\n        this.cycle = await db.get('cycles', parseInt(cycleId));\n        this.vaccinations = await db.getByIndex('vaccinations', 'cycleId', parseInt(cycleId));\n        this.vaccinations.sort((a, b) => new Date(b.date) - new Date(a.date));\n        \n        // Load custom schedule for this cycle\n        this.customSchedule = await this.loadCustomSchedule(parseInt(cycleId));\n        \n        this.render();\n    }\n\n    render() {\n        const content = `\n            <div class=\"vaccination-manager fade-in\">\n                ${this.renderHeader()}\n                ${this.renderVaccinationForm()}\n                ${this.renderVaccinationSchedule()}\n                ${this.renderVaccinationHistory()}\n            </div>\n        `;\n\n        document.getElementById('app-content').innerHTML = content;\n        \n        // Initialize flock age calculation\n        setTimeout(() => {\n            this.initializeFlockAge();\n        }, 100);\n    }\n\n    renderHeader() {\n        return `\n            <div class=\"d-flex justify-content-between align-items-center mb-4\">\n                <div>\n                    <h2>Vaccination Management</h2>\n                    <p class=\"text-muted mb-0\">Cycle: ${this.cycle?.name || 'Unknown'}</p>\n                </div>\n                <button class=\"btn btn-outline-secondary\" onclick=\"router.navigate('analytics', {cycleId: ${this.cycle?.id}})\">\n                    <i class=\"fas fa-arrow-left me-2\"></i>Back to Analytics\n                </button>\n            </div>\n        `;\n    }\n\n    renderVaccinationForm() {\n        const today = new Date().toISOString().split('T')[0];\n\n        return `\n            <div class=\"card mb-4\">\n                <div class=\"card-header\">\n                    <h5 class=\"mb-0\"><i class=\"fas fa-syringe me-2\"></i>Record Vaccination</h5>\n                </div>\n                <div class=\"card-body\">\n                    <form id=\"vaccinationForm\">\n                        <div class=\"row\">\n                            <div class=\"col-md-3\">\n                                <div class=\"mb-3\">\n                                    <label for=\"vaccinationDate\" class=\"form-label\">Date</label>\n                                    <input type=\"date\" class=\"form-control\" id=\"vaccinationDate\" value=\"${today}\" required>\n                                </div>\n                            </div>\n                            <div class=\"col-md-3\">\n                                <div class=\"mb-3\">\n                                    <label for=\"flockAgeVacc\" class=\"form-label\">Flock Age (days)</label>\n                                    <input type=\"number\" class=\"form-control\" id=\"flockAgeVacc\" readonly style=\"background-color: #f8f9fa;\" title=\"Automatically calculated from cycle start date\">\n                                    <small class=\"text-muted\">Calculated automatically</small>\n                                </div>\n                            </div>\n                            <div class=\"col-md-3\">\n                                <div class=\"mb-3\">\n                                    <label for=\"vaccineName\" class=\"form-label\">Vaccine Name</label>\n                                    <select class=\"form-select\" id=\"vaccineName\" required>\n                                        <option value=\"\">Select vaccine...</option>\n                                        <option value=\"Marek's Disease\">Marek's Disease</option>\n                                        <option value=\"Newcastle Disease\">Newcastle Disease</option>\n                                        <option value=\"Infectious Bronchitis\">Infectious Bronchitis</option>\n                                        <option value=\"Gumboro/IBD\">Gumboro (IBD)</option>\n                                        <option value=\"Fowl Pox\">Fowl Pox</option>\n                                        <option value=\"Avian Influenza\">Avian Influenza</option>\n                                        <option value=\"Infectious Coryza\">Infectious Coryza</option>\n                                        <option value=\"Egg Drop Syndrome\">Egg Drop Syndrome</option>\n                                        <option value=\"Salmonella\">Salmonella</option>\n                                        <option value=\"Other\">Other</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <div class=\"col-md-3\">\n                                <div class=\"mb-3\">\n                                    <label for=\"administrationMethod\" class=\"form-label\">Method</label>\n                                    <select class=\"form-select\" id=\"administrationMethod\" required>\n                                        <option value=\"\">Select method...</option>\n                                        <option value=\"drinking_water\">Drinking Water</option>\n                                        <option value=\"injection\">Injection</option>\n                                        <option value=\"spray\">Spray</option>\n                                        <option value=\"eye_drop\">Eye Drop</option>\n                                        <option value=\"wing_web\">Wing Web</option>\n                                        <option value=\"in_ovo\">In Ovo</option>\n                                    </select>\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-md-3\">\n                                <div class=\"mb-3\">\n                                    <label for=\"dosage\" class=\"form-label\">Dosage</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"dosage\" placeholder=\"e.g., 1ml per bird\">\n                                </div>\n                            </div>\n                            <div class=\"col-md-3\">\n                                <div class=\"mb-3\">\n                                    <label for=\"birdsTreated\" class=\"form-label\">Birds Treated</label>\n                                    <input type=\"number\" class=\"form-control\" id=\"birdsTreated\" min=\"1\" required>\n                                </div>\n                            </div>\n                            <div class=\"col-md-3\">\n                                <div class=\"mb-3\">\n                                    <label for=\"batchNumber\" class=\"form-label\">Batch/Lot Number</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"batchNumber\">\n                                </div>\n                            </div>\n                            <div class=\"col-md-3\">\n                                <div class=\"mb-3\">\n                                    <label for=\"expiryDate\" class=\"form-label\">Vaccine Expiry</label>\n                                    <input type=\"date\" class=\"form-control\" id=\"expiryDate\">\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-md-6\">\n                                <div class=\"mb-3\">\n                                    <label for=\"manufacturer\" class=\"form-label\">Manufacturer</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"manufacturer\">\n                                </div>\n                            </div>\n                            <div class=\"col-md-6\">\n                                <div class=\"mb-3\">\n                                    <label for=\"veterinarian\" class=\"form-label\">Veterinarian</label>\n                                    <input type=\"text\" class=\"form-control\" id=\"veterinarian\">\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"row\">\n                            <div class=\"col-md-12\">\n                                <div class=\"mb-3\">\n                                    <label for=\"vaccinationNotes\" class=\"form-label\">Notes</label>\n                                    <textarea class=\"form-control\" id=\"vaccinationNotes\" rows=\"2\" \n                                              placeholder=\"Any observations, reactions, or additional notes...\"></textarea>\n                                </div>\n                            </div>\n                        </div>\n                        <button type=\"submit\" class=\"btn btn-primary\">\n                            <i class=\"fas fa-save me-2\"></i>Record Vaccination\n                        </button>\n                    </form>\n                </div>\n            </div>\n        `;\n    }\n\n    renderVaccinationSchedule() {\n        const schedule = this.getVaccinationSchedule();\n\n        return `\n            <div class=\"card mb-4\">\n                <div class=\"card-header d-flex justify-content-between align-items-center\">\n                    <h5 class=\"mb-0\"><i class=\"fas fa-calendar-alt me-2\"></i>Vaccination Schedule</h5>\n                    <div class=\"btn-group btn-group-sm\">\n                        <button class=\"btn btn-outline-primary\" onclick=\"vaccinationManager.showScheduleManager()\">\n                            <i class=\"fas fa-edit me-1\"></i>Customize Schedule\n                        </button>\n                        <button class=\"btn btn-outline-secondary\" onclick=\"vaccinationManager.resetToStandardSchedule()\">\n                            <i class=\"fas fa-undo me-1\"></i>Use Standard\n                        </button>\n                    </div>\n                </div>\n                <div class=\"card-body\">\n                    ${schedule.length === 0 ? `\n                        <div class=\"text-center py-4\">\n                            <i class=\"fas fa-calendar-plus fa-3x text-muted mb-3\"></i>\n                            <h5>No Schedule Set</h5>\n                            <p class=\"text-muted\">Create a custom vaccination schedule or use the standard schedule.</p>\n                            <button class=\"btn btn-primary me-2\" onclick=\"vaccinationManager.showScheduleManager()\">\n                                <i class=\"fas fa-plus me-1\"></i>Create Custom Schedule\n                            </button>\n                            <button class=\"btn btn-outline-primary\" onclick=\"vaccinationManager.resetToStandardSchedule()\">\n                                <i class=\"fas fa-calendar me-1\"></i>Use Standard Schedule\n                            </button>\n                        </div>\n                    ` : `\n                        <div class=\"row\">\n                            ${schedule.map(item => `\n                                <div class=\"col-md-4 mb-3\">\n                                    <div class=\"card border-left-${item.completed ? 'success' : 'warning'}\">\n                                        <div class=\"card-body p-3\">\n                                            <h6 class=\"card-title mb-1\">${item.vaccine}</h6>\n                                            <p class=\"card-text text-muted mb-1\">Day ${item.day} (${item.weeks} weeks)</p>\n                                            <small class=\"text-${item.completed ? 'success' : 'warning'}\">\n                                                ${item.completed ? '✓ Completed' : '⏳ Pending'}\n                                            </small>\n                                        </div>\n                                    </div>\n                                </div>\n                            `).join('')}\n                        </div>\n                    `}\n                </div>\n            </div>\n        `;\n    }\n\n    renderVaccinationHistory() {\n        if (this.vaccinations.length === 0) {\n            return `\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <div class=\"empty-state\">\n                            <i class=\"fas fa-syringe\"></i>\n                            <h4>No Vaccination Records</h4>\n                            <p>Start recording vaccinations to track flock health.</p>\n                        </div>\n                    </div>\n                </div>\n            `;\n        }\n\n        return `\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <h5 class=\"mb-0\">Vaccination History</h5>\n                </div>\n                <div class=\"card-body p-0\">\n                    <div class=\"table-responsive\">\n                        <table class=\"table table-hover mb-0\">\n                            <thead>\n                                <tr>\n                                    <th>Date</th>\n                                    <th>Age (days)</th>\n                                    <th>Vaccine</th>\n                                    <th>Method</th>\n                                    <th>Birds Treated</th>\n                                    <th>Veterinarian</th>\n                                    <th>Actions</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                ${this.vaccinations.map(vaccination => this.renderVaccinationRow(vaccination)).join('')}\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        `;\n    }\n\n    renderVaccinationRow(vaccination) {\n        return `\n            <tr>\n                <td>${this.formatDate(vaccination.date)}</td>\n                <td><span class=\"badge bg-info\">${vaccination.flockAge}</span></td>\n                <td><strong>${vaccination.vaccineName}</strong></td>\n                <td>\n                    <span class=\"badge ${this.getMethodBadgeClass(vaccination.administrationMethod)}\">\n                        ${vaccination.administrationMethod.replace('_', ' ')}\n                    </span>\n                </td>\n                <td>${vaccination.birdsTreated}</td>\n                <td>${vaccination.veterinarian || '-'}</td>\n                <td>\n                    <div class=\"btn-group btn-group-sm\">\n                        <button class=\"btn btn-outline-info\" onclick=\"vaccinationManager.viewVaccinationDetails(${vaccination.id})\">\n                            <i class=\"fas fa-eye\"></i>\n                        </button>\n                        <button class=\"btn btn-outline-danger\" onclick=\"vaccinationManager.deleteVaccination(${vaccination.id})\">\n                            <i class=\"fas fa-trash\"></i>\n                        </button>\n                    </div>\n                </td>\n            </tr>\n        `;\n    }\n\n    getMethodBadgeClass(method) {\n        const classes = {\n            'drinking_water': 'bg-primary',\n            'injection': 'bg-danger',\n            'spray': 'bg-info',\n            'eye_drop': 'bg-warning',\n            'wing_web': 'bg-success',\n            'in_ovo': 'bg-secondary'\n        };\n        return classes[method] || 'bg-secondary';\n    }\n\n    getVaccinationSchedule() {\n        // Use custom schedule if available, otherwise use standard schedule\n        const schedule = this.customSchedule.length > 0 ? this.customSchedule : this.getStandardSchedule();\n\n        return schedule.map(item => {\n            const completed = this.vaccinations.some(vacc => \n                vacc.vaccineName.toLowerCase().includes(item.vaccine.toLowerCase()) &&\n                Math.abs(vacc.flockAge - item.day) <= 3 // Allow 3 days tolerance\n            );\n            return { ...item, completed };\n        });\n    }\n\n    getStandardSchedule() {\n        return [\n            { day: 1, weeks: 0, vaccine: \"Marek's Disease\", method: \"injection\" },\n            { day: 7, weeks: 1, vaccine: \"Newcastle + IB\", method: \"spray\" },\n            { day: 14, weeks: 2, vaccine: \"Gumboro (IBD)\", method: \"drinking_water\" },\n            { day: 21, weeks: 3, vaccine: \"Newcastle + IB\", method: \"drinking_water\" },\n            { day: 28, weeks: 4, vaccine: \"Gumboro (IBD)\", method: \"drinking_water\" },\n            { day: 35, weeks: 5, vaccine: \"Newcastle\", method: \"drinking_water\" },\n            { day: 63, weeks: 9, vaccine: \"Fowl Pox\", method: \"wing_web\" },\n            { day: 105, weeks: 15, vaccine: \"Newcastle + IB\", method: \"injection\" },\n            { day: 119, weeks: 17, vaccine: \"Egg Drop Syndrome\", method: \"injection\" }\n        ];\n    }\n\n    async handleVaccinationSubmit(event) {\n        event.preventDefault();\n\n        const formData = {\n            cycleId: this.cycle.id,\n            date: document.getElementById('vaccinationDate').value,\n            flockAge: parseInt(document.getElementById('flockAgeVacc').value),\n            vaccineName: document.getElementById('vaccineName').value,\n            administrationMethod: document.getElementById('administrationMethod').value,\n            dosage: document.getElementById('dosage').value,\n            birdsTreated: parseInt(document.getElementById('birdsTreated').value),\n            batchNumber: document.getElementById('batchNumber').value,\n            expiryDate: document.getElementById('expiryDate').value,\n            manufacturer: document.getElementById('manufacturer').value,\n            veterinarian: document.getElementById('veterinarian').value,\n            notes: document.getElementById('vaccinationNotes').value,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString()\n        };\n\n        try {\n            await db.add('vaccinations', formData);\n            this.showToast('Vaccination recorded successfully!', 'success');\n            \n            // Reset form\n            document.getElementById('vaccinationForm').reset();\n            document.getElementById('vaccinationDate').value = new Date().toISOString().split('T')[0];\n            \n            await this.init(this.cycle.id); // Refresh the view\n        } catch (error) {\n            console.error('Error recording vaccination:', error);\n            this.showToast('Error recording vaccination. Please try again.', 'error');\n        }\n    }\n\n    async deleteVaccination(vaccinationId) {\n        if (!confirm('Are you sure you want to delete this vaccination record?')) {\n            return;\n        }\n\n        try {\n            await db.delete('vaccinations', vaccinationId);\n            this.showToast('Vaccination deleted successfully!', 'success');\n            await this.init(this.cycle.id); // Refresh the view\n        } catch (error) {\n            console.error('Error deleting vaccination:', error);\n            this.showToast('Error deleting vaccination. Please try again.', 'error');\n        }\n    }\n\n    viewVaccinationDetails(vaccinationId) {\n        const vaccination = this.vaccinations.find(v => v.id === vaccinationId);\n        if (!vaccination) return;\n\n        const modal = `\n            <div class=\"modal fade\" id=\"vaccinationDetailModal\" tabindex=\"-1\">\n                <div class=\"modal-dialog\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\">Vaccination Details</h5>\n                            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <div class=\"row\">\n                                <div class=\"col-6\"><strong>Date:</strong></div>\n                                <div class=\"col-6\">${this.formatDate(vaccination.date)}</div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-6\"><strong>Flock Age:</strong></div>\n                                <div class=\"col-6\">${vaccination.flockAge} days</div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-6\"><strong>Vaccine:</strong></div>\n                                <div class=\"col-6\">${vaccination.vaccineName}</div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-6\"><strong>Method:</strong></div>\n                                <div class=\"col-6\">${vaccination.administrationMethod.replace('_', ' ')}</div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-6\"><strong>Dosage:</strong></div>\n                                <div class=\"col-6\">${vaccination.dosage || 'N/A'}</div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-6\"><strong>Birds Treated:</strong></div>\n                                <div class=\"col-6\">${vaccination.birdsTreated}</div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-6\"><strong>Batch Number:</strong></div>\n                                <div class=\"col-6\">${vaccination.batchNumber || 'N/A'}</div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-6\"><strong>Manufacturer:</strong></div>\n                                <div class=\"col-6\">${vaccination.manufacturer || 'N/A'}</div>\n                            </div>\n                            <div class=\"row\">\n                                <div class=\"col-6\"><strong>Veterinarian:</strong></div>\n                                <div class=\"col-6\">${vaccination.veterinarian || 'N/A'}</div>\n                            </div>\n                            ${vaccination.notes ? `\n                                <hr>\n                                <div class=\"row\">\n                                    <div class=\"col-12\"><strong>Notes:</strong></div>\n                                    <div class=\"col-12\">${vaccination.notes}</div>\n                                </div>\n                            ` : ''}\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.getElementById('modal-container').innerHTML = modal;\n        const modalElement = new bootstrap.Modal(document.getElementById('vaccinationDetailModal'));\n        modalElement.show();\n    }\n\n    calculateFlockAge(date) {\n        if (!this.cycle || !this.cycle.startDate) return 1;\n        const startDate = new Date(this.cycle.startDate);\n        const currentDate = new Date(date);\n        const diffTime = Math.abs(currentDate - startDate);\n        return Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    }\n\n    initializeFlockAge() {\n        const dateInput = document.getElementById('vaccinationDate');\n        const flockAgeInput = document.getElementById('flockAgeVacc');\n        \n        if (dateInput && flockAgeInput) {\n            // Calculate and set initial flock age\n            const flockAge = this.calculateFlockAge(dateInput.value);\n            flockAgeInput.value = flockAge;\n            \n            // Add event listener for date changes\n            dateInput.addEventListener('change', () => {\n                const newFlockAge = this.calculateFlockAge(dateInput.value);\n                flockAgeInput.value = newFlockAge;\n            });\n        }\n    }\n\n    async loadCustomSchedule(cycleId) {\n        try {\n            // Try to load custom schedule from localStorage first, then from a potential future database table\n            const scheduleKey = `vaccination_schedule_${cycleId}`;\n            const savedSchedule = localStorage.getItem(scheduleKey);\n            return savedSchedule ? JSON.parse(savedSchedule) : [];\n        } catch (error) {\n            console.error('Error loading custom schedule:', error);\n            return [];\n        }\n    }\n\n    async saveCustomSchedule(schedule) {\n        try {\n            const scheduleKey = `vaccination_schedule_${this.cycle.id}`;\n            localStorage.setItem(scheduleKey, JSON.stringify(schedule));\n            this.customSchedule = schedule;\n            this.showToast('Custom vaccination schedule saved successfully!', 'success');\n            this.render(); // Refresh the view\n        } catch (error) {\n            console.error('Error saving custom schedule:', error);\n            this.showToast('Error saving custom schedule. Please try again.', 'error');\n        }\n    }\n\n    async resetToStandardSchedule() {\n        if (!confirm('This will replace your custom schedule with the standard vaccination schedule. Continue?')) {\n            return;\n        }\n\n        try {\n            const scheduleKey = `vaccination_schedule_${this.cycle.id}`;\n            localStorage.removeItem(scheduleKey);\n            this.customSchedule = [];\n            this.showToast('Switched to standard vaccination schedule.', 'success');\n            this.render(); // Refresh the view\n        } catch (error) {\n            console.error('Error resetting schedule:', error);\n            this.showToast('Error resetting schedule. Please try again.', 'error');\n        }\n    }\n\n    showScheduleManager() {\n        const currentSchedule = this.customSchedule.length > 0 ? this.customSchedule : this.getStandardSchedule();\n        \n        const modal = `\n            <div class=\"modal fade\" id=\"scheduleManagerModal\" tabindex=\"-1\">\n                <div class=\"modal-dialog modal-xl\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <h5 class=\"modal-title\">\n                                <i class=\"fas fa-calendar-edit me-2\"></i>Customize Vaccination Schedule\n                            </h5>\n                            <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\"></button>\n                        </div>\n                        <div class=\"modal-body\">\n                            <div class=\"mb-3\">\n                                <div class=\"d-flex justify-content-between align-items-center mb-3\">\n                                    <h6>Schedule Items</h6>\n                                    <button class=\"btn btn-sm btn-success\" onclick=\"vaccinationManager.addScheduleItem()\">\n                                        <i class=\"fas fa-plus me-1\"></i>Add Item\n                                    </button>\n                                </div>\n                                <div id=\"schedule-items\">\n                                    ${this.renderScheduleItems(currentSchedule)}\n                                </div>\n                            </div>\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Cancel</button>\n                            <button type=\"button\" class=\"btn btn-primary\" onclick=\"vaccinationManager.saveScheduleFromModal()\">\n                                <i class=\"fas fa-save me-2\"></i>Save Schedule\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;\n\n        document.getElementById('modal-container').innerHTML = modal;\n        const modalElement = new bootstrap.Modal(document.getElementById('scheduleManagerModal'));\n        modalElement.show();\n    }\n\n    renderScheduleItems(schedule) {\n        return schedule.map((item, index) => `\n            <div class=\"row mb-3 schedule-item\" data-index=\"${index}\">\n                <div class=\"col-md-2\">\n                    <label class=\"form-label\">Day</label>\n                    <input type=\"number\" class=\"form-control\" value=\"${item.day}\" min=\"1\" \n                           onchange=\"vaccinationManager.updateScheduleItem(${index}, 'day', this.value)\">\n                </div>\n                <div class=\"col-md-2\">\n                    <label class=\"form-label\">Weeks</label>\n                    <input type=\"number\" class=\"form-control\" value=\"${item.weeks}\" min=\"0\" step=\"0.1\"\n                           onchange=\"vaccinationManager.updateScheduleItem(${index}, 'weeks', this.value)\">\n                </div>\n                <div class=\"col-md-3\">\n                    <label class=\"form-label\">Vaccine</label>\n                    <input type=\"text\" class=\"form-control\" value=\"${item.vaccine}\" \n                           onchange=\"vaccinationManager.updateScheduleItem(${index}, 'vaccine', this.value)\">\n                </div>\n                <div class=\"col-md-3\">\n                    <label class=\"form-label\">Method</label>\n                    <select class=\"form-select\" onchange=\"vaccinationManager.updateScheduleItem(${index}, 'method', this.value)\">\n                        <option value=\"drinking_water\" ${item.method === 'drinking_water' ? 'selected' : ''}>Drinking Water</option>\n                        <option value=\"injection\" ${item.method === 'injection' ? 'selected' : ''}>Injection</option>\n                        <option value=\"spray\" ${item.method === 'spray' ? 'selected' : ''}>Spray</option>\n                        <option value=\"eye_drop\" ${item.method === 'eye_drop' ? 'selected' : ''}>Eye Drop</option>\n                        <option value=\"wing_web\" ${item.method === 'wing_web' ? 'selected' : ''}>Wing Web</option>\n                        <option value=\"in_ovo\" ${item.method === 'in_ovo' ? 'selected' : ''}>In Ovo</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2 d-flex align-items-end\">\n                    <button class=\"btn btn-outline-danger btn-sm\" onclick=\"vaccinationManager.removeScheduleItem(${index})\">\n                        <i class=\"fas fa-trash\"></i>\n                    </button>\n                </div>\n            </div>\n        `).join('');\n    }\n\n    addScheduleItem() {\n        const scheduleItems = document.getElementById('schedule-items');\n        const currentItems = Array.from(scheduleItems.children);\n        const newIndex = currentItems.length;\n        \n        const newItem = document.createElement('div');\n        newItem.innerHTML = `\n            <div class=\"row mb-3 schedule-item\" data-index=\"${newIndex}\">\n                <div class=\"col-md-2\">\n                    <label class=\"form-label\">Day</label>\n                    <input type=\"number\" class=\"form-control\" value=\"1\" min=\"1\" \n                           onchange=\"vaccinationManager.updateScheduleItem(${newIndex}, 'day', this.value)\">\n                </div>\n                <div class=\"col-md-2\">\n                    <label class=\"form-label\">Weeks</label>\n                    <input type=\"number\" class=\"form-control\" value=\"0\" min=\"0\" step=\"0.1\"\n                           onchange=\"vaccinationManager.updateScheduleItem(${newIndex}, 'weeks', this.value)\">\n                </div>\n                <div class=\"col-md-3\">\n                    <label class=\"form-label\">Vaccine</label>\n                    <input type=\"text\" class=\"form-control\" value=\"\" placeholder=\"Enter vaccine name\"\n                           onchange=\"vaccinationManager.updateScheduleItem(${newIndex}, 'vaccine', this.value)\">\n                </div>\n                <div class=\"col-md-3\">\n                    <label class=\"form-label\">Method</label>\n                    <select class=\"form-select\" onchange=\"vaccinationManager.updateScheduleItem(${newIndex}, 'method', this.value)\">\n                        <option value=\"drinking_water\">Drinking Water</option>\n                        <option value=\"injection\">Injection</option>\n                        <option value=\"spray\">Spray</option>\n                        <option value=\"eye_drop\">Eye Drop</option>\n                        <option value=\"wing_web\">Wing Web</option>\n                        <option value=\"in_ovo\">In Ovo</option>\n                    </select>\n                </div>\n                <div class=\"col-md-2 d-flex align-items-end\">\n                    <button class=\"btn btn-outline-danger btn-sm\" onclick=\"vaccinationManager.removeScheduleItem(${newIndex})\">\n                        <i class=\"fas fa-trash\"></i>\n                    </button>\n                </div>\n            </div>\n        `;\n        \n        scheduleItems.appendChild(newItem.firstElementChild);\n    }\n\n    updateScheduleItem(index, field, value) {\n        // This will be handled when saving the schedule\n        console.log(`Updated item ${index}, field ${field} to ${value}`);\n    }\n\n    removeScheduleItem(index) {\n        const item = document.querySelector(`[data-index=\"${index}\"]`);\n        if (item) {\n            item.remove();\n        }\n    }\n\n    saveScheduleFromModal() {\n        const scheduleItems = document.querySelectorAll('.schedule-item');\n        const newSchedule = [];\n        \n        scheduleItems.forEach(item => {\n            const day = parseInt(item.querySelector('input[type=\"number\"]').value);\n            const weeks = parseFloat(item.querySelectorAll('input[type=\"number\"]')[1].value);\n            const vaccine = item.querySelector('input[type=\"text\"]').value.trim();\n            const method = item.querySelector('select').value;\n            \n            if (vaccine && day > 0) {\n                newSchedule.push({\n                    day: day,\n                    weeks: weeks,\n                    vaccine: vaccine,\n                    method: method\n                });\n            }\n        });\n        \n        // Sort by day\n        newSchedule.sort((a, b) => a.day - b.day);\n        \n        if (newSchedule.length === 0) {\n            this.showToast('Please add at least one vaccination item.', 'error');\n            return;\n        }\n        \n        this.saveCustomSchedule(newSchedule);\n        \n        // Close modal\n        const modal = bootstrap.Modal.getInstance(document.getElementById('scheduleManagerModal'));\n        modal.hide();\n    }\n\n    showToast(message, type = 'info') {\n        const toast = document.getElementById('toast');\n        const toastBody = toast.querySelector('.toast-body');\n        \n        toastBody.textContent = message;\n        \n        const icon = toast.querySelector('.fas');\n        icon.className = type === 'success' ? 'fas fa-check-circle text-success me-2' : \n                        type === 'error' ? 'fas fa-exclamation-circle text-danger me-2' : \n                        'fas fa-info-circle text-primary me-2';\n        \n        const bsToast = new bootstrap.Toast(toast);\n        bsToast.show();\n    }\n\n    formatDate(date) {\n        const d = new Date(date);\n        const day = String(d.getDate()).padStart(2, '0');\n        const month = String(d.getMonth() + 1).padStart(2, '0');\n        const year = d.getFullYear();\n        return `${day}/${month}/${year}`;\n    }\n}\n\n// Global vaccination manager instance\nconst vaccinationManager = new VaccinationManager();\n\n// Event listeners\ndocument.addEventListener('DOMContentLoaded', () => {\n    document.addEventListener('submit', (e) => {\n        if (e.target.id === 'vaccinationForm') {\n            vaccinationManager.handleVaccinationSubmit(e);\n        }\n    });\n\n\n});","size_bytes":35328},"js/utils/calculations.js":{"content":"class Calculations {\n    static calculateLayingPercentage(eggsLaid, birdsCount, daysInPeriod = 1) {\n        if (birdsCount === 0 || daysInPeriod === 0) return 0;\n        return ((eggsLaid / (birdsCount * daysInPeriod)) * 100);\n    }\n\n    static calculateFeedConversionRatio(feedConsumed, eggsProduced, avgEggWeight = 60) {\n        const totalEggWeight = (eggsProduced * avgEggWeight) / 1000; // Convert to kg\n        if (totalEggWeight === 0) return 0;\n        return feedConsumed / totalEggWeight;\n    }\n\n    static calculateFeedEfficiency(eggsProduced, feedConsumed, avgEggWeight = 60) {\n        if (feedConsumed === 0) return 0;\n        const totalEggWeight = (eggsProduced * avgEggWeight) / 1000; // Convert to kg\n        return totalEggWeight / feedConsumed;\n    }\n\n    static calculateMortality(deaths, totalBirds) {\n        if (totalBirds === 0) return 0;\n        return (deaths / totalBirds) * 100;\n    }\n\n    static calculateProductionCost(feedCost, laborCost, otherCosts = 0) {\n        return feedCost + laborCost + otherCosts;\n    }\n\n    static calculateProfitability(revenue, costs) {\n        return revenue - costs;\n    }\n\n    static calculateAverageEggWeight(totalWeight, eggCount) {\n        if (eggCount === 0) return 0;\n        return totalWeight / eggCount;\n    }\n\n    static calculateDailyFeedPerBird(totalFeed, birdsCount, days = 1) {\n        if (birdsCount === 0 || days === 0) return 0;\n        return (totalFeed * 1000) / (birdsCount * days); // Convert kg to grams\n    }\n\n    static calculatePeakProduction(productionData) {\n        if (!productionData || productionData.length === 0) return 0;\n        return Math.max(...productionData.map(d => d.layingPercentage || 0));\n    }\n\n    static calculateCumulativeProduction(logs) {\n        if (!logs || logs.length === 0) return 0;\n        return logs.reduce((total, log) => total + (log.eggsCollected || log.eggsProduced || 0), 0);\n    }\n\n    static calculateAverageProduction(logs, days) {\n        if (!logs || logs.length === 0 || days === 0) return 0;\n        const totalEggs = this.calculateCumulativeProduction(logs);\n        return totalEggs / days;\n    }\n\n    static calculateEfficiencyTrend(currentPeriod, previousPeriod) {\n        if (!previousPeriod || previousPeriod === 0) return 0;\n        return ((currentPeriod - previousPeriod) / previousPeriod) * 100;\n    }\n\n    static calculateBreakEvenPoint(fixedCosts, pricePerEgg, variableCostPerEgg) {\n        const contributionPerEgg = pricePerEgg - variableCostPerEgg;\n        if (contributionPerEgg <= 0) return Infinity;\n        return Math.ceil(fixedCosts / contributionPerEgg);\n    }\n\n    static calculateROI(profit, investment) {\n        if (investment === 0) return 0;\n        return (profit / investment) * 100;\n    }\n\n    static projectProduction(currentRate, growthRate, weeks) {\n        return currentRate * Math.pow((1 + growthRate / 100), weeks);\n    }\n\n    static calculateSeasonalIndex(monthlyData) {\n        const average = monthlyData.reduce((sum, val) => sum + val, 0) / monthlyData.length;\n        return monthlyData.map(value => (value / average) * 100);\n    }\n\n    static calculateOptimalFeedAmount(birdWeight, layingRate, weatherFactor = 1) {\n        // Base feed requirement: 4% of body weight + 2g per egg\n        const baseFeed = birdWeight * 0.04;\n        const eggFeed = (layingRate / 100) * 2;\n        return (baseFeed + eggFeed) * weatherFactor;\n    }\n\n    static calculateWaterRequirement(temperature, birdWeight, layingRate) {\n        // Base water: 2-3 times feed intake\n        const baseFeed = this.calculateOptimalFeedAmount(birdWeight, layingRate);\n        const baseWater = baseFeed * 2.5;\n        \n        // Temperature adjustment\n        const tempFactor = temperature > 25 ? 1 + ((temperature - 25) * 0.05) : 1;\n        \n        return baseWater * tempFactor;\n    }\n\n    static formatPercentage(value, decimals = 1) {\n        return `${value.toFixed(decimals)}%`;\n    }\n\n    static formatCurrency(value, currency = '₵') {\n        return `${currency}${value.toFixed(2)}`;\n    }\n\n    static formatDate(date, period = 'day') {\n        const d = new Date(date);\n        const day = String(d.getDate()).padStart(2, '0');\n        const month = String(d.getMonth() + 1).padStart(2, '0');\n        const year = d.getFullYear();\n        \n        switch (period) {\n            case 'year':\n                return `${year}`;\n            case 'month':\n                return `${month}/${year}`;\n            case 'week':\n                // For weekly, show week starting date\n                return `${day}/${month}/${year}`;\n            case 'day':\n            default:\n                return `${day}/${month}/${year}`;\n        }\n    }\n\n    static formatWeight(value, unit = 'kg') {\n        return `${value.toFixed(2)} ${unit}`;\n    }\n\n    static groupDataByPeriod(data, period = 'week') {\n        const grouped = {};\n        \n        data.forEach(item => {\n            const date = new Date(item.date);\n            let key;\n            \n            switch (period) {\n                case 'day':\n                    key = item.date;\n                    break;\n                case 'week':\n                    const weekStart = new Date(date);\n                    weekStart.setDate(date.getDate() - date.getDay());\n                    key = weekStart.toISOString().split('T')[0];\n                    break;\n                case 'month':\n                    key = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-01`;\n                    break;\n                case 'quarter':\n                    const quarter = Math.floor(date.getMonth() / 3) + 1;\n                    key = `${date.getFullYear()}-Q${quarter}`;\n                    break;\n                case 'year':\n                    key = `${date.getFullYear()}-01-01`;\n                    break;\n                default:\n                    key = item.date;\n            }\n            \n            if (!grouped[key]) {\n                grouped[key] = [];\n            }\n            grouped[key].push(item);\n        });\n        \n        return grouped;\n    }\n\n    static calculateMovingAverage(data, windowSize) {\n        const result = [];\n        for (let i = windowSize - 1; i < data.length; i++) {\n            const window = data.slice(i - windowSize + 1, i + 1);\n            const average = window.reduce((sum, val) => sum + val, 0) / windowSize;\n            result.push(average);\n        }\n        return result;\n    }\n\n    // Add cycle-based metrics calculation methods\n    static calculateCycleMetrics(productionLogs, cages, feedLogs) {\n        const totalBirds = cages.reduce((sum, cage) => sum + (cage.currentBirds || 0), 0);\n        const totalEggs = productionLogs.reduce((sum, log) => sum + (log.eggsCollected || log.eggsProduced || 0), 0);\n        const totalFeed = feedLogs.reduce((sum, log) => sum + (log.feedConsumed || log.amount || 0), 0);\n        \n        const cycleLength = productionLogs.length > 0 ? \n            Math.max(...productionLogs.map(log => log.flockAge || 0)) : 0;\n        \n        return {\n            totalBirds,\n            totalEggs,\n            totalFeed,\n            cycleLength,\n            avgLayingRate: this.calculateLayingPercentage(totalEggs, totalBirds, cycleLength),\n            feedConversionRatio: this.calculateFeedConversionRatio(totalFeed, totalEggs),\n            feedEfficiency: this.calculateFeedEfficiency(totalEggs, totalFeed)\n        };\n    }\n\n    static calculateHenHouseProduction(eggsProduced, flockAge, layingStartAge = 133) {\n        // Hen house production = eggs per bird from laying period (19 weeks = 133 days)\n        if (flockAge < layingStartAge) return 0;\n        const layingDays = flockAge - layingStartAge;\n        return layingDays > 0 ? eggsProduced / layingDays : 0;\n    }\n\n    static calculateCumulativeMetrics(logs) {\n        const totalMortality = logs.reduce((sum, log) => sum + (log.mortality || 0), 0);\n        const totalEggs = logs.reduce((sum, log) => sum + (log.eggsCollected || 0), 0);\n        const totalFeed = logs.reduce((sum, log) => sum + (log.currentFeed || 0), 0);\n        \n        return {\n            totalMortality,\n            totalEggs,\n            totalFeed,\n            avgProduction: logs.length > 0 ? totalEggs / logs.length : 0\n        };\n    }\n}","size_bytes":8283},"js/utils/charts.js":{"content":"class ChartManager {\n    constructor() {\n        this.charts = {};\n        this.defaultColors = [\n            '#2563eb', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6',\n            '#06b6d4', '#84cc16', '#f97316', '#ec4899', '#6366f1'\n        ];\n    }\n\n    createLineChart(canvasId, data, options = {}) {\n        const ctx = document.getElementById(canvasId);\n        if (!ctx) return null;\n\n        const defaultOptions = {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: {\n                    position: 'top',\n                },\n                tooltip: {\n                    mode: 'index',\n                    intersect: false,\n                }\n            },\n            scales: {\n                x: {\n                    display: true,\n                    grid: {\n                        display: true,\n                        color: '#e2e8f0'\n                    }\n                },\n                y: {\n                    display: true,\n                    grid: {\n                        display: true,\n                        color: '#e2e8f0'\n                    }\n                }\n            },\n            interaction: {\n                mode: 'nearest',\n                axis: 'x',\n                intersect: false\n            }\n        };\n\n        const config = {\n            type: 'line',\n            data: this.formatLineData(data),\n            options: { ...defaultOptions, ...options }\n        };\n\n        if (this.charts[canvasId]) {\n            this.charts[canvasId].destroy();\n        }\n\n        this.charts[canvasId] = new Chart(ctx, config);\n        return this.charts[canvasId];\n    }\n\n    createBarChart(canvasId, data, options = {}) {\n        const ctx = document.getElementById(canvasId);\n        if (!ctx) return null;\n\n        const defaultOptions = {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: {\n                    position: 'top',\n                }\n            },\n            scales: {\n                x: {\n                    grid: {\n                        display: false\n                    }\n                },\n                y: {\n                    beginAtZero: true,\n                    grid: {\n                        color: '#e2e8f0'\n                    }\n                }\n            }\n        };\n\n        const config = {\n            type: 'bar',\n            data: this.formatBarData(data),\n            options: { ...defaultOptions, ...options }\n        };\n\n        if (this.charts[canvasId]) {\n            this.charts[canvasId].destroy();\n        }\n\n        this.charts[canvasId] = new Chart(ctx, config);\n        return this.charts[canvasId];\n    }\n\n    createDoughnutChart(canvasId, data, options = {}) {\n        const ctx = document.getElementById(canvasId);\n        if (!ctx) return null;\n\n        const defaultOptions = {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n                legend: {\n                    position: 'bottom',\n                }\n            },\n            cutout: '60%'\n        };\n\n        const config = {\n            type: 'doughnut',\n            data: this.formatDoughnutData(data),\n            options: { ...defaultOptions, ...options }\n        };\n\n        if (this.charts[canvasId]) {\n            this.charts[canvasId].destroy();\n        }\n\n        this.charts[canvasId] = new Chart(ctx, config);\n        return this.charts[canvasId];\n    }\n\n    formatLineData(data) {\n        return {\n            labels: data.labels || [],\n            datasets: data.datasets?.map((dataset, index) => ({\n                label: dataset.label || `Dataset ${index + 1}`,\n                data: dataset.data || [],\n                borderColor: dataset.color || this.defaultColors[index % this.defaultColors.length],\n                backgroundColor: dataset.backgroundColor || this.hexToRgba(dataset.color || this.defaultColors[index % this.defaultColors.length], 0.1),\n                borderWidth: 2,\n                fill: dataset.fill || false,\n                tension: 0.4,\n                pointRadius: 4,\n                pointHoverRadius: 6,\n                yAxisID: dataset.yAxisID // Preserve yAxisID for dual axis charts\n            })) || []\n        };\n    }\n\n    formatBarData(data) {\n        return {\n            labels: data.labels || [],\n            datasets: data.datasets?.map((dataset, index) => ({\n                label: dataset.label || `Dataset ${index + 1}`,\n                data: dataset.data || [],\n                backgroundColor: dataset.color || this.defaultColors[index % this.defaultColors.length],\n                borderColor: dataset.color || this.defaultColors[index % this.defaultColors.length],\n                borderWidth: 1,\n                borderRadius: 4\n            })) || []\n        };\n    }\n\n    formatDoughnutData(data) {\n        return {\n            labels: data.labels || [],\n            datasets: [{\n                data: data.values || [],\n                backgroundColor: data.colors || this.defaultColors.slice(0, data.values?.length || 0),\n                borderWidth: 2,\n                borderColor: '#ffffff'\n            }]\n        };\n    }\n\n    updateChart(canvasId, newData) {\n        const chart = this.charts[canvasId];\n        if (!chart) return;\n\n        if (chart.config.type === 'doughnut') {\n            chart.data = this.formatDoughnutData(newData);\n        } else if (chart.config.type === 'bar') {\n            chart.data = this.formatBarData(newData);\n        } else {\n            chart.data = this.formatLineData(newData);\n        }\n\n        chart.update();\n    }\n\n    destroyChart(canvasId) {\n        if (this.charts[canvasId]) {\n            this.charts[canvasId].destroy();\n            delete this.charts[canvasId];\n        }\n    }\n\n    destroyAllCharts() {\n        Object.keys(this.charts).forEach(canvasId => {\n            this.destroyChart(canvasId);\n        });\n    }\n\n    hexToRgba(hex, alpha = 1) {\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result\n            ? `rgba(${parseInt(result[1], 16)}, ${parseInt(result[2], 16)}, ${parseInt(result[3], 16)}, ${alpha})`\n            : hex;\n    }\n\n    createProductionChart(containerId, productionData) {\n        const canvas = document.createElement('canvas');\n        canvas.id = `chart-${containerId}`;\n        canvas.style.maxHeight = '300px';\n        \n        const container = document.getElementById(containerId);\n        container.innerHTML = '';\n        container.appendChild(canvas);\n\n        const chartData = {\n            labels: productionData.map(d => {\n                // Use Calculations.formatDate if available, otherwise use dd/mm/yyyy format\n                if (typeof Calculations !== 'undefined' && Calculations.formatDate) {\n                    return Calculations.formatDate(d.date);\n                }\n                const date = new Date(d.date);\n                const day = String(date.getDate()).padStart(2, '0');\n                const month = String(date.getMonth() + 1).padStart(2, '0');\n                const year = date.getFullYear();\n                return `${day}/${month}/${year}`;\n            }),\n            datasets: [\n                {\n                    label: 'Eggs Collected',\n                    data: productionData.map(d => d.eggsCollected || 0),\n                    color: '#2563eb',\n                    fill: true\n                },\n                {\n                    label: 'Laying %',\n                    data: productionData.map(d => d.layingPercentage || 0),\n                    color: '#10b981',\n                    fill: false\n                }\n            ]\n        };\n\n        return this.createLineChart(canvas.id, chartData, {\n            scales: {\n                y: {\n                    beginAtZero: true\n                }\n            }\n        });\n    }\n\n    createFeedChart(containerId, feedData) {\n        const canvas = document.createElement('canvas');\n        canvas.id = `chart-${containerId}`;\n        canvas.style.maxHeight = '300px';\n        \n        const container = document.getElementById(containerId);\n        container.innerHTML = '';\n        container.appendChild(canvas);\n\n        const chartData = {\n            labels: feedData.map(d => {\n                // Use Calculations.formatDate if available, otherwise use dd/mm/yyyy format\n                if (typeof Calculations !== 'undefined' && Calculations.formatDate) {\n                    return Calculations.formatDate(d.date);\n                }\n                const date = new Date(d.date);\n                const day = String(date.getDate()).padStart(2, '0');\n                const month = String(date.getMonth() + 1).padStart(2, '0');\n                const year = date.getFullYear();\n                return `${day}/${month}/${year}`;\n            }),\n            datasets: [\n                {\n                    label: 'Feed Consumed (kg)',\n                    data: feedData.map(d => d.amount || 0),\n                    color: '#f59e0b'\n                }\n            ]\n        };\n\n        return this.createBarChart(canvas.id, chartData);\n    }\n\n    createPerformanceChart(containerId, performanceData) {\n        const canvas = document.createElement('canvas');\n        canvas.id = `chart-${containerId}`;\n        canvas.style.maxHeight = '300px';\n        \n        const container = document.getElementById(containerId);\n        container.innerHTML = '';\n        container.appendChild(canvas);\n\n        const chartData = {\n            labels: ['Excellent', 'Good', 'Average', 'Below Average'],\n            values: performanceData.values || [0, 0, 0, 0],\n            colors: ['#10b981', '#84cc16', '#f59e0b', '#ef4444']\n        };\n\n        return this.createDoughnutChart(canvas.id, chartData);\n    }\n\n    createTrendChart(containerId, trendData, title = 'Trend Analysis') {\n        const canvas = document.createElement('canvas');\n        canvas.id = `chart-${containerId}`;\n        canvas.style.maxHeight = '300px';\n        \n        const container = document.getElementById(containerId);\n        container.innerHTML = '';\n        container.appendChild(canvas);\n\n        const chartData = {\n            labels: trendData.labels || [],\n            datasets: trendData.datasets || []\n        };\n\n        return this.createLineChart(canvas.id, chartData, {\n            plugins: {\n                title: {\n                    display: true,\n                    text: title\n                }\n            }\n        });\n    }\n}\n\n// Global chart manager instance\nconst chartManager = new ChartManager();","size_bytes":10642},"js/utils/csv-handler.js":{"content":"/**\n * CSV Import/Export Handler for Poultry Management System\n * Handles bidirectional CSV data transfer with Excel compatibility\n */\n\nclass CSVHandler {\n    constructor() {\n        this.db = null;\n    }\n\n    async init(database) {\n        this.db = database;\n    }\n\n    // Parse CSV text to array of objects\n    parseCSV(csvText) {\n        const lines = csvText.trim().split('\\n');\n        if (lines.length < 2) return [];\n\n        const headers = lines[0].split(',').map(h => h.trim().replace(/\"/g, ''));\n        console.log('CSV Headers:', headers);\n        const data = [];\n\n        for (let i = 1; i < lines.length; i++) {\n            const values = this.parseCSVLine(lines[i]);\n            console.log(`Row ${i} values:`, values);\n            \n            if (values.length >= headers.length) {\n                const row = {};\n                headers.forEach((header, index) => {\n                    row[header] = values[index] ? values[index].trim().replace(/\"/g, '') : '';\n                });\n                console.log(`Row ${i} parsed:`, row);\n                data.push(row);\n            }\n        }\n\n        console.log('Final parsed data:', data);\n        return data;\n    }\n\n    // Parse a single CSV line handling quoted values\n    parseCSVLine(line) {\n        const result = [];\n        let current = '';\n        let inQuotes = false;\n\n        for (let i = 0; i < line.length; i++) {\n            const char = line[i];\n            \n            if (char === '\"' && (i === 0 || line[i-1] === ',')) {\n                inQuotes = true;\n            } else if (char === '\"' && inQuotes && (i === line.length - 1 || line[i+1] === ',')) {\n                inQuotes = false;\n            } else if (char === ',' && !inQuotes) {\n                result.push(current.trim());\n                current = '';\n            } else {\n                current += char;\n            }\n        }\n        result.push(current.trim());\n        return result;\n    }\n\n    // Parse dd/mm/yyyy date format to ISO date string\n    parseDateFormat(dateString) {\n        if (!dateString || dateString.trim() === '') {\n            return new Date().toISOString().split('T')[0];\n        }\n\n        console.log('Parsing date string:', dateString);\n        \n        // Check if it's already in yyyy-mm-dd format\n        if (/^\\d{4}-\\d{2}-\\d{2}$/.test(dateString)) {\n            return dateString;\n        }\n        \n        // Handle dd/mm/yyyy format\n        if (/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(dateString)) {\n            const [day, month, year] = dateString.split('/');\n            const isoDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n            console.log('Converted dd/mm/yyyy to ISO:', isoDate);\n            return isoDate;\n        }\n        \n        // Handle mm/dd/yyyy format (fallback)\n        if (/^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/.test(dateString)) {\n            const [month, day, year] = dateString.split('/');\n            const isoDate = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;\n            console.log('Converted mm/dd/yyyy to ISO:', isoDate);\n            return isoDate;\n        }\n        \n        // Try to parse as regular date and convert to ISO\n        try {\n            const parsed = new Date(dateString);\n            if (!isNaN(parsed.getTime())) {\n                return parsed.toISOString().split('T')[0];\n            }\n        } catch (e) {\n            console.warn('Failed to parse date:', dateString);\n        }\n        \n        // Fallback to current date\n        return new Date().toISOString().split('T')[0];\n    }\n\n    // Convert array of objects to CSV\n    arrayToCSV(data, headers) {\n        if (!data || data.length === 0) return '';\n\n        const csvHeaders = headers.join(',');\n        const csvRows = data.map(row => {\n            return headers.map(header => {\n                const value = row[header] || '';\n                // Escape values that contain commas or quotes\n                if (typeof value === 'string' && (value.includes(',') || value.includes('\"') || value.includes('\\n'))) {\n                    return `\"${value.replace(/\"/g, '\"\"')}\"`;\n                }\n                return value;\n            }).join(',');\n        });\n\n        return [csvHeaders, ...csvRows].join('\\n');\n    }\n\n    // Export production logs to CSV\n    async exportProductionLogs(cycleId = null) {\n        const productionLogs = await this.db.getProductionLogs(cycleId);\n        const cages = await this.db.getAllCages();\n        const cycles = await this.db.getAllCycles();\n\n        // Create lookup maps\n        const cageMap = {};\n        cages.forEach(cage => cageMap[cage.id] = cage.name);\n        const cycleMap = {};\n        cycles.forEach(cycle => cycleMap[cycle.id] = cycle.name || `Cycle ${cycle.id}`);\n\n        const headers = [\n            'Date', 'Cycle', 'Cage', 'Flock_Age_Days', 'Opening_Birds', \n            'Mortality', 'Birds_Sold', 'Eggs_Produced', 'Closing_Birds', \n            'Production_Percentage', 'Notes'\n        ];\n\n        const csvData = productionLogs.map(log => ({\n            'Date': log.date,\n            'Cycle': cycleMap[log.cycleId] || log.cycleId,\n            'Cage': cageMap[log.cageId] || log.cageId,\n            'Flock_Age_Days': log.flockAgeDays || '',\n            'Opening_Birds': log.openingBirds || '',\n            'Mortality': log.mortality || 0,\n            'Birds_Sold': log.birdsSold || 0,\n            'Eggs_Produced': log.eggsProduced || 0,\n            'Closing_Birds': log.closingBirds || '',\n            'Production_Percentage': log.productionPercentage || '',\n            'Notes': log.notes || ''\n        }));\n\n        return this.arrayToCSV(csvData, headers);\n    }\n\n    // Export sales data to CSV\n    async exportSales(cycleId = null) {\n        const sales = await this.db.getSales(cycleId);\n        const cycles = await this.db.getAllCycles();\n        \n        const cycleMap = {};\n        cycles.forEach(cycle => cycleMap[cycle.id] = cycle.name || `Cycle ${cycle.id}`);\n\n        const headers = [\n            'Date', 'Cycle', 'Sale_Type', 'Customer', 'Crates', 'Price_Per_Crate', \n            'Bird_Quantity', 'Price_Per_Bird', 'Weight_Kg', 'Total_Amount', \n            'Payment_Method', 'Notes'\n        ];\n\n        const csvData = sales.map(sale => ({\n            'Date': sale.date,\n            'Cycle': cycleMap[sale.cycleId] || sale.cycleId,\n            'Sale_Type': sale.saleType || 'egg',\n            'Customer': sale.customer || '',\n            'Crates': sale.crates || '',\n            'Price_Per_Crate': sale.pricePerCrate || '',\n            'Bird_Quantity': sale.birdQuantity || '',\n            'Price_Per_Bird': sale.pricePerBird || '',\n            'Weight_Kg': sale.weight || '',\n            'Total_Amount': sale.amount || 0,\n            'Payment_Method': sale.paymentMethod || '',\n            'Notes': sale.notes || ''\n        }));\n\n        return this.arrayToCSV(csvData, headers);\n    }\n\n    // Export expenses to CSV\n    async exportExpenses(cycleId = null) {\n        const expenses = await this.db.getExpenses(cycleId);\n        const cycles = await this.db.getAllCycles();\n        \n        const cycleMap = {};\n        cycles.forEach(cycle => cycleMap[cycle.id] = cycle.name || `Cycle ${cycle.id}`);\n\n        const headers = [\n            'Date', 'Cycle', 'Category', 'Description', 'Amount', \n            'Payment_Method', 'Notes'\n        ];\n\n        const csvData = expenses.map(expense => ({\n            'Date': expense.date,\n            'Cycle': cycleMap[expense.cycleId] || expense.cycleId,\n            'Category': expense.category || '',\n            'Description': expense.description || '',\n            'Amount': expense.amount || 0,\n            'Payment_Method': expense.paymentMethod || '',\n            'Notes': expense.notes || ''\n        }));\n\n        return this.arrayToCSV(csvData, headers);\n    }\n\n    // Export feed logs to CSV\n    async exportFeedLogs(cycleId = null) {\n        const feedLogs = await this.db.getFeedLogs(cycleId);\n        const cycles = await this.db.getAllCycles();\n        \n        const cycleMap = {};\n        cycles.forEach(cycle => cycleMap[cycle.id] = cycle.name || `Cycle ${cycle.id}`);\n\n        const headers = [\n            'Date', 'Cycle', 'Feed_Consumed_Kg', 'Feed_Cost', 'Notes'\n        ];\n\n        const csvData = feedLogs.map(log => ({\n            'Date': log.date,\n            'Cycle': cycleMap[log.cycleId] || log.cycleId,\n            'Feed_Consumed_Kg': log.amount || 0,\n            'Feed_Cost': log.cost || 0,\n            'Notes': log.notes || ''\n        }));\n\n        return this.arrayToCSV(csvData, headers);\n    }\n\n    // Import production logs from CSV\n    async importProductionLogs(csvText) {\n        const data = this.parseCSV(csvText);\n        const cycles = await this.db.getAllCycles();\n        const cages = await this.db.getAllCages();\n\n        // Create lookup maps and track new items\n        const cycleMap = {};\n        cycles.forEach(cycle => {\n            cycleMap[cycle.name] = cycle.id;\n            cycleMap[cycle.id] = cycle.id;\n        });\n        \n        const cageMap = {};\n        cages.forEach(cage => {\n            cageMap[cage.name] = cage.id;\n            cageMap[cage.id] = cage.id;\n        });\n\n        const results = { success: 0, errors: [], newCycles: 0, newCages: 0 };\n\n        for (const row of data) {\n            try {\n                const cycleName = row.Cycle || row.cycleId;\n                const cageName = row.Cage || row.cageId;\n                \n                // Get or create cycle\n                let cycleId = cycleMap[cycleName];\n                if (!cycleId) {\n                    const newCycle = {\n                        name: cycleName,\n                        startDate: this.parseDateFormat(row.Date) || new Date().toISOString().split('T')[0],\n                        endDate: null,\n                        status: 'active',\n                        notes: `Auto-created from CSV import`,\n                        createdAt: new Date().toISOString()\n                    };\n                    cycleId = await this.db.add('cycles', newCycle);\n                    cycleMap[cycleName] = cycleId;\n                    results.newCycles++;\n                }\n\n                // Get or create cage\n                let cageId = cageMap[cageName];\n                if (!cageId) {\n                    const newCage = {\n                        name: cageName,\n                        cycleId: cycleId,\n                        capacity: 500, // Default capacity\n                        currentBirds: parseInt(row.Opening_Birds || row.openingBirds) || 0,\n                        breed: 'Mixed',\n                        status: 'active',\n                        notes: `Auto-created from CSV import`,\n                        createdAt: new Date().toISOString()\n                    };\n                    cageId = await this.db.add('cages', newCage);\n                    cageMap[cageName] = cageId;\n                    results.newCages++;\n                }\n\n                const productionLog = {\n                    cycleId: cycleId,\n                    cageId: cageId,\n                    date: this.parseDateFormat(row.Date || row.date),\n                    flockAgeDays: parseInt(row.Flock_Age_Days || row.flockAgeDays) || 0,\n                    openingBirds: parseInt(row.Opening_Birds || row.openingBirds) || 0,\n                    mortality: parseInt(row.Mortality || row.mortality) || 0,\n                    birdsSold: parseInt(row.Birds_Sold || row.birdsSold) || 0,\n                    eggsProduced: parseInt(row.Eggs_Produced || row.eggsProduced) || 0,\n                    closingBirds: parseInt(row.Closing_Birds || row.closingBirds) || 0,\n                    productionPercentage: parseFloat(row.Production_Percentage || row.productionPercentage) || 0,\n                    notes: row.Notes || row.notes || '',\n                    createdAt: new Date().toISOString()\n                };\n\n                await this.db.addProductionLog(productionLog);\n                results.success++;\n            } catch (error) {\n                results.errors.push(`Row ${data.indexOf(row) + 2}: ${error.message}`);\n            }\n        }\n\n        return results;\n    }\n\n    // Import sales from CSV\n    async importSales(csvText) {\n        const data = this.parseCSV(csvText);\n        const cycles = await this.db.getAllCycles();\n\n        const cycleMap = {};\n        cycles.forEach(cycle => {\n            cycleMap[cycle.name] = cycle.id;\n            cycleMap[cycle.id] = cycle.id;\n        });\n\n        const results = { success: 0, errors: [], newCycles: 0 };\n\n        for (const row of data) {\n            try {\n                const cycleName = row.Cycle || row.cycleId;\n                \n                // Get or create cycle\n                let cycleId = cycleMap[cycleName];\n                if (!cycleId) {\n                    const newCycle = {\n                        name: cycleName,\n                        startDate: this.parseDateFormat(row.Date) || new Date().toISOString().split('T')[0],\n                        endDate: null,\n                        status: 'active',\n                        notes: `Auto-created from CSV import`,\n                        createdAt: new Date().toISOString()\n                    };\n                    cycleId = await this.db.add('cycles', newCycle);\n                    cycleMap[cycleName] = cycleId;\n                    results.newCycles++;\n                }\n\n                const sale = {\n                    cycleId: cycleId,\n                    date: this.parseDateFormat(row.Date || row.date),\n                    saleType: row.Sale_Type || row.saleType || 'egg',\n                    customer: row.Customer || row.customer || '',\n                    amount: parseFloat(row.Total_Amount || row.amount) || 0,\n                    paymentMethod: row.Payment_Method || row.paymentMethod || 'cash',\n                    notes: row.Notes || row.notes || '',\n                    createdAt: new Date().toISOString()\n                };\n\n                // Add type-specific fields\n                if (sale.saleType === 'egg') {\n                    sale.crates = parseInt(row.Crates || row.crates) || 0;\n                    sale.pricePerCrate = parseFloat(row.Price_Per_Crate || row.pricePerCrate) || 0;\n                } else if (sale.saleType === 'bird') {\n                    sale.birdQuantity = parseInt(row.Bird_Quantity || row.birdQuantity) || 0;\n                    sale.pricePerBird = parseFloat(row.Price_Per_Bird || row.pricePerBird) || 0;\n                    sale.weight = parseFloat(row.Weight_Kg || row.weight) || 0;\n                }\n\n                await this.db.addSale(sale);\n                results.success++;\n            } catch (error) {\n                results.errors.push(`Row ${data.indexOf(row) + 2}: ${error.message}`);\n            }\n        }\n\n        return results;\n    }\n\n    // Import expenses from CSV\n    async importExpenses(csvText) {\n        const data = this.parseCSV(csvText);\n        const cycles = await this.db.getAllCycles();\n\n        const cycleMap = {};\n        cycles.forEach(cycle => {\n            cycleMap[cycle.name] = cycle.id;\n            cycleMap[cycle.id] = cycle.id;\n        });\n\n        const results = { success: 0, errors: [], newCycles: 0 };\n\n        for (const row of data) {\n            try {\n                const cycleName = row.Cycle || row.cycleId;\n                \n                // Get or create cycle\n                let cycleId = cycleMap[cycleName];\n                if (!cycleId) {\n                    const newCycle = {\n                        name: cycleName,\n                        startDate: this.parseDateFormat(row.Date) || new Date().toISOString().split('T')[0],\n                        endDate: null,\n                        status: 'active',\n                        notes: `Auto-created from CSV import`,\n                        createdAt: new Date().toISOString()\n                    };\n                    cycleId = await this.db.add('cycles', newCycle);\n                    cycleMap[cycleName] = cycleId;\n                    results.newCycles++;\n                }\n\n                const expense = {\n                    cycleId: cycleId,\n                    date: this.parseDateFormat(row.Date || row.date),\n                    category: row.Category || row.category || 'other',\n                    description: row.Description || row.description || '',\n                    amount: parseFloat(row.Amount || row.amount) || 0,\n                    paymentMethod: row.Payment_Method || row.paymentMethod || 'cash',\n                    notes: row.Notes || row.notes || '',\n                    createdAt: new Date().toISOString()\n                };\n\n                await this.db.addExpense(expense);\n                results.success++;\n            } catch (error) {\n                results.errors.push(`Row ${data.indexOf(row) + 2}: ${error.message}`);\n            }\n        }\n\n        return results;\n    }\n\n    // Import feed logs from CSV\n    async importFeedLogs(csvText) {\n        const data = this.parseCSV(csvText);\n        const cycles = await this.db.getAllCycles();\n\n        const cycleMap = {};\n        cycles.forEach(cycle => {\n            cycleMap[cycle.name] = cycle.id;\n            cycleMap[cycle.id] = cycle.id;\n        });\n\n        const results = { success: 0, errors: [], newCycles: 0 };\n\n        for (const row of data) {\n            try {\n                console.log('Processing row:', row);\n                \n                const cycleName = row.Cycle || row.cycleId;\n                console.log('Cycle name:', cycleName);\n                \n                // Get or create cycle\n                let cycleId = cycleMap[cycleName];\n                if (!cycleId) {\n                    const newCycle = {\n                        name: cycleName,\n                        startDate: this.parseDateFormat(row.Date) || new Date().toISOString().split('T')[0],\n                        endDate: null,\n                        status: 'active',\n                        notes: `Auto-created from CSV import`,\n                        createdAt: new Date().toISOString()\n                    };\n                    cycleId = await this.db.add('cycles', newCycle);\n                    cycleMap[cycleName] = cycleId;\n                    results.newCycles++;\n                    console.log('Created new cycle with ID:', cycleId);\n                }\n\n                const feedDate = row.Date || row.date;\n                console.log('Feed date from CSV:', feedDate);\n                \n                // Parse date using our dd/mm/yyyy parser\n                const formattedDate = this.parseDateFormat(feedDate);\n                console.log('Formatted date:', formattedDate);\n                \n                // Check if a feed log already exists for this cycle and date\n                const existingLogs = await this.db.getFeedLogs(cycleId);\n                const existingLog = existingLogs.find(log => log.date === formattedDate);\n                console.log('Existing log found:', !!existingLog);\n                \n                const feedAmount = parseFloat(row.Feed_Consumed_Kg || row.feedConsumed || row.amount) || 0;\n                const feedCost = parseFloat(row.Feed_Cost || row.feedCost || row.cost) || 0;\n                const feedNotes = row.Notes || row.notes || '';\n                \n                console.log('Feed amount parsed:', feedAmount);\n                console.log('Feed cost parsed:', feedCost);\n                console.log('Feed notes:', feedNotes);\n                \n                const feedLogData = {\n                    cycleId: cycleId,\n                    date: formattedDate,\n                    amount: feedAmount,\n                    cost: feedCost,\n                    notes: feedNotes,\n                    updatedAt: new Date().toISOString()\n                };\n                \n                console.log('Feed log data to save:', feedLogData);\n\n                if (existingLog) {\n                    // Update existing record\n                    feedLogData.id = existingLog.id;\n                    feedLogData.createdAt = existingLog.createdAt;\n                    console.log('Updating existing feed log with ID:', existingLog.id);\n                    await this.db.update('feedLogs', feedLogData);\n                } else {\n                    // Create new record\n                    feedLogData.createdAt = new Date().toISOString();\n                    console.log('Creating new feed log');\n                    const newId = await this.db.addFeedLog(feedLogData);\n                    console.log('Created feed log with ID:', newId);\n                }\n                results.success++;\n            } catch (error) {\n                console.error('Error processing row:', error, row);\n                results.errors.push(`Row ${data.indexOf(row) + 2}: ${error.message}`);\n            }\n        }\n\n        return results;\n    }\n\n    // Download CSV file\n    downloadCSV(csvContent, filename) {\n        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n        const link = document.createElement('a');\n        \n        if (link.download !== undefined) {\n            const url = URL.createObjectURL(blob);\n            link.setAttribute('href', url);\n            link.setAttribute('download', filename);\n            link.style.visibility = 'hidden';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    }\n\n    // Create import template files\n    getProductionLogTemplate() {\n        const headers = [\n            'Date', 'Cycle', 'Cage', 'Flock_Age_Days', 'Opening_Birds', \n            'Mortality', 'Birds_Sold', 'Eggs_Produced', 'Closing_Birds', \n            'Production_Percentage', 'Notes'\n        ];\n        \n        const sampleRow = [\n            '2025-07-21', 'Cycle 1', 'Cage A1', '150', '100', \n            '1', '0', '85', '99', '85.0', 'Normal production day'\n        ];\n\n        return [headers.join(','), sampleRow.join(',')].join('\\n');\n    }\n\n    getSalesTemplate() {\n        const headers = [\n            'Date', 'Cycle', 'Sale_Type', 'Customer', 'Crates', 'Price_Per_Crate', \n            'Bird_Quantity', 'Price_Per_Bird', 'Weight_Kg', 'Total_Amount', \n            'Payment_Method', 'Notes'\n        ];\n        \n        const sampleRow = [\n            '2025-07-21', 'Cycle 1', 'egg', 'Local Market', '10', '40.00', \n            '', '', '', '400.00', 'cash', 'Weekly egg sale'\n        ];\n\n        return [headers.join(','), sampleRow.join(',')].join('\\n');\n    }\n\n    getExpensesTemplate() {\n        const headers = [\n            'Date', 'Cycle', 'Category', 'Description', 'Amount', \n            'Payment_Method', 'Notes'\n        ];\n        \n        const sampleRow = [\n            '2025-07-21', 'Cycle 1', 'feed', 'Layer feed 50kg', '150.00', \n            'cash', 'Weekly feed purchase'\n        ];\n\n        return [headers.join(','), sampleRow.join(',')].join('\\n');\n    }\n\n    getFeedLogTemplate() {\n        const headers = [\n            'Date', 'Cycle', 'Feed_Consumed_Kg', 'Feed_Cost', 'Notes'\n        ];\n        \n        const sampleRow = [\n            '2025-07-21', 'Cycle 1', '25.5', '85.00', 'Daily feed consumption'\n        ];\n\n        return [headers.join(','), sampleRow.join(',')].join('\\n');\n    }\n}\n\n// Export the class\nwindow.CSVHandler = CSVHandler;","size_bytes":23351}}}